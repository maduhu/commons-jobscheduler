package sos.net.ssh;
import static org.junit.Assert.assertEquals;

import java.util.HashMap;
import java.util.Set;

import org.apache.log4j.Logger;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.sos.JSHelper.Basics.JSJobUtilities;
import com.sos.JSHelper.Basics.JSJobUtilitiesClass;
import com.sos.JSHelper.Listener.JSListenerClass;
import com.sos.JSHelper.Logging.Log4JHelper;
import com.sos.JSHelper.io.Files.JSTextFile;
import com.sos.i18n.Msg;
import com.sos.i18n.Msg.BundleBaseName;
import com.sos.i18n.annotation.I18NResourceBundle;

/**
* \class SOSSSHJob2Test
*
* \brief SOSSSHJob2Test -
*
* \details
*
* \section SOSSSHJob2Test.java_intro_sec Introduction
*
* \section SOSSSHJob2Test.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* @version $Id$17.05.2010
* \see reference
*
* Created on 17.05.2010 13:01:51
 */
@I18NResourceBundle(baseName = "com.sos.net.messages", defaultLocale = "en")
public class SOSSSHJob2Test extends JSJobUtilitiesClass<SOSSSHJobOptions> {
	@SuppressWarnings({ "hiding" })
	private static final Logger	logger			= Logger.getLogger(SOSSSHJob2Test.class);
	private final String		conClassName	= "SOSSSHJob2Test";
	@SuppressWarnings("unused")
	private static Log4JHelper	objLogger		= null;

	protected Msg				objMsg			= new Msg(new BundleBaseName(this.getClass().getAnnotation(I18NResourceBundle.class).baseName()));

	public SOSSSHJob2Test() {
		super(new SOSSSHJobOptions());
	}

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	@Before
	public void setUp() throws Exception {
		// TODO über eine Option steuern. Die auch in die Standard-Option-Class aufnehmen
		objLogger = new Log4JHelper("./log4j.properties"); //$NON-NLS-1$
	}

	@After
	public void tearDown() throws Exception {
	}

	@Test
	public void testExecute() throws Exception {
		SOSSSHJob2 objSSH = new SOSSSHJob2();
		SOSSSHJobOptions objOptions = objSSH.Options();
		objSSH.setJSJobUtilites(this);
		String strArgs[] = new String[] { "-command", "ls", "-auth_method", "password", "-host", "wilma.sos", "-auth_file", "test", "-user", "test",
				"-password", "12345" };
		objOptions.CommandLineArgs(strArgs);
		// objOptions.CheckMandatory();
		JSListenerClass.bolLogDebugInformation = true;
		JSListenerClass.intMaxDebugLevel = 9;
		objSSH.Execute();
		assertEquals("auth_file", objOptions.auth_file.Value(), "test");
		assertEquals("user", objOptions.user.Value(), "test");
	}

	@Test(expected = com.sos.JSHelper.Exceptions.JobSchedulerException.class)
	public void testExecuteWithCC() throws Exception {
		SOSSSHJob2 objSSH = new SOSSSHJob2();
		SOSSSHJobOptions objOptions = objSSH.Options();
		objSSH.setJSJobUtilites(this);
		String strArgs[] = new String[] { "-command", "ls;exit 5", "-auth_method", "password", "-host", "wilma.sos", "-auth_file", "test", "-user", "kb",
				"-password", "kb" };
		objOptions.CommandLineArgs(strArgs);
		// objOptions.CheckMandatory();
		JSListenerClass.bolLogDebugInformation = true;
		JSListenerClass.intMaxDebugLevel = 9;
		objSSH.Execute();
		assertEquals("auth_file", objOptions.auth_file.Value(), "test");
		assertEquals("user", objOptions.user.Value(), "test");
		assertEquals("ExitCode not as expected", objSSH.getCC(), 5);
	}

	@Test
	public void testExecuteWithCC0() throws Exception {
		SOSSSHJob2 objSSH = new SOSSSHJob2();
		objOptions = objSSH.Options();
		objSSH.setJSJobUtilites(this);
		String strArgs[] = new String[] { "-command", "ls hallo;exit 0", "-auth_method", "password", "-host", "wilma.sos", "-auth_file", "test", "-user",
				"test", "-password", "12345", "-ignore_stderr", "true" };
		objOptions.CommandLineArgs(strArgs);
		// objOptions.CheckMandatory();
		JSListenerClass.bolLogDebugInformation = true;
		JSListenerClass.intMaxDebugLevel = 9;
		objSSH.Execute();
		assertEquals("auth_file", objOptions.auth_file.Value(), "test");
		assertEquals("user", objOptions.user.Value(), "test");
		assertEquals("ExitCode not as expected", objSSH.getCC(), 0);
	}

	@Test
	public void testExecuteWithCCAndIgnore() throws Exception {
		SOSSSHJob2 objSSH = new SOSSSHJob2();
		objOptions = objSSH.Options();
		objSSH.setJSJobUtilites(this);
		String strArgs[] = new String[] { "-command", "ls hallo;exit 0", "-auth_method", "password", "-host", "wilma.sos", "-auth_file", "test", "-user",
				"test", "-password", "12345", "-ignore_stderr", "false" };
		objOptions.CommandLineArgs(strArgs);
		// objOptions.CheckMandatory();
		JSListenerClass.bolLogDebugInformation = true;
		JSListenerClass.intMaxDebugLevel = 9;
		objSSH.Execute();
		assertEquals("auth_file", objOptions.auth_file.Value(), "test");
		assertEquals("user", objOptions.user.Value(), "test");
		assertEquals("ExitCode not as expected", objSSH.getCC(), 0);
	}

	/**
	 *
	*
	* \brief testExecuteWithCCAndDelimiter
	*
	* \details
	*  we expect an error for "ls hallo" and an immediate exit with cc = 1.
	*
	* \return void
	*
	 */
	@Test
	public void testExecuteWithCCAndDelimiter() throws Exception {
		SOSSSHJob2 objSSH = new SOSSSHJob2();
		objOptions = objSSH.Options();
		objSSH.setJSJobUtilites(this);
		String strArgs[] = new String[] { "-command", "ls hallo%%exit 0", "-auth_method", "password", "-host", "wilma.sos", "-auth_file", "test", "-user",
				"test", "-password", "12345", "-ignore_stderr", "false" };
		objOptions.CommandLineArgs(strArgs);
		// objOptions.CheckMandatory();
		JSListenerClass.bolLogDebugInformation = true;
		JSListenerClass.intMaxDebugLevel = 9;
		objSSH.Execute();
		assertEquals("auth_file", objOptions.auth_file.Value(), "test");
		assertEquals("user", objOptions.user.Value(), "test");
		assertEquals("ExitCode not as expected", objSSH.getCC(), 0);
	}

	@Test
	public void testExecuteCmdString() throws Exception {
		SOSSSHJob2 objSSH = new SOSSSHJob2();
		objSSH.registerMessageListener(this);
		SOSSSHJobOptions objOptions = objSSH.Options();
		objOptions.registerMessageListener(this);
		objSSH.setJSJobUtilites(this);
		String strArgs[] = new String[] { "-command_script", "ps;ls", "-auth_method", "password", "-host", "wilma.sos", "-auth_file", "test", "-user", "test",
				"-password", "12345" };
		objOptions.CommandLineArgs(strArgs);
		// objOptions.CheckMandatory();
		JSListenerClass.bolLogDebugInformation = true;
		JSListenerClass.intMaxDebugLevel = 9;
		objSSH.Execute();
		assertEquals("auth_file", objOptions.auth_file.Value(), "test");
		assertEquals("user", objOptions.user.Value(), "test");
	}

	@Test
	public void testExecuteCmdScriptFile() throws Exception {
		SOSSSHJob2 objSSH = new SOSSSHJob2();
		objSSH.registerMessageListener(this);
		SOSSSHJobOptions objOptions = objSSH.Options();
		objOptions.registerMessageListener(this);
		objSSH.setJSJobUtilites(this);
		String strArgs[] = new String[] { "-command_script_file", "R:/nobackup/junittests/testdata/SSH/hostname.sh", "-auth_method", "password", "-host", "wilma.sos", "-auth_file", "test",
				"-user", "test", "-password", "12345" };
		objOptions.CommandLineArgs(strArgs);
		JSListenerClass.bolLogDebugInformation = true;
		JSListenerClass.intMaxDebugLevel = 9;
		objSSH.Execute();
		assertEquals("auth_file", objOptions.auth_file.Value(), "test");
		assertEquals("user", objOptions.user.Value(), "test");
	}
	

	@Test
	public void testExecuteCommands() throws Exception {
		SOSSSHJob2 objSSH = new SOSSSHJob2();
		objSSH.registerMessageListener(this);
		SOSSSHJobOptions objOptions = objSSH.Options();
		objOptions.registerMessageListener(this);
		objSSH.setJSJobUtilites(this);
		String strArgs[] = new String[] { "-command_script", "ps;ls $SCHEDULER_PARAM_test", "-auth_method", "password", "-host", "wilma.sos", "-auth_file",
				"test", "-user", "test", "-password", "12345" };
		objOptions.CommandLineArgs(strArgs);
		// objOptions.CheckMandatory();
		JSListenerClass.bolLogDebugInformation = true;
		JSListenerClass.intMaxDebugLevel = 9;
		objSSH.setJSJobUtilites(this);
		objSSH.Execute();

		String strCmd[] = objSSH.getCommands2Execute();

		//		assertEquals("strCmd", "ps", strCmd[0]);
		//		assertEquals("strCmd", "ls .", strCmd[1]);
		assertEquals("auth_file", objOptions.auth_file.Value(), "test");
		assertEquals("user", objOptions.user.Value(), "test");
	}

	@Test
	public void testExecuteScriptFile() throws Exception {
		SOSSSHJob2 objSSH = new SOSSSHJob2();
		objSSH.registerMessageListener(this);
		SOSSSHJobOptions objOptions = objSSH.Options();
		objOptions.registerMessageListener(this);
		JSTextFile objScriptFile = new JSTextFile("t.1");
		objScriptFile.WriteLine("ps");
		objScriptFile.deleteOnExit();
		objScriptFile.close();

		objSSH.setJSJobUtilites(this);
		String strArgs[] = new String[] { "-command_script_file", "t.1", "-auth_method", "password", "-host", "wilma.sos", "-auth_file", "test", "-user",
				"test", "-password", "12345" };
		objOptions.CommandLineArgs(strArgs);
		// objOptions.CheckMandatory();
		JSListenerClass.bolLogDebugInformation = true;
		JSListenerClass.intMaxDebugLevel = 9;
		objSSH.setJSJobUtilites(this);
		objSSH.Execute();

		String strCmd[] = objSSH.getCommands2Execute();

		//		assertEquals("strCmd", "ps", strCmd[0]);
		//		assertEquals("strCmd", "ls .", strCmd[1]);
		assertEquals("auth_file", objOptions.auth_file.Value(), "test");
		assertEquals("user", objOptions.user.Value(), "test");
	}

	@Test
	public void testSimulateShellParam() throws Exception {
		SOSSSHJob2 objSSH = new SOSSSHJob2();
		objSSH.registerMessageListener(this);
		SOSSSHJobOptions objOptions = objSSH.Options();
		objOptions.registerMessageListener(this);
		objSSH.setJSJobUtilites(this);
		String strArgs[] = new String[] { "-command", "ls", "-auth_method", "password", "-host", "wilma.sos", "-port", "22", "-user", "test", "-password",
				"12345", "-simulate_shell", "true", "-simulate_shell_prompt_trigger", "test@wilma:~> ", "-simulate_shell_login_timeout", "100000" };
		objOptions.CommandLineArgs(strArgs);
		// objOptions.CheckMandatory();
		JSListenerClass.bolLogDebugInformation = true;
		JSListenerClass.intMaxDebugLevel = 9;
		objSSH.Execute();

	}

	/**
	 *
	 * \brief replaceSchedulerVars
	 *
	 * \details
	 *
	 * \return void
	 *
	 * @param isWindows
	 */
//	@Override
//	public String replaceSchedulerVars(final boolean isWindows, final String pstrString2Modify) {
//		String strTemp = pstrString2Modify;
//		HashMap<String, String> objJobOrOrderParams = new HashMap<String, String>();
//		objJobOrOrderParams.put("test", ".");
//		objJobOrOrderParams.put("test1", "value_of_test1");
//		if (objJobOrOrderParams != null) {
//			// logger.debug("Replacing task and order parameters...");
//			Set<String> paramNames = objJobOrOrderParams.keySet();
//			for (String name : paramNames) {
//				// SignalDebug("Replacing parameter " + name);
//				String regex = "(?i)";
//				String strParamValue = objJobOrOrderParams.get(name);
//				logger.debug("name = " + name + ", value " + strParamValue);
//				if (isWindows) {
//					regex += "%SCHEDULER_PARAM_" + name + "%";
//				}
//				else {
//					regex += "\\$\\{?SCHEDULER_PARAM_" + name + "\\}?";
//				}
//				strTemp = myReplaceAll(strTemp, regex, strParamValue);
//				logger.debug("String after replace = " + strTemp);
//			}
//		}
//		return strTemp;
//	}
	
	@Override
	public String replaceSchedulerVars(final boolean isWindows, final String pstrString2Modify) {
		String strTemp = pstrString2Modify;
		HashMap<String, String> objJobOrOrderParams = new HashMap<String, String>();
		objJobOrOrderParams.put("host", "wilma");
		objJobOrOrderParams.put("test", ".");
		objJobOrOrderParams.put("test1", "value_of_test1");

		if (isNotNull(objJobOrOrderParams)) {
			Set<String> paramNames = objJobOrOrderParams.keySet();
			String regExPattern = "(?i)";
			String regex = "(?i)"; // case insensitive
			//
			/**
			 * beides zulassen, % und $
			 * mögliche Kombinationen sind:
			 *
			 * %SCHEDULER_PARAM_name%
			 * %name%
			 * ${SCHEDULER_PARAM_name}
			 * $SCHEDULER_PARAM_name
			 * §{SCHEDULER_PARAM_name}
			 * §SCHEDULER_PARAM_name
			 * ${name}
			 * §{name}
			 * $name
			 * §name
			 *
			 * Managed-DB:
			 *    §{...}
			 */
			String[] strPatterns = new String[] { "%%SCHEDULER_PARAM_%1$s%%", "%%%1$s%%", "(\\$|§)\\{?SCHEDULER_PARAM_%1$s\\}?", "(\\$|§)\\{?%1$s\\}?" };
			for (String strPattern : strPatterns) {
				regExPattern = strPattern;
				//				logger.debug("regExPattern = " + regExPattern);
				for (String name : paramNames) {
					String strParamValue = objJobOrOrderParams.get(name);
					if (name.contains("password") == false) {
						logger.debug("name = " + name + ", value = " + strParamValue);
					}
					regex = String.format(regExPattern, name);
					logger.debug("regex = " + regex + ", strParamValue = " + strParamValue);
					strTemp = myReplaceAll(strTemp, regex, strParamValue);
				}
				logger.debug("String after replace = " + strTemp);
			}
		}
		return strTemp;
	}

	/**
	 *
	 * \brief myReplaceAll
	 *
	 * \details
	 *
	 * \return String
	 *
	 * @param source
	 * @param what
	 * @param replacement
	 * @return
	 */
	@Override
	public String myReplaceAll(final String source, final String what, final String replacement) {
		String newReplacement = replacement.replaceAll("\\$", "\\\\\\$");
		return source.replaceAll("(?m)" + what, newReplacement);
	}

	@Override
	public void setJSParam(final String pstrKey, final String pstrValue) {
	}

	@Override
	public void setJSParam(final String pstrKey, final StringBuffer pstrValue) {
	}

	@Override
	public void setJSJobUtilites(final JSJobUtilities pobjJSJobUtilities) {
	}

	@Override
	public String getCurrentNodeName() {
		return "";
	}

	@Override
	public void setStateText(final String pstrStateText) {
		// TODO Auto-generated method stub

	}
}
