package sos.net.ssh;
import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Date;
import java.util.HashMap;

import org.apache.log4j.Logger;

import com.sos.JSHelper.Annotations.JSOptionClass;
import com.sos.JSHelper.Exceptions.JSExceptionMandatoryOptionMissing;
import com.sos.JSHelper.Exceptions.JobSchedulerException;
import com.sos.JSHelper.Listener.JSListener;
import com.sos.JSHelper.Options.SOSOptionElement;
import com.sos.VirtualFileSystem.CredentialStore.KeePass.pl.sind.keepass.kdb.KeePassDataBase;
import com.sos.VirtualFileSystem.CredentialStore.KeePass.pl.sind.keepass.kdb.KeePassDataBaseManager;
import com.sos.VirtualFileSystem.CredentialStore.KeePass.pl.sind.keepass.kdb.v1.Entry;
import com.sos.VirtualFileSystem.CredentialStore.KeePass.pl.sind.keepass.kdb.v1.KeePassDataBaseV1;
import com.sos.VirtualFileSystem.CredentialStore.exceptions.CredentialStoreEntryExpired;
import com.sos.VirtualFileSystem.CredentialStore.exceptions.CredentialStoreKeyNotFound;
import com.sos.VirtualFileSystem.Options.keepass4j.ISOSCredentialStoreOptionsBridge;
import com.sos.VirtualFileSystem.Options.keepass4j.SOSCredentialStoreImpl;
import com.sos.VirtualFileSystem.Options.keepass4j.SOSCredentialStoreOptions;
import com.sos.i18n.annotation.I18NResourceBundle;

/**
* \class SOSSSHJobOptions
*
* \brief SOSSSHJobOptions -
*
* \details
*
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* @version $Id$16.05.2010
* \see reference
*
* Created on 16.05.2010 20:52:28
 */
/**
 * @author KB
 *
 */
@I18NResourceBundle(baseName = "com_sos_net_messages", defaultLocale = "en")
public class SOSSSHJobOptions extends SOSSSHJobOptionsSuperClass  {
	
	private static final long	serialVersionUID	= 2072083231341151442L;
	
	private final String		conClassName			= this.getClass().getSimpleName();
	@SuppressWarnings("unused")
	private static final String	conSVNVersion			= "$Id$";
	private static final Logger		logger					= Logger.getLogger(SOSSSHJobOptions.class);


	public SOSSSHJobOptions() {
		init();
	}

	private void init () {
		objParentClass = this.getClass();		
	}
	/**
	 * \brief SOSSSHJobOptions
	 *
	 * \details
	 *
	 * @param pobjListener
	 */
	@Deprecated
	public SOSSSHJobOptions(final JSListener pobjListener) {
		super(pobjListener);
		init();
	}

	/**
	 * \brief SOSSSHJobOptions
	 *
	 * \details
	 *
	 * @param JSSettings
	 * @throws Exception
	 */
	public SOSSSHJobOptions(final HashMap<String, String> JSSettings) throws Exception {
		super(JSSettings);
		init();
		setChildClasses(JSSettings, "");
	}

	public void setChildClasses(final HashMap<String, String> pobjJSSettings, final String pstrPrefix) throws Exception {
		super.setChildClasses(pobjJSSettings, pstrPrefix);
	} // public SOSConnection2OptionsAlternate (HashMap JSSettings)

	
	/**
	 *
	 * \brief CheckMandatory
	 *
	 * \details
	 *
	 * \return
	 * @throws JSExceptionMandatoryOptionMissing, Exception
	 *
	 */
	@Override
	public void CheckMandatory() {
		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::CheckMandatory";
		command.command_delimiter.Value(command_delimiter.Value());
		super.CheckMandatory();
		if (auth_method.isPassword() || auth_method.isPublicKey()) {
			// ok
		}
		else {
			throw new JSExceptionMandatoryOptionMissing("ErrSSH010 invalid or no AuthenticationMethod specified");
		}
		if (auth_method.isPassword()) {
			if (password.IsEmpty()) {
				throw new JSExceptionMandatoryOptionMissing("ErrSSH020 AuthenticationMethod 'password' requires a Password, but no password was specified");
			}
		}
		if (auth_method.isPublicKey()) {
			if (auth_file.IsNotEmpty()) {
				auth_file.CheckMandatory(true);
			}
			else {
				throw new JSExceptionMandatoryOptionMissing("ErrSSH050 AuthenticationMethod 'publickey' requires a keyfile, but no keyfile was specified");
			}
		}
		/**
		if (command.IsEmpty() && command_script.IsEmpty() && command_script_file.IsEmpty()) {
			throw new JSExceptionMandatoryOptionMissing("ErrSSH060 no command, command_script or command_script_file has been specified");
		}
		*/
	} // private void CheckMandatory

	public boolean commandSpecified () {
		boolean flgR = true;
		flgR = command.isDirty() && command_script.isDirty() && command_script_file.isDirty();
		return flgR;
	}
	public boolean isScript() throws Exception {
		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::isScript";
		return !command_script.IsEmpty() || !command_script_file.IsEmpty();
	} // private boolean isScript
}
