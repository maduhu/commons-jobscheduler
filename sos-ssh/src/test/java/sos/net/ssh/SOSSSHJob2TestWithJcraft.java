package sos.net.ssh;
import static org.junit.Assert.assertEquals;

import java.util.HashMap;
import java.util.Set;

import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.junit.Ignore;
import org.junit.Test;

import sos.net.ssh.exceptions.SSHExecutionError;

import com.sos.JSHelper.Basics.JSJobUtilitiesClass;
import com.sos.JSHelper.Listener.JSListenerClass;
import com.sos.JSHelper.io.Files.JSTextFile;
import com.sos.i18n.annotation.I18NResourceBundle;

/**
* \class SOSSSHJob2Test
*
* \brief SOSSSHJob2Test -
*
* \details
*
* \section SOSSSHJob2Test.java_intro_sec Introduction
*
* \section SOSSSHJob2Test.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* @version $Id$17.05.2010
* \see reference
*
* Created on 17.05.2010 13:01:51
 */
@I18NResourceBundle(baseName = "com.sos.net.messages", defaultLocale = "en")
// oh 07.05.14 test haengt? [SP] testSimulateShellParam haengt, testExecuteWithCCAndDelimiter schlägt fehl
public class SOSSSHJob2TestWithJcraft extends JSJobUtilitiesClass<SOSSSHJobOptions> {
	@SuppressWarnings({ "hiding" })
	private static final Logger	logger			= Logger.getLogger(SOSSSHJob2TestWithJcraft.class);

	private SOSSSHJob2 objSSH = null;
	private SOSSSHJobOptions objOptions = null;
	
	public SOSSSHJob2TestWithJcraft() {
		super(new SOSSSHJobOptions());
	}

	private void initializeClazz () {
		objSSH = new SOSSSHJob2();
		objOptions = objSSH.Options();
		objSSH.setJSJobUtilites(this);
		JSListenerClass.bolLogDebugInformation = true;
		JSListenerClass.intMaxDebugLevel = 9;
		BasicConfigurator.configure();
		logger.setLevel(Level.DEBUG);
	}

  @Test
  public void testExecute() throws Exception {
    initializeClazz();
    String strArgs[] = new String[] { "-command", "ls", "-auth_method", "password", "-host", "homer.sos", "-auth_file=test", "-user=test",
        "-password", "12345" };
    objOptions.CommandLineArgs(strArgs);
    objSSH.Execute();
    assertEquals("auth_file", objOptions.auth_file.Value(), "test");
    assertEquals("user", objOptions.user.Value(), "test");
    objSSH.Clear();
  }

  @Test(expected=SSHExecutionError.class)
  public void testExecuteWithErrors() throws Exception {
    initializeClazz();
    String strArgs[] = new String[] { "-command", "ls unknownPath", "-auth_method", "password", "-host", "homer.sos", "-auth_file=test", "-user=test",
        "-password", "12345" };
    objOptions.CommandLineArgs(strArgs);
    objSSH.Execute();
    assertEquals("auth_file", objOptions.auth_file.Value(), "test");
    assertEquals("user", objOptions.user.Value(), "test");
    objSSH.Clear();
  }

}
