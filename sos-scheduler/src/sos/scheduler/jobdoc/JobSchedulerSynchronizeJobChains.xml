<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="scheduler_job_documentation_v1.1.xsl"?>
<description
	xmlns="http://www.sos-berlin.com/schema/scheduler_job_documentation_v1.1"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:xhtml="http://www.w3.org/1999/xhtml"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.sos-berlin.com/schema/scheduler_job_documentation_v1.1 http://www.sos-berlin.com/schema/scheduler_job_documentation_v1.1.xsd"
>

  <job name  = "JobSchedulerSynchronizeJobChains"
       title = "Synchronize Job Chains"
       order = "yes"
	   category="Scheduling, JobChains" since="1.3.?"
       tasks = "1">
    <script language   = "java"
            java_class = "com.sos.jitl.sync.JobSchedulerSynchronizeJobChainsJSAdapterClass"
            resource   = "1">
    </script>
  </job>

  <releases>
    <release id="1.0" created="2009-09-12" modified="2009-09-12">
      <title>Version 1.0</title>
      <author name="Andreas Püschel" email="andreas.pueschel@sos-berlin.com"/>
      <note language="de"><div xmlns="http://www.w3.org/1999/xhtml"><p>Initiale Auslieferung</p></div></note>
      <note language="en"><div xmlns="http://www.w3.org/1999/xhtml"><p>Initial release</p></div></note>
    </release>
  </releases>

  <resources>
        <xi:include             href="./jars/sos.scheduler.jar.xml" parse="xml" />
        <xi:include             href="./jars/sos.spooler.jar.xml" parse="xml" />
        <xi:include             href="./jars/sos.util.jar.xml" parse="xml" />
        <xi:include             href="./jars/sos.xml.jar.xml" parse="xml" >
            <xi:fallback/>
        </xi:include>
  </resources>

  <configuration>
    <params id="job_parameter">
      <param name="job_chain_state_required_orders" default_value="1" required="false" display="(jobChainName),(state)_required_orders">
        <note language="de">
				          <title>No of required orders for chain and state</title>
          <div xmlns="http://www.w3.org/1999/xhtml"><p>
            Der Parameter benennt für einen State  (Step bzw. Schritt) einer Job-Kette die Anzahl eingereihter Aufträge, die verlangt wird,
            um die Bedingungen einer Synchronisierung zu erfüllen. Ohne Angabe des Parameters wird genau ein Auftrag erwartet.
            </p><p>
            Werden zum Beispiel drei Aufträge erwartet, dann wird nach Vorliegen von drei Aufträgen der Syncronisatoinspunkt geöffnet.
            </p><p>
            Der Name des Parameters setzt sich aus dem Namen der jeweiligen Job-Kette, einem <em>","</em>, dem Namen des Job-Ketten-knotens und dem Suffix <em>_required_orders</em> zusammen.
          </p>
          <p>Die Angabe eine States ist nur dann nötig, wenn mehr als ein Sync Knoten in einer Jobkette vorhanden ist und für die Knoten eine unterschiedliche Anzahl von Aufträgen vorliegen müssen. Siehe (jobChainName),required_orders</p>
          
          </div>
        </note>
        <note language="en">
						          <title>No of required orders for chain/state</title>

          <div xmlns="http://www.w3.org/1999/xhtml"><p>
            This parameter specifies the number of orders that have to be present at a certain state in a job chain
            so that the main or root order can proceed along the job chain. The default value is one.
            </p><p>
            If, for example, three orders are specified at a "splitter" node then three orders from that node in the chain have to be present
            at the syncronisation node for the syncronisation node to be set to "open". 
            </p><p>
            The name of this parameter is generated from the name of the job chain, a <em>","</em>, the
            name of the state and the suffix <em>"_required_orders"</em>.
          </p>
          <p>The state parameter only has to be specified if there are more than one sync nodes in the job chain and 
          a different number of orders is required for each sync node. See (jobChainName);required_orders</p>
          
          </div>
        </note>
      </param>
      <param name="job_chain_required_orders" default_value="1" required="false" DataType="SOSOptionInteger" display="(jobChainName)_required_orders">
        <note language="de">
				          <title>No of required orders for job chain</title>
          <div xmlns="http://www.w3.org/1999/xhtml"><p>
            Der Parameter benennt für eine Job-Kette die Anzahl eingereihter Aufträge, die verlangt wird,
            um die Bedingungen einer Synchronisierung zu erfüllen. Ohne Angabe des Parameters wird genau ein Auftrag erwartet.
            </p><p>
            Werden zum Beispiel drei Aufträge erwartet, dann wird nach Vorliegen von drei Aufträgen der Syncronisatoinspunkt geöffnet.

            </p><p>
            Der Name des Parameters setzt sich aus dem Namen der jeweiligen Job-Kette und dem Suffix <em>_required_orders</em> zusammen.
          </p>
          <p>Die Angabe einer Jobkette ist nur dann nötig, wenn ein Sync Knoten in mehreren Jobketten vorhanden ist und für die Knoten eine unterschiedliche Anzahl von Aufträgen vorliegen müssen. Siehe required_orders</p>
          
          </div>
        </note>
        <note language="en">
				          <title>No of required orders for a chain</title>
          <div xmlns="http://www.w3.org/1999/xhtml"><p>
            This parameter specifies the number of orders that have to be present in a job chain
            so that the main or root order can proceed along the job chain. The default value is one.
            </p><p>
            For example, if three orders are specified then three orders from the chain have to be present
            at the syncronisation node before  the syncronisation node is set to "open".
            </p><p>
            The name of this parameter is created from the name of the respective job chain and
            the suffix <em>_required_orders</em>.
          </p>
          <p>The job chain specific parameter is only neccessary if there are sync nodes in more than one job chain and 
          a different number of orders required for each job chain. See required_orders</p>
          </div>
        </note>
      </param>
      <param name="required_orders" default_value="1" required="false">
        <note language="de">
				          <title>No of required orders</title>
          <div xmlns="http://www.w3.org/1999/xhtml"><p>
            Der Parameter benennt für alle Job-Ketten die Anzahl eingereihter Aufträge pro Job-Kette, die verlangt wird,
            um die Bedingungen einer Synchronisierung zu erfüllen. Ohne Angabe des Parameters wird genau ein Auftrag erwartet.
            </p><p>
                       Werden zum Beispiel drei Aufträge erwartet, dann wird nach Vorliegen von drei Aufträgen der Syncronisatoinspunkt geöffnet.
            </p><p>
            Der Parameter wird nur ausgewertet, falls kein Parameter <code>[job_chain]_required_orders</code> für die aktuelle Job-Kette benannt wurde.
          </p></div>
        </note>
        <note language="en">
				          <title>No of required orders</title>
          <div xmlns="http://www.w3.org/1999/xhtml"><p>
            This parameter specifies the number of orders that are required to be present for each job chain
            to make orders proceed. The default value is one.
            </p><p>
             If, for example, three orders are specified then three orders from the chain have to be present.
            </p><p>
            This parameter is only required if the <code>[job_chain]_required_orders</code> parameter 
            has not been specified for the current job chain.
          </p></div>
        </note>
      </param> 
     
       <param name="setback_type" default_value="suspend" required="false" DataType="SOSOptionSetBack">
        <note language="de">
		          <title>SetBack Typ</title>
          <div xmlns="http://www.w3.org/1999/xhtml"><p>
            Dieser Parameter kann verwendet werden, um zwischen <em>suspend</em> und <em>setback</em>
            für die Behandlung wartender Aufträge auszuwählen:
            </p>
            <ul>
              <li><p>suspend
              </p><p>
                Aufträge werden ausgesetzt, d.h. falls die Synchronisierungsbedingungen nicht erfüllt sind,
                verbleiben die Aufträge für unbestimmte Dauer in diesem Zustand
                bis sie durch den Synchronisierungs-Job fortgesetzt werden.
                </p><p>
                Alternativ können solche Aufträge manuell in der Web-Oberfläche fortgesetzt werden.
                </p>
              </li>
              <li><p>setback</p><p>
                Aufträge werden für das mit den Parametern <code>setback_interval</code> und <code>setback_count</code>
                bestimmte Intervall und dessen maximale Häufigkeit wiederholt und gehen nach dem Überschreiten
                des Maximums in einen Fehlerzustand über.
                </p><p>
                Alternativ können solche Aufträge manuell in der Web-Oberfläche fortgesetzt werden.
								</p>
              </li>
            </ul>
          </div>
        </note>
        <note language="en">
		          <title>SetBack Typ</title>
          <div xmlns="http://www.w3.org/1999/xhtml"><p>
            This parameter can be used in order to choose between <em>suspend</em> and <em>setback</em>
            for the handling of waiting orders:
            </p>
            <ul>
              <li><p>suspend</p><p>
                Orders are suspended if the synchronization criteria were not matched. Such orders remain
                in this state for an arbitrary duration provided that they were not continued by the
                synchronization job.
                </p><p>
                Alternatively such orders can be continued manually in the Web GUI.
                </p>
              </li>
              <li><p>setback</p><p>
                Orders are repeatedly executed as specified by the parameters <code>setback_interval</code> and <code>setback_count</code>.
                Should the specified interval and frequency be exceeded then the order enters an error state and
                might leave the job chain.
                </p><p>
                Alternatively such orders can be continued manually in the Web GUI.
              </p> </li>
            </ul>
          </div>
        </note>
      </param>
      <param name="setback_interval" default_value="600" required="false" DataType="SOSOptionInteger">
        <note language="de">
		          <title>SetBack Intervall</title>
          <div xmlns="http://www.w3.org/1999/xhtml"><p>
            Dieser Parameter kann in Verbindung mit dem Parameter <code>setback_type</code> und dessen Wert <em>setback</em>
            verwendet werden, um das Intervall in Sekunden zu bestimmen,
            für das Aufträge zurückgestellt werden, für die die Synchronisierungsbedingungen nicht erfüllt sind.
            </p><p>
            Per Voreinstellung wird der <code>setback_type</code> <em>suspend</em> verwendet, der Aufträge aussetzt
            und daher kein Wiederholungsintervall benötigt.
            </p><p>
            Aus Gründen der Sichtbarkeit wird empfohlen diesen Wert anhand der Job-Konfiguration
            mit dem Element &lt;delay _order_after_setback&gt; zu bestimmen.
          </p></div>
        </note>
        <note language="en">
		          <title>SetBack Intervall</title>
          <div xmlns="http://www.w3.org/1999/xhtml"><p>
            This parameter can be used with the parameter <code>setback_type</code> and its value <em>setback</em>
            to specify the interval in seconds, for which orders are being set back
            that do not match the synchronization criteria.
            </p><p>
            By default the <code>setback_type</code> <em>suspend</em> will be used that suspends orders and therefore
            would not require an interval.
            </p><p>
            For better visibility it is recommended to set this value using the element
            &lt;delay _order_after_setback&gt; instead.
          </p></div>
        </note>
      </param>
      <param name="setback_count" default_value="unbounded" required="false" DataType="SOSOptionInteger">
        <note language="de">
          <div xmlns="http://www.w3.org/1999/xhtml"><p>
            Der Parameter kann in Verbindung mit dem Parameter <code>setback_type</code> und dessen Wert <em>setback</em>
            verwendet werden, um die max. Anzahl wiederholter Ausführungen
            von Aufträgen zu bestimmen, für die die Synchronisierungsbedingungen nicht erfüllt sind.
            </p><p>
            Per Voreinstellung wird der <code>setback_type</code> <em>suspend</em> verwendet, der Aufträge aussetzt
            und daher kein Wiederholungsintervall benötigt.
            </p><p>
            Aus Gründen der Sichtbarkeit wird empfohlen diesen Wert anhand der Job-Konfiguration
            mit dem Element &lt;delay _order_after_setback&gt; zu bestimmen.
          </p></div>
         </note>
        <note language="en">
          <div xmlns="http://www.w3.org/1999/xhtml"><p>
            This parameter can be used with the parameter <code>setback_type</code> and its value <em>setback</em>
            to specify the maximum number of trials to set back orders
            that do not match the synchronization criteria.
            </p><p>
            By default the <code>setback_type</code> <em>suspend</em> will be used that suspends orders and therefore
            would not require an interval.
            </p><p>
            For better visibility it is recommended to set this value using the element
            &lt;delay _order_after_setback&gt; instead.
          </p></div>
        </note>
      </param>
       
      <param name="sync_session_id" required="false" DataType="SOSOptionString">
        <note language="de">
          <div xmlns="http://www.w3.org/1999/xhtml">
          <title>Synchronisations-Identifikation</title><p>
            Hat ein Auftrag den Parameter <code>sync_session_id</code>, so wird dieser Auftrag
            nur mit Aufträgen synchronisiert, deren Parameter <code>sync_session_id</code> denselben Wert hat.
            Dies wird benötigt, wenn mehrere Gruppen von parallelen Aufträgen durch parallele Jobketten laufen
            und am Ende jeweils die Aufträge einer Gruppe (die z.B. aus einem Split entstanden ist) wieder
            synchronisiert werden sollen.
          </p></div>
         </note>
        <note language="en">
          <div xmlns="http://www.w3.org/1999/xhtml">
          <title>Syncronisation Identification</title>
          <p>
            If the <code>sync_session_id</code> parameter is set for an order, then this order will only
            be synchronized with orders which have the same value for the <code>sync_session_id</code> parameter.
            This is required if multiple groups of parallel orders are to run through parallel job chains.
            In the end, the orders will be synchronized for each group (which may have been created by a split).

          </p></div>
        </note>
      </param>
	        
	 <param name="job_chain_name2synchronize" required="false" DataType="SOSOptionString">
        <note language="de">
          <div xmlns="http://www.w3.org/1999/xhtml">
          <title>Synchronisations Kontext</title><p>
            Mit dem Parameter <code>job_chain_name2synchronize</code> kann ein Kontext angegeben werden, in dem nach Sync-Jobs gleichen Namens gesucht wird. 
			Der Auftrag wird mit allen innerhalb des Kontexts gefundenen Knoten synchronisiert. Damit kann ein Sync-Job mehrfach unabhängig voneinander
			verwendet werden. 
			
			Falls in einer Jobkette mehrere Syncknoten vorhanden sind und diese in verschiedenen Kontexten betrachtet werden sollen, kann zusätzlich der Parameter 
			<code>job_chain_state2synchronize</code> angegeben werden.
          </p></div>
         </note>
        <note language="en">
          <div xmlns="http://www.w3.org/1999/xhtml">
          <title>Syncronisation Context</title>
          <p>
            With the parameter <code>job_chain_name2synchronize</code> it is possible to define a context for the sync job. The parameter specifies the path of a job chain
            where all sync jobs with the same name will be handled. With the Parameter it is possible to use one sync job in several job chain independently.
            
            If there are more than one sync nodes in one job chain and these sync node should be handled independently it is possible to specify the parameter 
            <code>job_chain_state2synchronize</code> additionally. 
          </p></div>
        </note>
      </param>
      
      <param name="job_chain_state2synchronize" required="false" DataType="SOSOptionString">
        <note language="de">
          <div xmlns="http://www.w3.org/1999/xhtml">
          <title>Synchronisations Kontext State</title><p>
            Mit dem Parameter <code>job_chain_state2synchronize</code> kann ein Kontext so angegeben werden, dass nur ein Sync Node in einer Job betrachtet wird.
            Damit kann ein Sync-Job mehrfach unabhängig voneinander verwendet werden. Der Knoten wird nicht mehr mit anderen Knoten syncronisiert, sondern es wird 
            gewartet, bis die erforderliche Anzahl an Aufträgen vorliegt.
          </p></div>
         </note>
        <note language="en">
          <div xmlns="http://www.w3.org/1999/xhtml">
          <title>Syncronisation Context State</title>
          <p>
            With the parameter <code>job_chain_state2synchronize</code> a context can be specified so that only one node in a job chain will be considered.
            With this it is possible to use a sync-job simultanously in an independent way. The node will not be syncronized with other nodes. Orders are waiting 
            until the required number of orders have reached the node.
            
          </p></div>
        </note>
      </param>      
      
      
    </params>

  </configuration>

  <documentation language="de">
    <div xmlns="http://www.w3.org/1999/xhtml">
      <b>Funktionalität</b>
      <br/>
      <p>Der Job wird in Jobketten verwendet. Er sammelt Aufträge und lässt diese warten. Sobald an allen Jobkettenknoten,
an denen der Job verwendet wird (mit einem einheitlichen Jobnamen) die notwendige Anzahl an Aufträgen wartet (Standard=1), laufen alle wartenden Aufträge weiter. 
Die Anzahl der Aufträge, auf die gewartet wird, wird in Parametern des Jobs festgelegt. Ohne Angaben wird genau auf einen Auftrag gewartet. 
Die Anzahl kann für eine Jobkette oder für einen Knoten in 
einer Jobkette unterschiedlich definiert werden. </p>
<ul>
<li>required_orders: Setzt den Wert für alle Jobketten</li>
<li>jobchain_required_orders: Setzt den Wert für die Jobkette <i>jobchain</i></li>
<li>jobchain,state_required_orders: Setzt den Wert für den Knoten <i>state</i> in der Jobkette <i>jobchain</i>. Das ist nur dann sinnvoll, wenn der Job in mehr als einem
Knoten in der Jobkette verwendet wird.</li>
</ul>

<b>Anwendungsbeispiele</b>
      <ul>
        <li><p>Synchronisierung</p><p>
          Der Job synchronisiert Aufträge mehrerer Job-Ketten, die unterschiedlich lange Verarbeitungszeiten erfordern
          und an bestimmten Job-Knoten aufeinander warten sollen. Beispiel:
          </p><p>
          <pre>
          Job-Kette   A     B     C
          ---------------------------
          Job-Knoten  A1    B1   sync
          Job-Knoten  sync  B2     C2
          Job-Knoten  A2    sync   C3
          </pre>
          </p>
          <p>In diesem Beispiel warten die Aufträge in Jobkette A im zweiten Knoten, in Jobkette B im dritten Knoten und in Jobkette C im ersten Knoten. 
          Wenn an allen sync-Knoten ein Auftrag wartet, laufen alle Aufträge weiter.</p>
        </li>
<li><p>Split &amp; Merge</p><p>
Parallele Ausführung eines Knoten mit anschließendem Warten, bis alle Aufträge abgearbeitet sind.</p>
<p>
Einer Synchronisierung wird eine Split Operation vorangestellt. Dazu wird der Job com.sos.jitl.splitter.JobChainSplitterJSAdapterClass verwendet. 
          </p><p>
          <pre>
          Auftrag     a    
          Job            Split
          ------------------------
          Auftrag     a    b    c
          ------------------------
          Job-Knoten  A1 
          Job-Knoten  A2 
          Job-Knoten  A3 
          Job-Knoten     sync
          Auftrag     a    
          Job-Knoten  A4
          </pre>
          </p>
          
          <p>
          Der Auftrag a wird im Schritt <i>Split</i> geklont. D.h. es werden weitere identische Exemplare b und c des Auftrages erzeugt. Dies laufen nach dem Split Knoten
          parallel weiter und werden im Knoten <i>sync</i> gesammelt. Wenn alle Aufträge im Knoten <i>sync</i> angekommen sind, läuft der Auftrag a mit dem Nachfolgeknoten von <i>sync</i>
          weiter.
          
          Die anderen Aufträgen enden beim <i>sync</i> Knoten, da der Splitter Job sie so erzeugt hat, dass deren Ende Status der <i>sync</i> Knoten ist. 
          
</p></li>
       
        
      </ul>
      
      <br/>
      <b>Konfiguration</b>
      <ul>
        <li>
          Erstellen Sie z.B. einen Job <em>JobSynchronize</em> aus der o.g. Implementierung mit diesem Inhalt:
          <pre>
&lt;job order="yes"
     stop_on_error="no"&gt;
    &lt;script java_class="com.sos.jitl.sync.JobSchedulerSynchronizeJobChainsJSAdapterClass"
            language="java"/&gt;
    &lt;run_time/&gt;
&lt;/job&gt;
          </pre>
        </li>
        <li>
          Fügen Sie jeder Job-Kette, für die Sie Aufträge synchronisieren möchten,
          einen Job-Knoten mit dem Synchronisierungs-Job hinzu:
          <pre>
&lt;job_chain orders_recoverable="yes" visible="yes"&gt;
    &lt;job_chain_node state="A1"
                    job="Job1"
                    next_state="synchronize"
                    error_state="error"/&gt;
    &lt;job_chain_node state="synchronize"
                    job="JobSynchronize"
                    next_state="A2"
                    error_state="error"/&gt;
    &lt;job_chain_node state="A2"
                    job="Job2"
                    next_state="success"
                    error_state="error"/&gt;
    &lt;job_chain_node state="success"/&gt;
    &lt;job_chain_node state="error"/&gt;
&lt;/job_chain&gt;
          </pre>
          <p>
          Sie können den Synchronisierungs-Job in einen beliebigen Job-Knoten der
          jeweiligen Job-Kette platzieren.
          Sie müssen dazu denselben Job-Namen für den Synchronisierungs-Job verwenden,
          allerdings können sie den Job-Knoten an beliebigen Knoten der jeweiligen Job-Ketten
          einsetzen und mit beliebigen Status versehen.
        </p></li>
        <li>
          Der Synchronisierungs-Job darf nur in einem Prozess ausgeführt werden:
          <pre>
&lt;job order="yes"
     tasks="1"
     stop_on_error="no"&gt;
     ...
&lt;/job&gt;
          </pre>
        </li>
        <li>
          Falls Sie erzwingen möchten, dass mehr als ein Auftrag aus einer Job-Kette vorhanden sein muss,
          um die Synchronisierungsbedingungen zu erfüllen, dann können Sie die Anzahl der erwarteten
          Aufträge pro Job-Kette angeben. Verwenden Sie hierzu für den Synchronisierungs-Job den Parameter <em>[job_chain]_required_orders</em>,
          z.B. <em>A_required_orders</em> wenn der Name der Job-Kette <em>A</em> lautet.
        </li>
        <li>
        <p>
          Falls Sie mehrere Gruppen von Job-Ketten jeweils unabhängig voneinander synchronisieren möchten,
          dann verwenden Sie unterschiedliche Namen für den Synchronisierungs-Job pro Gruppe.
        </p>
        </li>
        <li><p>
          Konfiguration eines Split Jobs
          <p>
          Dieser Job steht am Beginn eines <em>split &amp; merge</em> Szenarios und erzeugt mehrere Aufträge
          zur parallelen Ausführung in Job-Ketten:
          <pre>
&lt;job  title="Start a parallel processing in a jobchain" order="yes" stop_on_error="no" name="JobChainSplitter"&gt;
    &lt;params /&gt;
    &lt;script  language="java" java_class="com.sos.jitl.splitter.JobChainSplitterJSAdapterClass"/&gt;
    &lt;monitor  name="configuration_monitor" ordering="0"&gt;
        &lt;script  java_class="sos.scheduler.managed.configuration.ConfigurationOrderMonitor" language="java"/&gt;
    &lt;/monitor&gt;
    &lt;run_time /&gt;
&lt;/job&gt;

          </pre>
          </p>
          <p>siehe <a href="http://www.sos-berlin.com/mediawiki/index.php/Splitter-Job_erstellen">www.sos-berlin.com/mediawiki/index.php/Splitter-Job_erstellen</a>
          </p>
          </p>
        </li>
      </ul>
      <br/>
      
    </div>
  </documentation>

  <documentation language="en">
    <div xmlns="http://www.w3.org/1999/xhtml">
      <b>Functionality</b>
      <br/>
  <p>
This job is used in job chains and can be seen as 'collecting' orders as they reach the job and letting them wait. 
As soon as the required number of orders waiting (default=1) at the relevant sync points 
(i.e. the job chain nodes with this job) has been reached, 
all these sync points will be released and the orders can continue running. 
The value for the required orders is set in the job paramaters. <br/>
It is possible to set this value for a specific job chain or for a specific node in a job chain:
<ul>
<li>required_orders: sets the number of orders required at sync points in all job chains.</li>
<li>jobchain_required_orders: sets the number of orders required at (a) sync point(s) in a specific job chain.</li>
<li>jobchainb,state_required_orders: sets the number of orders required at a specific node in a job chain.</li>
</ul>
</p>
 
<b>Use cases</b>
      <ul>
        <li><p>Synchronization</p><p>
          The job syncronizes orders in different job chains
          where each job chain takes a different ammount of time to run and 
          the job chains should wait on each other at certain nodes. 
          For example. 
          </p><p>
          <pre>
          Job-Chain   A     B     C
          ---------------------------
          Job-Node  A1    B1   sync
          Job-Node  sync  B2     C2
          Job-Node  A2    sync   C3
          </pre>
          </p>
          <p>In this example, the orders in job chain A wait at the second node, 
          in job chain B they wait at the third node and 
          in job chain C at the first node. 
          Once the orders for all three job chains are waiting at their respective sync nodes, 
          all orders will be continued.
          </p>
        </li>
<li><p>Split &amp; Merge</p><p>
Parallel execution starting from a common node with waiting for the orders running in parallel.</p>
<p>
A <em>split</em> operation is used to clone an order. 
This is done using the <code>com.sos.jitl.splitter.JobChainSplitterJSAdapterClass</code> job.
          </p><p>
          <pre>
          Order       a    
          Job            Split
          ------------------------
          Order       a    b    c
          ------------------------
          Job node    A1 
          Job node    A2 
          Job node    A3 
          Job node        sync
          Order       a    
          Job node    A4
          </pre>
          </p>
          
          <p>
          The order will be cloned at the <i>Split</i> node. 
          That means, the splitter creates identical copies of the order, b and c.
          All three orders will be executed in parallel and with each order first of all waiting at the <i>sync</i> node. 
          Once all three orders have reached the <i>sync</i> node
          then the main order will continue and the cloned orders will end, 
          as they have been created by the splitter with end_state=sync.
          </p></li>
       
        
      </ul>
      
      <br/>
      <b>Configuration</b>
      <ul>
        <li>
          Create a <em>JobSynchronize</em> job with the implementation:
          <pre>
&lt;job order="yes"
     stop_on_error="no"&gt;
    &lt;script java_class="com.sos.jitl.sync.JobSchedulerSynchronizeJobChainsJSAdapterClass"
            language="java"/&gt;
    &lt;run_time/&gt;
&lt;/job&gt;
          </pre>
        </li>
        <li>
         Add a sync node in each job chain you want to syncronize.
          <pre>
&lt;job_chain orders_recoverable="yes" visible="yes"&gt;
    &lt;job_chain_node state="A1"
                    job="Job1"
                    next_state="synchronize"
                    error_state="error"/&gt;
    &lt;job_chain_node state="synchronize"
                    job="JobSynchronize"
                    next_state="A2"
                    error_state="error"/&gt;
    &lt;job_chain_node state="A2"
                    job="Job2"
                    next_state="success"
                    error_state="error"/&gt;
    &lt;job_chain_node state="success"/&gt;
    &lt;job_chain_node state="error"/&gt;
&lt;/job_chain&gt;
          </pre>
          <p>
          The sync node can be placed at any position in a job chain. 
          The job name is used to identify related sync nodes.
          Where more than one set of sync nodes is to be defined, for example, 
          where parallel running job chains are to be synchronised at both mid and end points
          then each set of sync nodes must use a different name.
        </p></li>
        <li>
Sync jobs must have task=1 - i.e they may only run in a single process.
          <pre>
&lt;job order="yes"
     tasks="1"
     stop_on_error="no"&gt;
     ...
&lt;/job&gt;
          </pre>
        </li>
         
        <li>
        <p>
          You have to create different sync jobs if 
          you want to syncronize different groups of job chains independently of each other.
        </p>
        </li>
        <li><p>
          Split Job Configuration
          <p>
         The split job marks the start of a <em>split &amp; merge</em> szenario and 
         generates a new order for job chain thread to be executed in parallel.
          <pre>
&lt;job  title="Start a parallel processing in a jobchain" order="yes" stop_on_error="no" name="JobChainSplitter"&gt;
    &lt;params /&gt;
    &lt;script  language="java" java_class="com.sos.jitl.splitter.JobChainSplitterJSAdapterClass"/&gt;
    &lt;monitor  name="configuration_monitor" ordering="0"&gt;
        &lt;script  java_class="sos.scheduler.managed.configuration.ConfigurationOrderMonitor" language="java"/&gt;
    &lt;/monitor&gt;
    &lt;run_time /&gt;
&lt;/job&gt;

          </pre>
          </p>
          <p>see <a href="http://www.sos-berlin.com/mediawiki/index.php/Splitter-Job_erstellen">www.sos-berlin.com/mediawiki/index.php/Splitter-Job_erstellen</a>
          </p>
          </p>
        </li>
        </ul>
      <br/>

 

    </div>
  </documentation>
</description>