<?xml version="1.0" encoding="iso-8859-1"?>
<param xmlns="http://www.sos-berlin.com/schema/scheduler_job_documentation_v1.1"
       xmlns:xhtml="http://www.w3.org/1999/xhtml"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:xi="http://www.w3.org/2001/XInclude"
       xsi:schemaLocation="http://www.sos-berlin.com/schema/scheduler_job_documentation_v1.1
http://www.sos-berlin.com/schema/scheduler_job_documentation_v1.1.xsd"
       name="variable_parser_reg_expr"
       default_value="^SET\s+([^\s]+)\s*IS\s+(.*)$"
       required="false"
       DataType="SOSOptionRegExp"
       Alias="VariableParserRegExpr">

<note language="de">
		    <title>Regulärer Ausdruck für Parameter Parser</title>
          <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml">
          <p>Die Ausgabe des Skripts, normalerweise STDOUT, wird mit dem hier angegebenen Ausdruck parsiert und die Treffer als Auftrags-Parameter zu Verfügung gestellt.
          </p>
          <ul>
            <li>Der reguläre Ausdruck muss zwei Gruppen enthalten.</li>
            <li>Die erste Gruppe steht für den Parameternamen und die zweite für den Parameterwert.</li>
          </ul>
          <p>
          Der 'prompt'-Befehl im SQL*Plus Code liefert die Ausgabe. Hier ein Beispiel:
          </p>
               <pre>
            WHENEVER SQLERROR EXIT SQL.SQLCODE
            WHENEVER OSERROR EXIT FAILURE
            prompt ready;
            prompt foo = bar;
            prompt SET hello IS world;
            exit;
               </pre>
          <p>
          Die 'dbms_output.put_line()'-Funktion im PL/SQL liefert die Ausgabe. Hier ein Beispiel:
          </p>
               <pre>
            begin
                dbms_output.put_line('ready');
                dbms_output.put_line('Set hello IS world');
                dbms_output.put_line('foo = bar');
            end;
               </pre>
             <ul>
               <li>variable_parser_reg_expr="^SET\s+([^\s]+)\s*IS\s+(.*)$" liefert den Auftrags-Parameter "hello=world"</li>
               <li>variable_parser_reg_expr="^([^=]+)\s*=\s+(.*)$" liefert den Auftrags-Parameter "foo=bar"</li>
             </ul>

          </xhtml:div>
        </note>
        <note language="en">
		    <title>Regular Expression for Parameter parsing</title>
          <div xmlns="http://www.w3.org/1999/xhtml">
          <p>The script output will parse with this regular expression. The hits are available as order parameters.
          </p>
          <ul>
            <li>The regular expression must have two groups.</li>
            <li>The first group for the parameter name and the second for the value.</li>
          </ul>
          <p>
          The 'prompt' in SQL*Plus writes the output. Example:
          </p>
               <pre>
            WHENEVER SQLERROR EXIT SQL.SQLCODE
            WHENEVER OSERROR EXIT FAILURE
            prompt ready;
            prompt foo = bar;
            prompt SET hello IS world;
            exit;
               </pre>
          <p>
          The 'dbms_output.put_line()' function in PL/SQL writes the output. Example:
          </p>
               <pre>
            begin
                dbms_output.put_line('ready');
                dbms_output.put_line('Set hello IS world');
                dbms_output.put_line('foo = bar');
            end;
               </pre>
             <ul>
               <li>variable_parser_reg_expr="^SET\s+([^\s]+)\s*IS\s+(.*)$" returns the order parameter "hello=world"</li>
               <li>variable_parser_reg_expr="^([^=]+)\s*=\s+(.*)$" returns the order parameter "foo=bar"</li>
             </ul>

          </div>
        </note>
        <xi:include href="../notes/RegExpRemarks.xml" parse="xml" xml:base="."/>
      </param>