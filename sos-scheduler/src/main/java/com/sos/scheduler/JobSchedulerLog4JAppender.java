package com.sos.scheduler;

import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.Layout;
import org.apache.log4j.Level;
import org.apache.log4j.spi.LoggingEvent;

import sos.util.SOSLogger;
import sos.util.SOSSchedulerLogger;

/**
* \class JobSchedulerLog4JAppender
*
* \brief JobSchedulerLog4JAppender - Redirect Log4J-Messages to SOSSchedulerLogger
*
* \details
* This Class acts as a redirection for all Log4J-Messages to the JobScheduler Logger.
*
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* @version $Id: JobSchedulerLog4JAppender.java 20890 2013-08-21 16:35:10Z kb $13.06.2010
* \see reference
*
* Created on 13.06.2010 12:08:56
 */

/**
 * @author KB
 *
 */
public class JobSchedulerLog4JAppender extends ConsoleAppender {

	private final String		conClassName	= "JobSchedulerLog4JAppender";

	private SOSSchedulerLogger	sosLogger		= null;

	public JobSchedulerLog4JAppender() {
		super();
	}

	public JobSchedulerLog4JAppender(final Layout pobjLayout) {
		super(pobjLayout);
	}

	public void setSchedulerLogger(final SOSSchedulerLogger pobjSchedulerLogger) {
		sosLogger = pobjSchedulerLogger;
	}

	/**
	 * @see org.apache.log4j.FileAppender#activateOptions() */
	@Override
	public void activateOptions() {
		super.activateOptions();
	}

	/**
	 * @see org.apache.log4j.WriterAppender#subAppend(LoggingEvent) */
	@Override
	protected void subAppend(final LoggingEvent event) {
		// Nicht 'super.subAppend(event)' aufrufen!
		String strMsg = getLayout().format(event);
		try {
			Level lL = event.getLevel();
			int intL = lL.toInt();
			int intSOSLevel = 0;
			switch (intL) {
				case Level.DEBUG_INT:
				case Level.TRACE_INT:
					intSOSLevel = SOSLogger.DEBUG;
//					sosLogger.debug(strMsg);
					break;

				case Level.WARN_INT:
					intSOSLevel = SOSLogger.WARN;
					break;
				case Level.INFO_INT:
					intSOSLevel = SOSLogger.INFO;
//					sosLogger.info(strMsg);
					break;

				case Level.ERROR_INT:
					intSOSLevel = SOSLogger.ERROR;
					break;

				case Level.FATAL_INT:
					intSOSLevel = SOSLogger.ERROR;
					break;

				default:
					intSOSLevel = SOSLogger.INFO;
					break;
			}
			// strMsg = strMsg.replaceAll("\\n", "");
			if (strMsg.trim().length() > 0) {
//				System.out.println("intSOSLevel = " + intSOSLevel);
				if (hasLogger()) {
					sosLogger.log(intSOSLevel, strMsg);
				}
				else {
					System.out.print(conClassName + " (system.out): " + strMsg);
				}
			}
		}
		catch (Exception ex) {
			System.out.print(conClassName + " (system.out): " + strMsg);
		}
	}

	public boolean hasLogger() {
		return sosLogger != null ? true : false;
	}
}
