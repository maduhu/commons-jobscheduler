package sos.scheduler.file;
import static com.sos.scheduler.messages.JSMessages.JSJ_F_0010;

import org.apache.log4j.Logger;

import com.sos.JSHelper.Exceptions.JobSchedulerException;
import com.sos.JSHelper.io.Files.JSFile;
import com.sos.i18n.annotation.I18NResourceBundle;
/**
* \class JobSchedulerCreateFiles
*
* \brief JobSchedulerCreateFiles -
*
* \details
*
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* \version $Id$
* \see reference
*
* Created on 27.07.2011 19:06:05
 */

@I18NResourceBundle(baseName = "com.sos.scheduler.messages", defaultLocale = "en")
public class JobSchedulerCreateFiles extends JobSchedulerFileOperationBase {
	private static final String	conParameterFILE_AGE	= "file_age";
	private static final String	conParameterFILE_SIZE	= "file_size";
	private static final String	conParameterCREATE_FILE	= "create_file";
	private final String		conClassName			= "JobSchedulerCreateFiles";
	private static final String	conSVNVersion			= "$Id$";
	private static final Logger	logger					= Logger.getLogger(JobSchedulerCreateFiles.class);

	@Override
	public boolean spooler_process() {
		int fileSize;
		long fileAge;
		try {
			initialize(conSVNVersion);
			String strCreateFile = getParamValue(conParameterCREATE_FILE);
			if (isNotEmpty(strCreateFile)) {
				fileSize = getParamInteger(conParameterFILE_SIZE, 10);
				fileAge = getFileAge(getParamValue(conParameterFILE_AGE));
				populateFile(new JSFile(strCreateFile), fileSize, fileAge);
			}
			for (int i = 0; i < 20; i++) {
				String strFileName2Create = getParamValue(conParameterCREATE_FILE + "_" + i);
				if (isNotEmpty(strFileName2Create)) {
					fileSize = getParamInteger(conParameterFILE_SIZE + "_" + i, 10);
					fileAge = getFileAge(getParamValue(conParameterFILE_AGE + "_" + i));
					populateFile(new JSFile(strFileName2Create), fileSize, fileAge);
				}
			}
			return signalSuccess();
		}
		catch (Exception e) {
			String strM = JSJ_F_0010.params( conClassName, e.getLocalizedMessage());
			logger.fatal(strM);
			throw new JobSchedulerException(strM);
		}
	}

	public long getFileAge(final String pstrFileAge) {
		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::getFileAge";
		long fileAge = System.currentTimeMillis();
		;
		if (isNotEmpty(pstrFileAge)) {
			fileAge = System.currentTimeMillis() - 1000 * Long.parseLong(spooler_task.order().params().var(conParameterFILE_AGE));
		}
		return fileAge;
	} // private long getFileAge

	public void populateFile(final JSFile file1, final int fileSize, final long lastModified) throws Exception {
		try {
			logger.info("populating file: " + file1.getName() + "   " + file1.getAbsolutePath());
			file1.Write(new StringBuffer(fileSize));
		}
		catch (Exception e) {
			throw new Exception("could not populate file [" + file1.getAbsolutePath() + "]: " + e.getMessage());
		}
		finally {
			try {
				file1.close();
				file1.setLastModified(lastModified);
			}
			catch (Exception x) {
			}
		}
	}
}
