<?xml version="1.0" encoding="UTF-8"?>
<!-- created at 20.06.2012 -->
<!-- $Id$ -->
<param xmlns="http://www.sos-berlin.com/schema/scheduler_job_documentation_v1.1" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    name="check_steady_state_of_files" required="false" default_value="false" DataType="SOSOptionBoolean"
    Category="FileTransfer, steadyState" OptionName="checkSteadyStateOfFiles"
    Alias="" usewith="check_steady_state_interval, steady_state_count">
    <note language="de">
        <title>Vollständigkeit einer Datei prüfen</title>
            <p>

            </p>
    </note>
    <note language="en">
        <title>Check the completeness of a file (steady state)</title>
            <p>
            In some file transfer scenarios has the receiver of a file no knowledge about the time when the
            sender creates the file.
            In case of a (very) large file it can be the situation that the receiver tries to read the file but
            the sender has not finished to write it.
            If the receiver get the file at the moment the sender is still writing, as a result he will get
            a corrupted, incomplete file.
            </p>
            <p>
            Setting this parameter to "true" the receiver will check the file for completeness before
            he starts the transfer.
            </p>
            <p>
            At the end, this is not a very secure approach, because the receiver is checking the date of last
            modification and the size of the file.
            If both not changing between a time intervall, which is defined by the parameters ...,
            the file is guessed to be complete.
            If the sender is terminated without writing the complete file, or the network is down, or the speed of
            processing the file is going slow, the receiver will get a  corrupted file.
            </p>
            <p>
            A better approach for avoiding corrupt files is to use the atomic method: writing a file and after completion
            of writing rename the file.
    <indexterm index="atomic_suffix, parameter" display="false"></indexterm>
    <indexterm index="parameter, atomic_suffix" display="false"></indexterm>
    <indexterm index="atomic_prefix, parameter" display="false"></indexterm>
    <indexterm index="parameter, atomic_prefix" display="false"></indexterm>

            For more details about this method see parameter <paramref>atomic_suffix</paramref> or <paramref>atomic_prefix</paramref>.
            </p>
            <p>
            If more than one file is to be transferred, the transactional approach is the first choice.
    <indexterm index="transactional, parameter" display="false"></indexterm>
    <indexterm index="parameter, transactional" display="false"></indexterm>
            See parameter <paramref>transactional</paramref>.
            </p>
    </note>
</param>