package sos.ftphistory.db;

/**
 * \class TestJadeFiles 
 * 
 * \brief TestHistorie - 
 * 
 * \details
 *
 * \section TestHistorie.java_intro_sec Introduction
 *
 * \section TestHistorie.java_samples Some Samples
 *
 * \code
 *   .... code goes here ...
 * \endcode
 *
 * <p style="text-align:center">
 * <br />---------------------------------------------------------------------------
 * <br /> APL/Software GmbH - Berlin
 * <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
 * <br />---------------------------------------------------------------------------
 * </p>
 * \author Uwe Risse
 * \version 15.06.2011
 * \see reference
 *
 * Created on 15.06.2011 15:06:50
 */

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.io.File;
import java.text.ParseException;
import java.util.Date;
import java.util.UUID;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

public class TestJadeFiles {
	JadeFilesDBLayer jadeFilesDBLayer;

	private final String configurationFilename = "R:/nobackup/junittests/hibernate/hibernate.cfg.xml";
	private File configurationFile;

	public TestJadeFiles() {
	}

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	@Before
	public void setUp() throws Exception {
		configurationFile = new File(configurationFilename);
		jadeFilesDBLayer = new JadeFilesDBLayer(configurationFile);

	}

	@After
	public void tearDown() throws Exception {
	}

	@Test
	public void testSchedulerOrderStepHistoryDBLayer() {
		JadeFilesDBLayer d = new JadeFilesDBLayer(configurationFile);
	}

	@Test
	public void testSimple2() {

		JadeFilesDBItem filesTable = new JadeFilesDBItem();

		UUID uuid = UUID.randomUUID();
		String randomUUIDString = uuid.toString();

		filesTable.setMandator("myMandator");
		filesTable.setSourceHost("mySourceHost");
		filesTable.setSourceHostIp("mySourceHostIp");
		filesTable.setSourceUser("mySourceUser");
		filesTable.setSourceDir("mySourceDir");
		filesTable.setSourceFilename("mySourceFilename");
		filesTable.setMd5(randomUUIDString);
		filesTable.setFileSize(1);
		filesTable.setModifiedBy("myModifiedBy");
		filesTable.setCreatedBy("myCreatedBy");
		filesTable.setCreated(new Date());
		filesTable.setModified(new Date());

		jadeFilesDBLayer.beginTransaction();
		jadeFilesDBLayer.save(filesTable);

		assertNotNull(filesTable.getId());

		jadeFilesDBLayer.commit();
		jadeFilesDBLayer.closeSession();

	}

	@Test
	public void testDelete() {

		JadeFilesDBItem filesTable = new JadeFilesDBItem();
		

		UUID uuid = UUID.randomUUID();
		String randomUUIDString = uuid.toString();

		filesTable.setMandator("myMandator");
		filesTable.setSourceHost("mySourceHost");
		filesTable.setSourceHostIp("mySourceHostIp");
		filesTable.setSourceUser("mySourceUser");
		filesTable.setSourceDir("mySourceDir");
		filesTable.setSourceFilename("mySourceFilename");
		filesTable.setMd5(randomUUIDString);
		filesTable.setFileSize(1);
		filesTable.setModifiedBy("myModifiedBy");
		filesTable.setCreatedBy("myCreatedBy");
		filesTable.setCreated(new Date());
		filesTable.setModified(new Date());

		jadeFilesDBLayer.beginTransaction();
		jadeFilesDBLayer.save(filesTable);
		Long id= filesTable.getId();
 
		JadeFilesDBItem filesTable2  = jadeFilesDBLayer.get(id);
 		jadeFilesDBLayer.delete(filesTable2);
		jadeFilesDBLayer.save(filesTable);
		jadeFilesDBLayer.delete(filesTable);

		jadeFilesDBLayer.commit();
		jadeFilesDBLayer.closeSession();

	}

	@Test
	public void testLoad() {
 
 
		JadeFilesDBItem historyTable = new JadeFilesDBItem();
		UUID uuid = UUID.randomUUID();
		String randomUUIDString = uuid.toString();
		historyTable.setMandator("myMandator");
		historyTable.setSourceHost("mySourceHost");
		historyTable.setSourceHostIp("mySourceHostIp");
		historyTable.setSourceUser("mySourceUser");
		historyTable.setSourceDir("mySourceDir");
		historyTable.setSourceFilename("mySourceFilename");
		historyTable.setFileSize(1);
		historyTable.setMd5(randomUUIDString);
		historyTable.setModifiedBy("myModifiedBy");
		historyTable.setCreatedBy("myCreatedBy");
		historyTable.setCreated(new Date());
		historyTable.setModified(new Date());
		
		jadeFilesDBLayer.beginTransaction();
		jadeFilesDBLayer.save(historyTable);
		Long id = historyTable.getId();
		jadeFilesDBLayer.commit();
		historyTable = jadeFilesDBLayer.get(id);
		assertNotNull(historyTable);
		assertEquals("mySourceHost", historyTable.getSourceHost());
		
		jadeFilesDBLayer.closeSession();
	}

	 

 

	@Test
	public void testDeleteInterval() throws ParseException {
		jadeFilesDBLayer.beginTransaction();
		jadeFilesDBLayer.deleteInterval(30);
		jadeFilesDBLayer.beginTransaction();
		int i = jadeFilesDBLayer.deleteInterval(3);

		assertEquals("testDeleteInterval fails...:", 0, i);
	}

}
