package com.sos.auth.rest.client;

import static org.junit.Assert.*;


import java.io.File;
import java.net.MalformedURLException;
import java.util.HashMap;
import java.util.List;


import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.sos.auth.SOSJaxbSubject;
import com.sos.auth.rest.SOSShiroCurrentUserAnswer;
import com.sos.auth.rest.SOSWebserviceAuthenticationRecord;
import com.sos.auth.rest.permission.model.SOSPermissionShiro;


/**
* \class TestSOSRestShiroClient 
* 
* \brief TestSOSRestShiroClient - 
* 
* \details
*
* \section TestSOSRestShiroClient.java_intro_sec Introduction
*
* \section TestSOSRestShiroClient.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author Uwe Risse
* \version 06.03.2014
* \see reference
*
* Created on 06.03.2014 17:39:33
 */

public class TestSOSRestShiroClient {

    private static final String JETTY_REST_URL_ROLE = "http://localhost:40040/jobscheduler/rest/sosPermission/role?user=%s&pwd=%s&role=%s";
    private static final String JETTY_REST_URL_PERMISSION = "http://localhost:40040/jobscheduler/rest/sosPermission/permission?user=%s&pwd=%s&permission=%s";
    private static final String LDAP_PASSWORD = "sos01";
    private static final String LDAP_USER = "SOS01";
    private static final String JETTY_URL = "http://localhost:40040/jobscheduler/rest/sosPermission/permissions?user=%s&pwd=%s";
    @SuppressWarnings("unused")
    private final String    conClassName    = "TestSOSRestShiroClient";

    public TestSOSRestShiroClient() {
        //
    }

    @BeforeClass
    public static void setUpBeforeClass() throws Exception {
    }

    @AfterClass
    public static void tearDownAfterClass() throws Exception {
    }

    @Before
    public void setUp() throws Exception {
       
     }

    @After
    public void tearDown() throws Exception {
    }
    
    @Test
    public void testClientJaxb() throws MalformedURLException {
        
        SOSRestShiroClient sosRestShiroClient = new SOSRestShiroClient();
        
        SOSWebserviceAuthenticationRecord sosWebserviceAuthenticationRecord = new SOSWebserviceAuthenticationRecord();
        sosWebserviceAuthenticationRecord.setUser(LDAP_USER);
        sosWebserviceAuthenticationRecord.setPassword(LDAP_PASSWORD);
        sosWebserviceAuthenticationRecord.setResource(JETTY_URL);
        
        SOSPermissionShiro shiro = sosRestShiroClient.getPermissions(sosWebserviceAuthenticationRecord);
        
        String permissisonsJid = shiro.getSOSPermissions().getSOSPermissionJid().getSOSPermission().get(0);
        String permissisonsJoe = shiro.getSOSPermissions().getSOSPermissionJid().getSOSPermissionJoe().getSOSPermission().get(0);
        String permissisonsJoc = shiro.getSOSPermissions().getSOSPermissionJid().getSOSPermissionJoc().getSOSPermission().get(0);
        String permissisonsDashboard = shiro.getSOSPermissions().getSOSPermissionJid().getSOSPermissionDashboard().getSOSPermission().get(0);
        
        
        assertEquals("testClient","jobscheduler:jid:execute",permissisonsJid);        
        assertEquals("testClient","jobscheduler:joe:execute",permissisonsJoe);        
        assertEquals("testClient","jobscheduler:joc:execute",permissisonsJoc);        
        assertEquals("testClient","jobscheduler:jid:dashboard:start_job",permissisonsDashboard);        

    }
        
        
  @Test
  public void testClientJaxbSubject() throws MalformedURLException {
     
        
        SOSRestShiroClient sosRestShiroClient = new SOSRestShiroClient();
        
        SOSWebserviceAuthenticationRecord sosWebserviceAuthenticationRecord = new SOSWebserviceAuthenticationRecord();
        sosWebserviceAuthenticationRecord.setUser(LDAP_USER);
        sosWebserviceAuthenticationRecord.setPassword(LDAP_PASSWORD);
        sosWebserviceAuthenticationRecord.setResource(JETTY_URL);
        
        SOSPermissionShiro sosPermissionShiro = sosRestShiroClient.getPermissions(sosWebserviceAuthenticationRecord);
        SOSJaxbSubject currentUser = new SOSJaxbSubject(sosPermissionShiro);
        
        assertEquals("testClientWithJaxb is authenticated",true,currentUser.isAuthenticated());
        assertEquals("testClientWithJaxb has role joe",true,currentUser.hasRole("admin"));
        assertEquals("testClientWithJaxb is permitted jobscheduler:jid:execute",true, currentUser.isPermitted("jobscheduler:jid:execute"));
         
    }
    
  @Test
  public void testCurrentUserAnswer() throws MalformedURLException {
     
        
        SOSRestShiroClient sosRestShiroClient = new SOSRestShiroClient();
        
        SOSWebserviceAuthenticationRecord sosWebserviceAuthenticationRecord = new SOSWebserviceAuthenticationRecord();
        sosWebserviceAuthenticationRecord.setUser(LDAP_USER);
        sosWebserviceAuthenticationRecord.setPassword(LDAP_PASSWORD);
//        sosWebserviceAuthenticationRecord.setResource(JETTY_REST_URL_PERMISSION);
        sosWebserviceAuthenticationRecord.setResource("http://localhost:40040/jobscheduler/rest/sosPermission/authenticate?user=%s&pwd=%s");
        
        sosWebserviceAuthenticationRecord.setPermission( "jobscheduler:jid:joctab:show");
        
        SOSShiroCurrentUserAnswer sosShiroCurrentUserAnswer = sosRestShiroClient.getSOSShiroCurrentUserAnswer(sosWebserviceAuthenticationRecord);
        System.out.println(sosShiroCurrentUserAnswer.getSessionId());
        
        assertEquals("testCurrentUserAnswer is authenticated",true,sosShiroCurrentUserAnswer.getIsAuthenticated());
        assertEquals("testCurrentUserAnswer is permitted jobscheduler:jid:joctab:show",true, sosShiroCurrentUserAnswer.isPermitted());

         sosWebserviceAuthenticationRecord.setUser(LDAP_USER);
        sosWebserviceAuthenticationRecord.setPassword(LDAP_PASSWORD);
        sosWebserviceAuthenticationRecord.setResource(JETTY_REST_URL_ROLE);
        sosWebserviceAuthenticationRecord.setPermission( "admin");
      
        sosShiroCurrentUserAnswer = sosRestShiroClient.getSOSShiroCurrentUserAnswer(sosWebserviceAuthenticationRecord);
        
        assertEquals("testCurrentUserAnswer is authenticated",true,sosShiroCurrentUserAnswer.getIsAuthenticated());
        assertEquals("testCurrentUserAnswer has role admin",true, sosShiroCurrentUserAnswer.hasRole());


         
    }
}


