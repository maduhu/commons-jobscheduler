package com.sos.auth.rest;

import static org.junit.Assert.*;


import java.io.File;
import java.net.MalformedURLException;
import java.util.HashMap;
import java.util.List;


import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.sos.auth.SOSJaxbSubject;
import com.sos.auth.rest.SOSShiroCurrentUserAnswer;
import com.sos.auth.rest.permission.model.SOSPermissionShiro;


/**
* \class TestSOSShiroCurrentUserAnswer 
* 
* \brief TestSOSShiroCurrentUserAnswer - 
* 
* \details
*
* \section TestSOSShiroCurrentUserAnswer.java_intro_sec Introduction
*
* \section TestSOSShiroCurrentUserAnswer.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author Uwe Risse
* \version 06.03.2014
* \see reference
*
* Created on 06.03.2014 17:39:33
 */

public class TestSOSShiroCurrentUserAnswer {

    @SuppressWarnings("unused")
    private final String    conClassName    = "TestSOSShiroCurrentUserAnswer";
    private SOSShiroCurrentUserAnswer sosShiroCurrentUserAnswer;
    
    public TestSOSShiroCurrentUserAnswer() {
        //
    }

    @BeforeClass
    public static void setUpBeforeClass() throws Exception {
    }

    @AfterClass
    public static void tearDownAfterClass() throws Exception {
    }

    @Before
    public void setUp() throws Exception {
        
       
     }

    @After
    public void tearDown() throws Exception {
    }
    
    @Test
    public void testSOSShiroCurrentUserAnswer() throws MalformedURLException {
        
        sosShiroCurrentUserAnswer = new SOSShiroCurrentUserAnswer();
        sosShiroCurrentUserAnswer.setHasRole(true);
        sosShiroCurrentUserAnswer.setIsAuthenticated(true);
        sosShiroCurrentUserAnswer.setIsPermitted(true);
        
        sosShiroCurrentUserAnswer.setPermission("permission");
        sosShiroCurrentUserAnswer.setRole("role");
        sosShiroCurrentUserAnswer.setUser("user");
        
        
        assertEquals("testSOSShiroCurrentUserAnswer getHasRole",true,sosShiroCurrentUserAnswer.getHasRole());        
        assertEquals("testSOSShiroCurrentUserAnswer hasRole",true,sosShiroCurrentUserAnswer.hasRole());        
        assertEquals("testSOSShiroCurrentUserAnswer getIsPermitted",true,sosShiroCurrentUserAnswer.getIsPermitted());
        assertEquals("testSOSShiroCurrentUserAnswer isPermitted",true,sosShiroCurrentUserAnswer.isPermitted());
        assertEquals("testSOSShiroCurrentUserAnswer getIsAuthenticated",true,sosShiroCurrentUserAnswer.getIsAuthenticated());
        assertEquals("testSOSShiroCurrentUserAnswer isAuthenticated",true,sosShiroCurrentUserAnswer.isAuthenticated());
           
        assertEquals("testSOSShiroCurrentUserAnswer getRole","role",sosShiroCurrentUserAnswer.getRole());        
        assertEquals("testSOSShiroCurrentUserAnswer getUser","user",sosShiroCurrentUserAnswer.getUser());        
        assertEquals("testSOSShiroCurrentUserAnswer getPermission","permission",sosShiroCurrentUserAnswer.getPermission());        


    }
        
  
}


