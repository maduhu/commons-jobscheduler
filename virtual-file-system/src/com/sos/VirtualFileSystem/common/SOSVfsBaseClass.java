package com.sos.VirtualFileSystem.common;

import org.apache.log4j.Logger;

import com.sos.VirtualFileSystem.Options.SOSFTPOptions;
import com.sos.i18n.annotation.I18NResourceBundle;

/**
* \class SOSVfsBaseClass
*
* \brief SOSVfsBaseClass -
*
* \details
*
* \section SOSVfsBaseClass.java_intro_sec Introduction
*
* \section SOSVfsBaseClass.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* \version $Id$
* \see reference
*
* Created on 22.06.2011 16:18:51
 */

/**
 * @author KB
 *
 */
@I18NResourceBundle(baseName = "SOSVirtualFileSystem", defaultLocale = "en")
public class SOSVfsBaseClass extends SOSVfsMessageCodes {

	public static enum enuSourceOrTarget {
		isUndefined, isSource, isTarget
	}
	private final String		conClassName		= "SOSVfsBaseClass";
	protected boolean			flgIsLocked			= false;									// the VFSHandler is in use (Pool-Concept).
	protected boolean			flgLoggedIn			= false;
	protected boolean			flgConnected		= false;

	@SuppressWarnings("unused")
	private final static Logger		logger				= Logger.getLogger(SOSVfsBaseClass.class);

	private enuSourceOrTarget	intSourceOrTarget	= enuSourceOrTarget.isUndefined;			// source

	protected SOSFTPOptions		objOptions			= null;

	public SOSVfsBaseClass() {
		super("SOSVirtualFileSystem" /* SOSVfsConstants.strBundleBaseName */);
	}

	public boolean isConnected () {
		return flgConnected;
	}
	public boolean isLocked() {
		return flgIsLocked;
	}

	public boolean isLoggedin() {
		return flgLoggedIn;
	}

	public boolean isSource() {
		if (intSourceOrTarget == enuSourceOrTarget.isSource) {
			return true;
		}
		return false;
	}

	public boolean isTarget() {
		if (intSourceOrTarget == enuSourceOrTarget.isTarget) {
			return true;
		}
		return false;
	}

	public void lock() {
		flgIsLocked = true;
	}

	final public SOSFTPOptions Options() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::Options";

		return objOptions;

	} // private SOSFTPOptions Options

	public void Options(final SOSFTPOptions pobjOptions) {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::Options";

		objOptions = pobjOptions;

	} // private void Options

	public void release() {
		flgIsLocked = false;
	}

	public void setConnected(final boolean pflgIsConnected) {
		flgConnected = pflgIsConnected;

	}

	public void setLogin (final boolean pflgIsLogin) {
		flgIsLocked = pflgIsLogin;
	}

	public void setSource() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::setSource";

		intSourceOrTarget = enuSourceOrTarget.isSource;

	} // private void setSource

	public void setTarget() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::setTarget";

		intSourceOrTarget = enuSourceOrTarget.isTarget;

	} // private void setTarget

	final public enuSourceOrTarget SourceOrTarget() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::SourceOrTarget";

		return intSourceOrTarget;
	} // private int SourceOrTarget

}


