package com.sos.VirtualFileSystem.HTTP;
import java.io.OutputStream;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.sos.JSHelper.Logging.Log4JHelper;
import com.sos.JSHelper.Options.SOSOptionTransferType;
import com.sos.VirtualFileSystem.Factory.VFSFactory;
import com.sos.VirtualFileSystem.Interfaces.ISOSVFSHandler;
import com.sos.VirtualFileSystem.Interfaces.ISOSVfsFileTransfer;
import com.sos.VirtualFileSystem.Options.SOSConnection2OptionsAlternate;
import com.sos.VirtualFileSystem.Options.SOSFTPOptions;

/**
* \class SOSVfsHTTPTest
*
* \brief SOSVfsHTTPTest -
*
* \details
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* @version $Id$10.11.2010
* \see reference
*
* Created on 23.07.2012 15:34:42
 */
public class SOSVfsHTTPTest {
	@SuppressWarnings("unused")
	private final String			conClassName			= "SOSVfsHTTPTest";
	@SuppressWarnings("unused")
	protected static Logger			logger					= Logger.getLogger(SOSVfsHTTPTest.class);
	protected static Log4JHelper	objLogger				= null;
	protected SOSFTPOptions			objOptions				= null;
	protected ISOSVFSHandler		objVFS					= null;
	protected ISOSVfsFileTransfer	objVfsClient			= null;
	// siehe setUp
	protected String				dynamicClassNameSource	= null;
	protected String				dynamicClassNameTarget	= null;
	protected final String			LOCAL_BASE_PATH			= "R:/backup/sos/java/junittests/testdata/JADE/";
	protected final String			REMOTE_BASE_PATH		= "/home/kb/";
	protected final String			WEB_URI					= "http://www.sos-berlin.com";

	//	protected final String			WEB_URI					= "https://mediacenter.gmx.net";
	//	protected final String			WEB_USER				= "sos.apl@gmx.de";
	//	protected final String			WEB_PASS				= "sosapl10629";
	public SOSVfsHTTPTest() {
		//
	}

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	@Before
	public void setUp() throws Exception {
		objLogger = new Log4JHelper("./log4j.properties"); //$NON-NLS-1$
		objLogger.setLevel(Level.DEBUG);
		objOptions = new SOSFTPOptions(SOSOptionTransferType.enuTransferTypes.http);
		objOptions.protocol.Value(SOSOptionTransferType.enuTransferTypes.http);
		objVFS = VFSFactory.getHandler(objOptions.protocol.Value());
		objVfsClient = (ISOSVfsFileTransfer) objVFS;
	}

	@After
	public void tearDown() throws Exception {
	}

	@Test
	public void testConnect() throws Exception {
		objOptions.host.Value(WEB_URI);
		objOptions.port.value(0);
		SOSConnection2OptionsAlternate objSource = objOptions.getConnectionOptions().Source();
		objSource.host.Value(WEB_URI);
		//		objSource.user.Value(WEB_USER);
		objOptions.operation.Value("send");
		VFSFactory.setConnectionOptions(objSource);
		objVFS = VFSFactory.getHandler(objOptions.protocol.Value());
		objVfsClient = (ISOSVfsFileTransfer) objVFS;
		objVFS.Connect(objOptions.getConnectionOptions().Source());
		// ftpClient.disconnect();
	}

	@Test
	public void testAuthenticate() throws Exception {
		testConnect();
		authenticate();
		objVfsClient.disconnect();
	}

	private void connect() throws RuntimeException, Exception {
		objOptions.host.Value(WEB_URI);
		objOptions.port.value(0);
		// objOptions.local_dir.Value("/temp");
		SOSConnection2OptionsAlternate objSource = objOptions.getConnectionOptions().Source();
		objSource.host.Value(WEB_URI);
		//		objSource.user.Value(WEB_USER);
		objSource.protocol.Value("webdav");
		objOptions.operation.Value("send");
		VFSFactory.setConnectionOptions(objSource);
		objVFS = VFSFactory.getHandler(objOptions.protocol.Value());
		objVfsClient = (ISOSVfsFileTransfer) objVFS;
		objVFS.Connect(objOptions.getConnectionOptions().Source());
	}

	private void authenticate() throws Exception {
		SOSConnection2OptionsAlternate objSource = objOptions.getConnectionOptions().Source();
		objSource.host.Value(WEB_URI);
		//		objSource.user.Value(WEB_USER);
		//		objSource.password.Value(WEB_PASS);
		objSource.protocol.Value("webdav");
		objSource.ssh_auth_method.isURL(true);
		objVFS.Authenticate(objSource);
	}

	@Test
	public void testMkdir() throws Exception {
		connect();
		authenticate();
		objVfsClient.mkdir("test1");
		objVfsClient.rmdir("test1");
		objVfsClient.disconnect();
	}

	@Test
	public void testMkdirMultiple() throws Exception {
		connect();
		authenticate();
		objVfsClient.mkdir("test1/test2/test3/");
		objVfsClient.rmdir("test1/");
		objVfsClient.disconnect();
	}

	@Test
	public void testgetInputStream() throws Exception {
		connect();
		authenticate();
		objVfsClient.getInputStream("test1/test2/test3/");
		objVfsClient.disconnect();
	}

	@Test
	public void testNListString() {
		// fail("Not yet implemented");
	}

	@Test
	public void testIsNotHiddenFile() {
		// fail("Not yet implemented");
	}

	@Test
	public void testNListStringBoolean() {
		// fail("Not yet implemented");
	}

	@Test
	public void testNList() {
		// fail("Not yet implemented");
	}

	@Test
	public void testNListBoolean() {
		// fail("Not yet implemented");
	}

	@Test
	public void testDirString() {
		// fail("Not yet implemented");
	}

	@Test
	public void testDirStringInt() {
		// fail("Not yet implemented");
	}

	@Test
	public void testListNames() {
		// fail("Not yet implemented");
	}

	@Test
	public void testDir() {
		// fail("Not yet implemented");
	}

	@Test
	public void testGetResponse() {
		// fail("Not yet implemented");
	}

	@Test
	public void testSize() throws Exception {
		connect();
		authenticate();
		System.out.println(objVfsClient.getFileSize(REMOTE_BASE_PATH + "sos-net-src.zip"));
		System.out.println(objVfsClient.getFileSize(REMOTE_BASE_PATH + "BVG.pdf"));
		objVfsClient.disconnect();
	}

	@Test
	public void testGetFileStringStringBoolean() {
		// fail("Not yet implemented");
	}

	@Test
	public void testGetFileStringString() {
		// fail("Not yet implemented");
	}

	@Test
	public void testPut() throws RuntimeException, Exception {
		connect();
		authenticate();
		objVfsClient.putFile(LOCAL_BASE_PATH + "sos-net-src.zip", REMOTE_BASE_PATH + "sos-net-src.zip");
		objVfsClient.disconnect();
	}

	@Test
	public void testPutFileStringString() {
		// fail("Not yet implemented");
	}

	@Test
	public void testPutFileStringOutputStream() throws Exception {
		connect();
		authenticate();
		OutputStream out = objVfsClient.getOutputStream(REMOTE_BASE_PATH + "out.test.txt");
		out.write("hallo".getBytes());
		out.flush();
		out.close();
		objVfsClient.disconnect();
	}

	@Test
	public void testGetClient() {
		// fail("Not yet implemented");
	}

	@Test
	public void testAppendFile() {
		// fail("Not yet implemented");
	}

	@Test
	public void testCd() throws Exception {
		connect();
		authenticate();
		objVfsClient.changeWorkingDirectory("/xxx/xxx");
		objVfsClient.disconnect();
	}

	@Test
	public void testChangeWorkingDirectory() throws Exception {
		testCd();
	}

	@Test
	public void testDelete() throws Exception {
		connect();
		authenticate();
		objVfsClient.put(LOCAL_BASE_PATH + "sos-net-src.zip", REMOTE_BASE_PATH + "tmp123.zip");
		objVfsClient.delete(REMOTE_BASE_PATH + "tmp123.zip");
		objVfsClient.disconnect();
	}

	@Test
	public void testLogin() throws Exception {
		connect();
		//		objVfsClient.login(WEB_USER,WEB_PASS);
		objVfsClient.disconnect();
	}

	@Test
	public void testDisconnect() throws Exception {
		connect();
		//		objVfsClient.login(WEB_USER,WEB_PASS);
		objVfsClient.disconnect();
	}

	@Test
	public void testGetReplyString() throws Exception {
		connect();
		//		objVfsClient.login(WEB_USER,WEB_PASS);
		logger.info("Replay = " + objVfsClient.getReplyString());
		objVfsClient.disconnect();
	}

	@Test
	public void testIsConnected() throws Exception {
		connect();
		//ftpClient.login(WEB_USER,WEB_PASS);
		logger.debug("IS CONNECTED = " + objVfsClient.isConnected());
		objVfsClient.disconnect();
	}

	@Test
	public void testLogout() throws Exception {
		connect();
		//		objVfsClient.login(WEB_USER,WEB_PASS);
		//		objVfsClient.logout();
		objVfsClient.disconnect();
	}

	@Test
	public void testRename() throws Exception {
		connect();
		authenticate();
		objVfsClient.put(LOCAL_BASE_PATH + "sos-net-src.zip", REMOTE_BASE_PATH + "tmp123.zip");
		objVfsClient.rename(REMOTE_BASE_PATH + "tmp123.zip", REMOTE_BASE_PATH + "tmp1234.zip");
		objVfsClient.delete(REMOTE_BASE_PATH + "tmp1234.zip");
		objVfsClient.disconnect();
	}

	@Test
	public void testGetHandler() throws Exception {
		connect();
		authenticate();
		logger.debug("HANDLER = " + objVfsClient.getHandler());
		objVfsClient.disconnect();
	}

	@Test
	public void testExecuteCommand() throws Exception {
		connect();
		authenticate();
		String lineSeparator = "\n";
		objVFS.ExecuteCommand("cd /home/test" + lineSeparator + "cd /home/kb");
		objVfsClient.disconnect();
	}

	@Test
	public void testCreateScriptFile() throws Exception {
		// fail("Not yet implemented");
	}

	@Test
	public void testGetExitCode() throws Exception {
		// fail("Not yet implemented");
	}

	@Test
	public void testGetExitSignal() throws Exception {
		// fail("Not yet implemented");
	}

	@Test
	public void testCloseConnection() throws Exception {
		// fail("Not yet implemented");
	}

	@Test
	public void testConnect1() throws Exception {
		// fail("Not yet implemented");
	}

	@Test
	public void testConnectSOSConnection2OptionsAlternate() throws Exception {
		// fail("Not yet implemented");
	}

	@Test
	public void testConnectISOSConnectionOptions() throws Exception {
		// fail("Not yet implemented");
	}

	@Test
	public void testConnectStringInt() throws Exception {
		// fail("Not yet implemented");
	}

	@Test
	public void testCloseSession() throws Exception {
		// fail("Not yet implemented");
	}

	@Test
	public void testOpenSession() throws Exception {
		// fail("Not yet implemented");
	}

	@Test
	public void testTransferMode() throws Exception {
		// fail("Not yet implemented");
	}

	@Test
	public void testGetNewVirtualFile() throws Exception {
		// fail("Not yet implemented");
	}

	@Test
	public void testMkdirSOSFolderName() throws Exception {
		// fail("Not yet implemented");
	}

	@Test
	public void testRmdirSOSFolderName() throws Exception {
		// fail("Not yet implemented");
	}

	@Test
	public void testGetConnection() throws Exception {
		// fail("Not yet implemented");
	}

	@Test
	public void testGetSession() throws Exception {
		// fail("Not yet implemented");
	}

	@Test
	public void testDirSOSFolderName() throws Exception {
		// fail("Not yet implemented");
	}

	@Test
	public void testGetStdErr() throws Exception {
		// fail("Not yet implemented");
	}

	@Test
	public void testGetStdOut() throws Exception {
		// fail("Not yet implemented");
	}

	@Test
	public void testRemoteIsWindowsShell() throws Exception {
		// fail("Not yet implemented");
	}

	@Test
	public void testSetJSJobUtilites() throws Exception {
		// fail("Not yet implemented");
	}

	@Test
	public void testGetFileHandle() throws Exception {
		connect();
		authenticate();
		System.out.println(objVfsClient.getModificationTime(REMOTE_BASE_PATH + "sos-net-src.zip"));
		objVfsClient.disconnect();
	}

	@Test
	public void testGetFilelist() throws Exception {
		connect();
		authenticate();
		//String[] result = ftpClient.getFilelist(REMOTE_BASE_PATH, "", 0, true);
		String[] result = objVfsClient.getFilelist(REMOTE_BASE_PATH, "\\.pdf$", 0, true);
		for (String element : result) {
			logger.info(element);
		}
		objVfsClient.disconnect();
	}
}
