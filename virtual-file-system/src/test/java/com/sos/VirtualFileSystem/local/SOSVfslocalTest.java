package com.sos.VirtualFileSystem.local;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.IOException;

import org.apache.log4j.Logger;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.sos.JSHelper.Options.SOSOptionTransferType.enuTransferTypes;
import com.sos.JSHelper.io.Files.JSFile;
import com.sos.VirtualFileSystem.Factory.VFSFactory;
import com.sos.VirtualFileSystem.Interfaces.ISOSAuthenticationOptions;
import com.sos.VirtualFileSystem.Interfaces.ISOSVFSHandler;
import com.sos.VirtualFileSystem.Interfaces.ISOSVfsFileTransfer;
import com.sos.VirtualFileSystem.Interfaces.ISOSVirtualFile;

/**
* \class SOSVfsFtpTest 
* 
* \brief SOSVfsFtpTest - 
* 
* \details
*
* \section SOSVfsFtpTest.java_intro_sec Introduction
*
* \section SOSVfsFtpTest.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* @version $Id$15.08.2010
* \see reference
*
* Created on 15.08.2010 16:25:08
 */

public class SOSVfslocalTest {

	@SuppressWarnings("unused")
	private final String		conClassName			= "SOSVfsFtpTest";

	@SuppressWarnings("unused")
	private static Logger		logger					= Logger.getLogger(SOSVfslocalTest.class);
	// private SOSFTPOptions objOptions = null;

	private ISOSVFSHandler		objVFS					= null;
	private ISOSVfsFileTransfer	objFileSystemHandler	= null;

	private final String				strTestFileName			= "text.txt";
	private final String				strTestPathName			= "R:\\nobackup\\junittests\\testdata\\LOCAL\\";
	@SuppressWarnings("unused")
	private final String				strAPrefix				= "~~";
	private String				strTestFilePath			= "";

	public SOSVfslocalTest() {
		//
	}

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	@Before
	public void setUp() throws Exception {
		// objOptions = new SOSFTPOptions();
		objVFS = VFSFactory.getHandler(enuTransferTypes.local);
		objFileSystemHandler = (ISOSVfsFileTransfer) objVFS;
	}

	@After
	public void tearDown() throws Exception {
	}

	// @Test
	public void testSOSVfsFtp() {
		fail("Not yet implemented");
	}

	@Test
	// (expected = java.lang.Exception.class)
	public void testConnect() throws Exception {
		objVFS.Connect();
	}

	// // @Test
	public void testMkdirString() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testRmdirString() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testPassive() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testNListString() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testDoPWD() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testIsNotHiddenFile() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testNListStringBoolean() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testNList() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testNListBoolean() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testDirString() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testDirStringInt() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testDir() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testGetResponse() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testSize() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testGet() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testGetFileStringString() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testGetFileStringStringBoolean() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testPut() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testPutFileStringString() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testPutFileStringOutputStream() {
		fail("Not yet implemented");
	}

	@Test
	public void testAppendFile() {
		CreateTestFile();
		long lngFileSize = objFileSystemHandler.appendFile(strTestPathName + strTestFileName, strTestPathName + strTestFileName);
		assertEquals("FileSize of appened File", 88, lngFileSize);
	}

	// // @Test
	public void testAscii() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testBinary() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testCd() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testDelete() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testLogin() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testChangeWorkingDirectory() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testDisconnect() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testGetReplyString() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testIsConnected() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testListNames() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testLogout() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testRename() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testGetHandler() {
		fail("Not yet implemented");
	}

	  @Test
	public void testExecuteCommand() throws Exception {
		objVFS.Connect();
		String strR = objFileSystemHandler.getReplyString();
		assertEquals("Connect message", "ok", strR);

		objVFS.ExecuteCommand("dir");
	}
	  
	  
	@Test
	public void testReplaceCommand4Windows() throws Exception {
		SOSVfsLocal objSOSVfsLocal = new SOSVfsLocal();
		String strR = objSOSVfsLocal.replaceCommand4Windows("echo /Y //host/c/nobackup/text.txt c:/nobackup/text.txt /nobackup/text.txt");
		assertEquals("CommandStringReplace message", "echo /Y \\\\host\\c\\nobackup\\text.txt c:\\nobackup\\text.txt \\nobackup\\text.txt", strR);
	}
	
	// // @Test
	public void testCreateScriptFile() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testGetExitCode() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testGetExitSignal() {
		fail("Not yet implemented");
	}

	@Test
	public void testAuthenticate() throws Exception {
		objVFS.Connect();
		String strR = objFileSystemHandler.getReplyString();
		assertEquals("Connect message", "ok", strR);

		ISOSAuthenticationOptions objOptions = null;
		objVFS.Authenticate(objOptions);
		strR = objFileSystemHandler.getReplyString();
		// char[] bteB = strR.toCharArray();
		// for (int i = 1; i <= bteB.length; i++) {
		// logger.debug(String.format("char %1$d = %2$s", i, (byte) (bteB[i])));
		// }
		assertEquals("Login message", "230 Login successful.", strR);

		objVFS.CloseSession();
		strR = objFileSystemHandler.getReplyString();
		assertEquals("Login message", "221 Goodbye.", strR);
		objVFS.CloseConnection();
	}

	  @Test()
	public void testCloseConnection() {
		assertTrue("Not yet implemented", true);
	}

	// // @Test
	public void testConnect1() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testConnectISOSConnectionOptions() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testConnectStringInt() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testCloseSession() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testOpenSession() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testFileExists() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testTransferMode() {
		fail("Not yet implemented");
	}

	@Test
	public void testDeleteFile() {
		CreateTestFile();
		try {
			ISOSVirtualFile objF = objFileSystemHandler.getFileHandle(strTestFilePath);
			assertTrue("File created", objF.FileExists());
			objFileSystemHandler.delete(strTestFilePath);
			boolean flgResult = objF.FileExists();
			assertFalse("File deleted", flgResult);
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	// // @Test
	public void testGetFileString() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testGetFilePermissions() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testGetFileSize() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testIsDirectory() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testPutFileFile() {
		fail("Not yet implemented");
	}

	private void CreateTestFile() {

		strTestFilePath = strTestPathName + strTestFileName;
		JSFile objFile = new JSFile(strTestFilePath);
		objFile.deleteOnExit();
		try {
			objFile.WriteLine("This is a line in a testfile. Nothing else");
			objFile.close();
		}
		catch (IOException e) {
			e.printStackTrace(System.err);
		}
	}

	@Test
	public void testPutFileString() throws Exception {
		CreateTestFile();
		objVFS.Connect();
		String strR = objFileSystemHandler.getReplyString();
		assertEquals("Connect message", "ok", strR);

		ISOSAuthenticationOptions objOptions = null;
		objVFS.Authenticate(objOptions);
		strR = objFileSystemHandler.getReplyString();
		assertEquals("Login message", "230 Login successful.", strR);

		objFileSystemHandler.putFile(strTestPathName + strTestFileName, strTestFileName);

		objVFS.CloseSession();
		strR = objFileSystemHandler.getReplyString();
		assertEquals("Login message", "221 Goodbye.", strR);
		objVFS.CloseConnection();
	}

	// // @Test
	public void testSetFilePermissions() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testMkdirSOSFolderName() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testRmdirSOSFolderName() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testGetConnection() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testGetSession() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testDirSOSFolderName() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testGetStdErr() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testGetStdOut() {
		fail("Not yet implemented");
	}

	// @Test
	public void testRemoteIsWindowsShell() {
		fail("Not yet implemented");
	}
}
