package com.sos.VirtualFileSystem.HTTP;
import com.sos.JSHelper.Options.SOSOptionTransferType;
import com.sos.VirtualFileSystem.Factory.VFSFactory;
import com.sos.VirtualFileSystem.Interfaces.ISOSVFSHandler;
import com.sos.VirtualFileSystem.Interfaces.ISOSVfsFileTransfer;
import com.sos.VirtualFileSystem.Options.SOSConnection2OptionsAlternate;
import com.sos.VirtualFileSystem.Options.SOSFTPOptions;
import org.apache.log4j.Logger;
import org.junit.*;

import java.io.OutputStream;

/**
* \class SOSVfsHTTPTest
*
* \brief SOSVfsHTTPTest -
*
* \details
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* @version $Id$10.11.2010
* \see reference
*
* Created on 23.07.2012 15:34:42
 */
public class SOSVfsHTTPTest {
	@SuppressWarnings("unused")
	private final String			conClassName			= "SOSVfsHTTPTest";
	@SuppressWarnings("unused")
	protected static Logger			logger					= Logger.getLogger(SOSVfsHTTPTest.class);
	protected SOSFTPOptions			objOptions				= null;
	protected ISOSVFSHandler		objVFS					= null;
	protected ISOSVfsFileTransfer	objVfsClient			= null;
	SOSConnection2OptionsAlternate objSource				= null;
	// siehe setUp
	protected String				dynamicClassNameSource	= null;
	protected String				dynamicClassNameTarget	= null;
	protected final String			LOCAL_BASE_PATH			= "R:/backup/sos/java/junittests/testdata/JADE/";
	protected final String			HTTP_URI				= "www.sos-berlin.com";
	protected final int				HTTP_PORT				= 80;

	protected final String			HTTPS_URI				= "https://kb.sos-berlin.com";
	protected final int				HTTPS_PORT				= 443;

	public SOSVfsHTTPTest() {
		//
	}

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	@Before
	public void setUp() throws Exception {
		objOptions = new SOSFTPOptions(SOSOptionTransferType.enuTransferTypes.http);
		objOptions.protocol.Value(SOSOptionTransferType.enuTransferTypes.http);
		objOptions.auth_method.isURL(true);
		objSource = objOptions.getConnectionOptions().Source();
		objVFS = VFSFactory.getHandler(objOptions.protocol.Value());
		objVfsClient = (ISOSVfsFileTransfer) objVFS;
	}

	@After
	public void tearDown() throws Exception {
	}

	private void connect() throws RuntimeException, Exception {
		objSource.host.Value(HTTP_URI);
		objSource.port.value(HTTP_PORT);
		objVFS.Connect(objSource);
		
	}

	private void authenticate() throws Exception {
		objSource.user.Value("xxx");
		objSource.password.Value("xxx");
		
		objVFS.Authenticate(objSource);
	}
	
	private void disconnect() throws Exception {
		objVfsClient.disconnect();
		objVFS.CloseConnection();
	}
	
	@Test
	public void testConnect() throws Exception {
		connect();
		disconnect();
	}

	@Test
	public void testAuthenticate() throws Exception {
		connect();
		authenticate();
		disconnect();
	}

	@Test
	public void testGetFile() throws Exception {
		connect();
		authenticate();
		
		objVfsClient.getFile("timecard/timecard_dialog.php","D:\\1.php");
		//objVfsClient.getFile("http://download.sos-berlin.com/JobScheduler.1.7/jobscheduler_windows-x64.1.7.4274.zip","D:\\1.zip");
		
		disconnect();
	}

	@Test
	public void testMkdir() throws Exception {
		connect();
		authenticate();
		objVfsClient.mkdir("test1");
		objVfsClient.rmdir("test1");
		disconnect();
	}

	@Test
	public void testMkdirMultiple() throws Exception {
		connect();
		authenticate();
		objVfsClient.mkdir("test1/test2/test3/");
		objVfsClient.rmdir("test1/");
		disconnect();
	}

	@Test
	public void testgetInputStream() throws Exception {
		connect();
		authenticate();
		objVfsClient.getInputStream("test1/test2/test3/");
		disconnect();
	}

	
	@Test
	public void testSize() throws Exception {
		connect();
		authenticate();
		
		//System.out.println(objVfsClient.getFileSize(REMOTE_BASE_PATH + "sos-net-src.zip"));
		//System.out.println(objVfsClient.getFileSize(REMOTE_BASE_PATH + "BVG.pdf"));
		
		disconnect();
	}

	
	@Test
	public void testPut() throws RuntimeException, Exception {
		connect();
		authenticate();
		//objVfsClient.putFile(LOCAL_BASE_PATH + "sos-net-src.zip", REMOTE_BASE_PATH + "sos-net-src.zip");
		
		disconnect();
	}

	@Test
	public void testPutFileStringOutputStream() throws Exception {
		connect();
		authenticate();
		
		/**
		OutputStream out = objVfsClient.getOutputStream(REMOTE_BASE_PATH + "out.test.txt");
		out.write("hallo".getBytes());
		out.flush();
		out.close();
		*/
		
		disconnect();
	}


	@Test
	public void testCd() throws Exception {
		connect();
		authenticate();
		objVfsClient.changeWorkingDirectory("/xxx/xxx");
		disconnect();
	}

	
	@Test
	public void testDelete() throws Exception {
		connect();
		authenticate();
		
		//objVfsClient.put(LOCAL_BASE_PATH + "sos-net-src.zip", REMOTE_BASE_PATH + "tmp123.zip");
		//objVfsClient.delete(REMOTE_BASE_PATH + "tmp123.zip");
		
		disconnect();
	}


	@Test
	public void testIsConnected() throws Exception {
		connect();
		//ftpClient.login(WEB_USER,WEB_PASS);
		logger.debug("IS CONNECTED = " + objVfsClient.isConnected());
		disconnect();
	}

	@Test
	public void testLogout() throws Exception {
		connect();
		//		objVfsClient.login(WEB_USER,WEB_PASS);
		//		objVfsClient.logout();
		disconnect();
	}

	@Test
	public void testRename() throws Exception {
		connect();
		authenticate();
		
		//objVfsClient.put(LOCAL_BASE_PATH + "sos-net-src.zip", REMOTE_BASE_PATH + "tmp123.zip");
		//7objVfsClient.rename(REMOTE_BASE_PATH + "tmp123.zip", REMOTE_BASE_PATH + "tmp1234.zip");
		//objVfsClient.delete(REMOTE_BASE_PATH + "tmp1234.zip");
		
		disconnect();
	}

	@Test
	public void testGetHandler() throws Exception {
		connect();
		authenticate();
		logger.debug("HANDLER = " + objVfsClient.getHandler());
		disconnect();
	}

	@Test
	public void testExecuteCommand() throws Exception {
		connect();
		authenticate();
		String lineSeparator = "\n";
		objVFS.ExecuteCommand("cd /home/test" + lineSeparator + "cd /home/kb");
		disconnect();
	}

}
