package com.sos.VirtualFileSystem.zip;
/**
* \class SOSVfsZipTest 
* 
* \brief SOSVfsZipTest - 
* 
* \details
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* \version $Id$ 29.03.2011
* \see reference
*
* Created on 29.03.2011 12:03:25
 */
import com.sos.JSHelper.Exceptions.JobSchedulerException;
import com.sos.JSHelper.Options.SOSOptionTransferType.enuTransferTypes;
import com.sos.VirtualFileSystem.Factory.VFSFactory;
import com.sos.VirtualFileSystem.Interfaces.ISOSVFSHandler;
import com.sos.VirtualFileSystem.Interfaces.ISOSVfsFileTransfer;
import com.sos.VirtualFileSystem.Interfaces.ISOSVirtualFile;

import org.apache.log4j.Logger;
import org.junit.*;

import java.io.File;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Vector;

import static org.junit.Assert.assertFalse;

/**
 * @author KB
 *
 *
 */
public class SOSVfsZipTest {
	@SuppressWarnings("unused")
	private final String		conClassName			= "SOSVfsZipTest";
	private static final Logger	logger					= Logger.getLogger(SOSVfsZipTest.class);
	private ISOSVFSHandler		objVFS					= null;
	private ISOSVfsFileTransfer	objFileSystemHandler	= null;
	private static final String	strTestPathName			= "R:\\nobackup\\junittests\\testdata\\ZIP\\";
	private static final String	TEST_ZIP				= strTestPathName + "test.zip";
	private static final String	SRC_SOS_NET_SOSFTP_SOSFTP_CMD	= "src/sos/net/sosftp/sosftp.cmd";
	private static final String strZipFile1 			= strTestPathName + "sos-net-src.zip";
	public SOSVfsZipTest() {
		//
	}

	/**
	 * \brief setUpBeforeClass
	 * 
	 * \details
	 *
	 * \return void
	 *
	 * @throws java.lang.Exception
	 */
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	/**
	 * \brief tearDownAfterClass
	 * 
	 * \details
	 *
	 * \return void
	 *
	 * @throws java.lang.Exception
	 */
	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	/**
	 * \brief setUp
	 * 
	 * \details
	 *
	 * \return void
	 *
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {
		objVFS = VFSFactory.getHandler("zip");
		objFileSystemHandler = (ISOSVfsFileTransfer) objVFS;
		objVFS.setSource();
	}

	/**
	 * \brief tearDown
	 * 
	 * \details
	 *
	 * \return void
	 *
	 * @throws java.lang.Exception
	 */
	@After
	public void tearDown() throws Exception {
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#SOSVfsZip()}.
	 */
	@Test
	public final void testSOSVfsZip() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#appendFile(java.lang.String, java.lang.String)}.
	 */
	@Test
	public final void testAppendFile() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#ascii()}.
	 */
	@Test
	public final void testAscii() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#binary()}.
	 */
	@Test
	public final void testBinary() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#changeWorkingDirectory(java.lang.String)}.
	 * @throws Exception 
	 */
	@Test
	public final void testChangeWorkingDirectory() throws Exception {
		objFileSystemHandler.changeWorkingDirectory(strZipFile1);
		objFileSystemHandler.close();
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#delete(java.lang.String)}.
	 */
	@Test
	public final void testDelete() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#getFile(java.lang.String, java.lang.String, boolean)}.
	 */
	@Test
	public final void testGetFileStringStringBoolean() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#getFile(java.lang.String, java.lang.String)}.
	 */
	@Test
	public final void testGetFileStringString() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#getHandler()}.
	 */
	@Test
	public final void testGetHandler() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#isConnected()}.
	 */
	@Test
	public final void testIsConnected() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#listNames(java.lang.String)}.
	 * @throws Exception 
	 */
	@Test
  @Ignore("Test set to Ignore for later examination")
	public final void testListNames() throws Exception {
		objVFS.setSource();

		String[] strFileNames = objFileSystemHandler.listNames(strZipFile1);
		for (String strFileName : strFileNames) {
			logger.debug(String.format("File: %1$s", strFileName));
		}
		objFileSystemHandler.close();
	}

	@Test
  @Ignore("Test set to Ignore for later examination")
	public final void testgetFiles() throws Exception {
		objVFS.setSource();

		Vector <ISOSVirtualFile> objFileList = objFileSystemHandler.getFiles(strZipFile1);
		for (ISOSVirtualFile objVF : objFileList) {
			if (objVF.isDirectory() == true) {
				logger.debug(String.format("%1$s is a directory", objVF.getName()));
			}
			else {
				logger.debug(String.format("File %1$s, Size %2$d", objVF.getName(), objVF.getFileSize()));
			}
		}
		objFileSystemHandler.close();
	}


	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#login(java.lang.String, java.lang.String)}.
	 */
	@Test
	public final void testLogin() {
		objFileSystemHandler.login("test", "Test");
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#logout()}.
	 * @throws Exception 
	 */
	@Test
	public final void testLogout() throws Exception {
		objFileSystemHandler.logout();
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#mkdir(java.lang.String)}.
	 */
	@Test
	public final void testMkdirString() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#nList(java.lang.String)}.
	 */
	@Test
	public final void testNListString() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#nList(java.lang.String, boolean)}.
	 */
	@Test
	public final void testNListStringBoolean() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#nList(boolean)}.
	 */
	@Test
	public final void testNListBoolean() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#nList()}.
	 */
	@Test
	public final void testNList() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#passive()}.
	 */
	@Test
	public final void testPassive() {
//		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#put(java.lang.String, java.lang.String)}.
	 */
	@Test
	public final void testPut() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#putFile(java.lang.String, java.io.OutputStream)}.
	 */
	@Test
	public final void testPutFileStringOutputStream() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#putFile(java.lang.String, java.lang.String)}.
	 */
	@Test
	public final void testPutFileStringString() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#getConnection()}.
	 */
	@Test
	public final void testGetConnection() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#getSession()}.
	 */
	@Test
	public final void testGetSession() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#mkdir(com.sos.VirtualFileSystem.DataElements.SOSFolderName)}.
	 */
	@Test
	public final void testMkdirSOSFolderName() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#rmdir(com.sos.VirtualFileSystem.DataElements.SOSFolderName)}.
	 */
	@Test
	public final void testRmdir() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#dir(com.sos.VirtualFileSystem.DataElements.SOSFolderName)}.
	 */
	@Test
	public final void testDirSOSFolderName() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#dir(java.lang.String, int)}.
	 */
	@Test
	public final void testDirStringInt() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#setJSJobUtilites(com.sos.JSHelper.Basics.JSJobUtilities)}.
	 */
	@Test
	public final void testSetJSJobUtilites() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#ExecuteCommand(java.lang.String)}.
	 */
	@Test
	public final void testExecuteCommand() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#getExitCode()}.
	 */
	@Test
	public final void testGetExitCode() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#getExitSignal()}.
	 */
	@Test
	public final void testGetExitSignal() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#getStdErr()}.
	 */
	@Test
	public final void testGetStdErr() {
//		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#getStdOut()}.
	 */
	@Test
	public final void testGetStdOut() {
//		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#CloseSession()}.
	 */
	@Test
	public final void testCloseSession() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#OpenSession(com.sos.VirtualFileSystem.Interfaces.ISOSShellOptions)}.
	 */
	@Test
	public final void testOpenSession() {
//		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#getFileHandle(java.lang.String)}.
	 * @throws Exception 
	 */
	@Test
  @Ignore("Test set to Ignore for later examination")
	public final void testGetFileHandle() throws Exception {
		objFileSystemHandler.changeWorkingDirectory(strZipFile1);
		SOSVfsZipFileEntry objVF = (SOSVfsZipFileEntry) objFileSystemHandler.getFileHandle(SRC_SOS_NET_SOSFTP_SOSFTP_CMD);
		InputStream objFI = objVF.getFileInputStream();
		if (objFI == null) {
			throw new JobSchedulerException("can't get InputStream for " + SRC_SOS_NET_SOSFTP_SOSFTP_CMD);
		}
		
		int lngBufferSize = 1024;
		byte[] buffer = new byte[lngBufferSize];
		int intBytesTransferred;
		synchronized (this) {
			while ((intBytesTransferred = objFI.read(buffer)) != -1) {
				try {
					System.out.println(new String(buffer).substring(0, intBytesTransferred));
				}
				catch (JobSchedulerException e) {
					break;
				}		
			}
		}
		objFI.close();
		objFileSystemHandler.close();
	}
	
	@Test
  @Ignore("Test set to Ignore for later examination")
	public final void testFile2String () throws Exception {
		
		objFileSystemHandler.changeWorkingDirectory(strZipFile1);
		SOSVfsZipFileEntry objVF = (SOSVfsZipFileEntry) objFileSystemHandler.getFileHandle(SRC_SOS_NET_SOSFTP_SOSFTP_CMD);
		String strB = objVF.File2String();
		System.out.println(strB);
		objFileSystemHandler.close();
	}

	
	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#write(byte[])}.
	 * @throws Exception 
	 */
	@Test
  @Ignore("Test set to Ignore for later examination")
	public final void testWriteByteArray() throws Exception {
		boolean objF = new File(TEST_ZIP).delete();
		objVFS.setTarget();
		objFileSystemHandler.changeWorkingDirectory(TEST_ZIP);
		SOSVfsZipFileEntry objVF = (SOSVfsZipFileEntry) objFileSystemHandler.getFileHandle("test.txt");
		OutputStream objOS = objVF.getFileOutputStream();
		
		objOS.write("abcdefghijkl".getBytes());
		
		objOS.close();
		objFileSystemHandler.close();

	}

	@Test
  @Ignore("Test set to Ignore for later examination")
	public final void CreateZipWithMultipleFiles () throws Exception {
		boolean flgF = new File(TEST_ZIP).delete();
		if (flgF == false) {
//			throw new JobSchedulerException("Delete of zip-archive failed");
		}
		objVFS.setTarget();
		objFileSystemHandler.changeWorkingDirectory(TEST_ZIP);
		
		ISOSVFSHandler objLocalVFS = VFSFactory.getHandler("local");
		ISOSVfsFileTransfer objLocalFiles = (ISOSVfsFileTransfer) objLocalVFS;
		String[] strA = objLocalFiles.getFilelist(strTestPathName, ".*\\.txt", 1, false);
		
		for (String string : strA) {
			ISOSVirtualFile objVF = objLocalFiles.getFileHandle(string);
			objFileSystemHandler.putFile(objVF);
		}
		
		objFileSystemHandler.close();
	}

	@Test
  @Ignore("Test set to Ignore for later examination")
	public final void Directory4ZipWithMultipleFiles () throws Exception {
		objFileSystemHandler.changeWorkingDirectory(TEST_ZIP);
		String[] strA = objFileSystemHandler.getFilelist(strTestPathName, "^.*\\.txt$", 1, false);
		
		for (String strFileName : strA) {
			System.out.println(strFileName);
		}
		
		objFileSystemHandler.close();
	}

	@Test
  @Ignore("Test set to Ignore for later examination")
	public final void ExtractWithMultipleFiles () throws Exception {
		objFileSystemHandler.changeWorkingDirectory(TEST_ZIP);
		String[] strA = objFileSystemHandler.getFilelist("c:\\temp\\", ".*\\.txt$", 1, false);

		ISOSVFSHandler objLocalVFS = VFSFactory.getHandler(enuTransferTypes.local.Text());
		ISOSVfsFileTransfer objLocalFiles = (ISOSVfsFileTransfer) objLocalVFS;

		for (String strFileName : strA) {
			System.out.println(strFileName);
			ISOSVirtualFile objVF = objFileSystemHandler.getFileHandle(strFileName);
			ISOSVirtualFile objLocalFile = objLocalFiles.getFileHandle(strFileName);
			objLocalFile.putFile(objVF);
		}
		
		objFileSystemHandler.close();
		objLocalFiles.close();
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#isNegativeCommandCompletion()}.
	 * @throws Exception 
	 */
	@Test
	public final void testIsNegativeCommandCompletion() throws Exception {
		objFileSystemHandler.changeWorkingDirectory(strZipFile1);
		assertFalse("Must be false", objFileSystemHandler.isNegativeCommandCompletion());
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#getFilelist(java.lang.String, java.lang.String, int, boolean)}.
	 */
	@Test
	public final void testGetFilelist() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#CompletePendingCommand()}.
	 */
	@Test
	public final void testCompletePendingCommand() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#Connect(com.sos.VirtualFileSystem.Options.SOSConnection2OptionsAlternate)}.
	 */
	@Test
	public final void testConnectSOSConnection2OptionsAlternate() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#DoPWD()}.
	 */
	@Test
	public final void testDoPWD() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#getAppendFileStream(java.lang.String)}.
	 */
	@Test
	public final void testGetAppendFileStream() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#getFileSize(java.lang.String)}.
	 */
	@Test
	public final void testGetFileSize() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#getInputStream(java.lang.String)}.
	 */
	@Test
	public final void testGetInputStream() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#getModificationTime(java.lang.String)}.
	 */
	@Test
	public final void testGetModificationTime() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#getOutputStream(java.lang.String)}.
	 */
	@Test
	public final void testGetOutputStream() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#isDirectory(java.lang.String)}.
	 */
	@Test
	public final void testIsDirectory() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#rename(java.lang.String, java.lang.String)}.
	 */
	@Test
	public final void testRename() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#close()}.
	 */
	@Test
	public final void testClose() {
		objFileSystemHandler.close();
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#closeInput()}.
	 */
	@Test
	public final void testCloseInput() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#closeOutput()}.
	 */
	@Test
	public final void testCloseOutput() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#flush()}.
	 */
	@Test
	public final void testFlush() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#read(byte[])}.
	 */
	@Test
	public final void testReadByteArray() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#read(byte[], int, int)}.
	 */
	@Test
	public final void testReadByteArrayIntInt() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#write(byte[], int, int)}.
	 */
	@Test
	public final void testWriteByteArrayIntInt() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#openInputFile(java.lang.String)}.
	 */
	@Test
	public final void testOpenInputFile() {
		//   fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.VirtualFileSystem.zip.SOSVfsZip#openOutputFile(java.lang.String)}.
	 */
	@Test
	public final void testOpenOutputFile() {
		//   fail("Not yet implemented"); // TODO
	}
}
