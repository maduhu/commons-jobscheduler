package com.sos.VirtualFileSystem.FTPS;

import com.sos.JSHelper.Options.SOSOptionTransferType.enuTransferTypes;
import com.sos.JSHelper.io.Files.JSFile;
import com.sos.VirtualFileSystem.Factory.VFSFactory;
import com.sos.VirtualFileSystem.Interfaces.ISOSVFSHandler;
import com.sos.VirtualFileSystem.Interfaces.ISOSVfsFileTransfer;
import com.sos.VirtualFileSystem.Options.SOSConnection2OptionsAlternate;
import com.sos.VirtualFileSystem.Options.SOSFTPOptions;
import org.apache.log4j.Logger;
import org.junit.*;

import java.io.IOException;
import java.util.HashMap;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

/**
* \class SOSVfsFtpSTest
*
* \brief SOSVfsFtpSTest -
*
* \details
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* @version $Id$15.08.2010
* \see reference
*
* Created on 15.08.2010 16:25:08
 */
public class SOSVfsFtpSTest {
	@SuppressWarnings("unused")
	private final String		conClassName	= "SOSVfsFtpSTest";
	@SuppressWarnings("unused")
	private static Logger		logger			= Logger.getLogger(SOSVfsFtpSTest.class);
	private SOSFTPOptions		objOptions		= null;
	private ISOSVFSHandler		objVFS			= null;
	private ISOSVfsFileTransfer	ftpClient		= null;
	private final String				strTestFileName	= "text.junittest";
	private final String				strTestPathName	= "c:/temp/";
	@SuppressWarnings("unused")
	private final String				strAPrefix		= "~~";

	private final String strHostName4Test = "localhost";  // wilma.sos
//	private String strHostName4Test = "8of9.sos";  // wilma.sos

	public SOSVfsFtpSTest() {
		//
	}

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	@Before
	public void setUp() throws Exception {
		objOptions = new SOSFTPOptions();
		objOptions.protocol.Value(enuTransferTypes.ftps.Text());
		objVFS = VFSFactory.getHandler(objOptions.protocol.Value());
		ftpClient = (ISOSVfsFileTransfer) objVFS;
	}

	@After
	public void tearDown() throws Exception {
	}

	// @Test
	public void testSOSVfsFtpS() {
		fail("Not yet implemented");
	}

	@Test
	public void testOptionOperation() throws Exception {
		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::testOptionOperation";
		HashMap<String, String> objHsh = new HashMap<String, String>();
		objHsh.put("operation", "rename");
		objOptions = new SOSFTPOptions(objHsh);
		assertEquals("", "rename", objOptions.operation.Value());
	} // private void testOptionOperation

	@Test
	// (expected = java.lang.Exception.class)
	public void testConnect() throws Exception {
		SOSConnection2OptionsAlternate objConOpts4Target = objOptions.getConnectionOptions().Target();
		objConOpts4Target.host.Value(strHostName4Test);
		objVFS.Connect(objConOpts4Target);
		String strR = ftpClient.getReplyString();

		objOptions.user.Value("kb");
	}

	// // @Test
	public void testMkdirString() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testRmdirString() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testPassive() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testNListString() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testDoPWD() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testIsNotHiddenFile() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testNListStringBoolean() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testNList() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testNListBoolean() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testDirString() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testDirStringInt() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testDir() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testGetResponse() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testSize() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testGet() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testGetFileStringString() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testGetFileStringStringBoolean() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testPut() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testPutFileStringString() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testPutFileStringOutputStream() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testAppendFile() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testAscii() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testBinary() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testCd() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testDelete() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testLogin() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testChangeWorkingDirectory() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testDisconnect() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testGetReplyString() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testIsConnected() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testListNames() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testLogout() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testRename() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testGetHandler() {
		fail("Not yet implemented");
	}

	@Test
	public void testExecuteCommand() throws Exception {
		// objOptions.host.Value("8of9.sos");
		// objOptions.host.Value("wilma.sos");
		SOSConnection2OptionsAlternate objConOpts4Target = objOptions.getConnectionOptions().Target();
		objConOpts4Target.host.Value(strHostName4Test);
		objVFS.Connect(objConOpts4Target);
		String strR = ftpClient.getReplyString();
		objOptions.user.Value("kb");
		objOptions.password.Value("kb");
		objVFS.Authenticate(objOptions);
		objVFS.ExecuteCommand("SYST");
		objVFS.ExecuteCommand("FEAT");
		objVFS.ExecuteCommand("OPTS");
		objVFS.ExecuteCommand("OPTS UTF8 NLST");
		objVFS.ExecuteCommand("OPTS UTF-8 NLST");
		objVFS.ExecuteCommand("OPTS UTF8 OFF");
		objVFS.ExecuteCommand("OPTS UTF8 ON");
		// OPTS MLST Type;Size;Modify;UNIX.mode;UNIX.owner;UNIX.group;
		objVFS.ExecuteCommand("OPTS MLST Type;Size;Modify;UNIX.mode;UNIX.owner;UNIX.group;");
		objVFS.ExecuteCommand("MLST /Büttner.dat");
		objVFS.ExecuteCommand("OPTS UTF8 OFF");
		objVFS.ExecuteCommand("MLST /Büttner.dat");

		objVFS.ExecuteCommand("LIST");
		objVFS.ExecuteCommand("PORT 127,0,0,1,6,81");
		objVFS.ExecuteCommand("MLSD");
	}

	// // @Test
	public void testCreateScriptFile() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testGetExitCode() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testGetExitSignal() {
		fail("Not yet implemented");
	}

	@Test
	public void testAuthenticate() throws Exception {
		/**
		 * Test expects the fileZilla Server on (localhost)
		 */
		SOSConnection2OptionsAlternate objConOpts4Target = objOptions.getConnectionOptions().Target();
		objConOpts4Target.host.Value(strHostName4Test);
		objVFS.Connect(objConOpts4Target);
		String strR = ftpClient.getReplyString();
		if (strR.trim().length() <= 0) {
			strR = "xxxxx";
		}
		// Der ReplayCode wird immer mit 0A 0D am Ende geliefert. Ignorieren wir das 34 Using authentication type TLS
//		assertEquals("Connect message", "220 (vsFTPd 1.2.1)", strR.substring(0, strR.length() - 2));
		assertEquals("Connect message", "2", strR.substring(0, 1));
		objOptions.user.Value("kb");
		objOptions.password.Value("kb");
		objVFS.Authenticate(objOptions);
		strR = ftpClient.getReplyString();
		// char[] bteB = strR.toCharArray();
		// for (int i = 1; i <= bteB.length; i++) {
		// logger.debug(String.format("char %1$d = %2$s", i, (byte) (bteB[i])));
		// }
		assertEquals("Login message", "230 Logged on", strR.substring(0, strR.length() - 2));
		objVFS.CloseSession();
		strR = ftpClient.getReplyString();
		assertEquals("Login message", "221 Goodbye", strR.substring(0, strR.length() - 2));
		objVFS.CloseConnection();
	}

	// // @Test
	public void testCloseConnection() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testConnect1() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testConnectISOSConnectionOptions() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testConnectStringInt() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testCloseSession() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testOpenSession() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testFileExists() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testTransferMode() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testDeleteFile() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testGetFileString() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testGetFilePermissions() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testGetFileSize() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testIsDirectory() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testPutFileFile() {
		fail("Not yet implemented");
	}

	private void CreateTestFile() {
		JSFile objFile = new JSFile(strTestPathName + strTestFileName);
//		objFile.deleteOnExit();
		try {
			objFile.WriteLine("Das ist eine Testdatei. Weiter nichts");
			objFile.close();
		}
		catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@Test
	public void testPutFileString() throws Exception {
		CreateTestFile();
		/**
		 * Test expects the fileZilla Server on (localhost)
		 */
		SOSConnection2OptionsAlternate objConOpts4Target = objOptions.getConnectionOptions().Target();
		objConOpts4Target.host.Value(strHostName4Test);
		objVFS.Connect(objConOpts4Target);
		String strR = ftpClient.getReplyString();
		if (strR.trim().length() <= 0) {
			strR = "xxxxx";
		}
		// Der ReplyCode wird immer mit 0A 0D am Ende geliefert. Ignorieren wir das
		assertEquals("Connect message", "2", strR.substring(0, 1));
		objOptions.user.Value("kb");
		objOptions.password.Value("kb");
		objVFS.Authenticate(objOptions);
		strR = ftpClient.getReplyString();
		assertEquals("Login message", "2", strR.substring(0, 1));
		// objOptions.file_path.Value("c:/temp/test.txt");

		ftpClient.putFile(strTestPathName + strTestFileName, strTestFileName);
		objVFS.CloseSession();
		strR = ftpClient.getReplyString();
		assertEquals("Login message", "221 Goodbye", strR.substring(0, strR.length() - 2));
		objVFS.CloseConnection();
	}

	// // @Test
	public void testSetFilePermissions() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testMkdirSOSFolderName() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testRmdirSOSFolderName() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testGetConnection() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testGetSession() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testDirSOSFolderName() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testGetStdErr() {
		fail("Not yet implemented");
	}

	// // @Test
	public void testGetStdOut() {
		fail("Not yet implemented");
	}

	// @Test
	public void testRemoteIsWindowsShell() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetInputStream() {
	}
}
