package com.sos.VirtualFileSystem.Factory;
import java.io.File;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;

import org.apache.log4j.Logger;

import com.sos.JSHelper.Exceptions.JobSchedulerException;
import com.sos.JSHelper.Options.SOSOptionTransferType;
import com.sos.VirtualFileSystem.FTPS.SOSVfsFtpS;
import com.sos.VirtualFileSystem.HTTP.SOSVfsHTTP;
import com.sos.VirtualFileSystem.Interfaces.ISOSAuthenticationOptions;
import com.sos.VirtualFileSystem.Interfaces.ISOSVFSHandler;
import com.sos.VirtualFileSystem.JCIFS.SOSVfsJCIFS;
import com.sos.VirtualFileSystem.Options.SOSConnection2OptionsAlternate;
import com.sos.VirtualFileSystem.Options.SOSFTPOptions;
import com.sos.VirtualFileSystem.WebDAV.SOSVfsWebDAV;
import com.sos.VirtualFileSystem.common.SOSVfsConstants;
import com.sos.VirtualFileSystem.common.SOSVfsMessageCodes;
import com.sos.VirtualFileSystem.local.SOSVfsLocal;
import com.sos.VirtualFileSystem.zip.SOSVfsZip;
import com.sos.i18n.Msg;
import com.sos.i18n.Msg.BundleBaseName;
import com.sos.i18n.annotation.I18NMessage;
import com.sos.i18n.annotation.I18NMessages;
import com.sos.i18n.annotation.I18NResourceBundle;

/**
* \class VFSFactory
*
* \brief VFSFactory -
*
* \details
*
* \section VFSFactory.java_intro_sec Introduction
*
* \section VFSFactory.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* @version $Id$21.05.2010
* \see reference
*
* Created on 21.05.2010 12:44:25
 */
/** 
 * @author KB
 *
 */
@I18NResourceBundle(baseName = "SOSVirtualFileSystem", defaultLocale = "en") public class VFSFactory extends SOSVfsMessageCodes {
	private final static String						conClassName			= "VFSFactory";
	// private static Logger logger = Logger.getLogger(VFSFactory.class);
	private static Logger							logger					= Logger.getRootLogger();
	protected static Msg							objMsg					= new Msg(new BundleBaseName("SOSVirtualFileSystem"));
	private static SOSConnection2OptionsAlternate	objConnectionOptions	= null;
//	public static String							sFTPHandlerClassName	= "com.sos.VirtualFileSystem.SFTP.SOSVfsSFtp";
	// TODO change default data provider for sftp to com.sos.VirtualFileSystem.SFTP.SOSVfsSFtpFileJCraft
	public static String							sFTPHandlerClassName	= "com.sos.VirtualFileSystem.SFTP.SOSVfsSFtpJCraft";
	@I18NMessages(value = { @I18NMessage("%1$s returns instance of %2$s"), //
			@I18NMessage(value = "%1$s returns instance of %2$s", //
			locale = "en_UK", //
			explanation = "%1$s returns instance of %2$s" //
			), //
			@I18NMessage(value = "%1$s liefert eine Instanz der Klasse %2$s", //
			locale = "de", //
			explanation = "%1$s returns instance of %2$s" //
			), //
			@I18NMessage(value = "%1$s returns instance of %2$s", locale = "es", //
			explanation = "%1$s returns instance of %2$s" //
			), //
			@I18NMessage(value = "%1$s returns instance of %2$s", locale = "fr", //
			explanation = "%1$s returns instance of %2$s" //
			), //
			@I18NMessage(value = "%1$s returns instance of %2$s", locale = "it", //
			explanation = "%1$s returns instance of %2$s" //
			) //
	}, msgnum = "SOSVfs-D-0201", msgurl = "SOSVfs-D-0201")/*!
															 * \var SOSVfs_D_0201
															 * \brief %1$s returns instance of %2$s
															 */
/*!
* \var SOSVfs_E_0203
* \brief Msgundefined Virtual File System requested: %1$s
*/
	private static String							strParentLoggerName		= "";
	private static ClassLoader						classLoader				= null;

	/**
	 *
	 * \brief VFSFactory
	 *
	 * \details
	 *
	 */
	public VFSFactory() {
		super(SOSVfsConstants.strBundleBaseName);
		//
	}

	public static void setParentLogger(final String pstrParentLoggerName) {
		strParentLoggerName = pstrParentLoggerName;
	}

	public static String getLoggerName() {
		String strT = SOSVfsConstants.strVFSLoggerName;
		if (strParentLoggerName.length() > 0) {
			strT = strParentLoggerName + "." + strT;
		}
		return strT;
	}

	public static ISOSVFSHandler getHandler(final SOSOptionTransferType.enuTransferTypes penuTType) throws Exception {
		return getHandler(penuTType.Text());
	}

	public static ISOSVFSHandler getHandler(String pstrWhatURL) throws Exception {
		// TODO eigener Datentyp SOSVirtualFileHandlerSystemType
		final String conMethodName = conClassName + "::getHandler";
		boolean authenticate = true;
		ISOSVFSHandler objC = null;
		URL objURL = null;
		// TODO Type of filesystem as an enumeration
		String strWhatSystem = pstrWhatURL;
		// Possible Elements of an URL are:
		//
		// http://hans:geheim@www.example.org:80/demo/example.cgi?land=de&stadt=aa#geschichte
		// |        |     | | | | | |
		// |        |     | host | url-path searchpart fragment
		// |        |   password port
		// |       user
		// protocol
		/**
		 *  The url object of java provides URLs with a single slash like file:/path/to/file (not file://path/to/file)
		 *  therefore the presence of "//" is not significant to test an URL
		 */
		//		int i = pstrWhatURL.indexOf("//");
		//		if (i > 0) {
		//			if (pstrWhatURL.startsWith("local:") == true) {
		//				pstrWhatURL = pstrWhatURL.replace("local:", "file:");
		//			}
		//			objURL = new URL(pstrWhatURL);
		//			strWhatSystem = pstrWhatURL.substring(0, i);
		//			if (strWhatSystem.equalsIgnoreCase(objURL.getProtocol())) {
		//				// nothing to do
		//			}
		//			strWhatSystem = objURL.getProtocol();
		//			logger.info(objURL.getFile());
		//			logger.info(objURL.getPath());
		//		}
		if (pstrWhatURL.startsWith("local:") == true) {
			pstrWhatURL = pstrWhatURL.replace("local:", "file:");
		}
		try {
			objURL = new URL(pstrWhatURL);
			strWhatSystem = objURL.getProtocol();
			logger.info(objURL.getFile());
			logger.info(objURL.getPath());
		}
		catch (MalformedURLException e) {
		}
		classLoader = Thread.currentThread().getContextClassLoader();
		if (strWhatSystem.equalsIgnoreCase(SOSOptionTransferType.enuTransferTypes.ssh2.Text())) {
			// TODO über late binding laden, damit es auch als Option verwendet werden kann
			// com.sos.VirtualFileSystem.SSH.SOSSSH2TriLeadImpl
			// objC = new SOSSSH2TriLeadImpl();
			// logger.debug(conMethodName + " returns instance of " + SOSSSH2TriLeadImpl.class.toString());
			// com.sos.VirtualFileSystem.SSH.SOSSSH2GanymedImpl
			// objC = new SOSSSH2GanymedImpl();
			// logger.debug(conMethodName + " returns instance of " + SOSSSH2GanymedImpl.class.toString());
			// Class objA = classLoader.loadClass("com.sos.VirtualFileSystem.SSH.SOSSSH2GanymedImpl");
			Class objA = classLoader.loadClass("com.sos.VirtualFileSystem.SSH.SOSSSH2TriLeadImpl");
			ISOSVFSHandler objD = (ISOSVFSHandler) objA.newInstance();
			logger.trace(SOSVfs_D_0201.params(conMethodName, objD.toString()));
			if (objD instanceof ISOSVFSHandler) {
				logger.trace("ISOSVFSHandler is part of class   ...  " + objA.toString());
				objC = objD;
			}
			else {
				logger.error("ISOSVFSHandler not part of class");
			}
		}
		if (strWhatSystem.equalsIgnoreCase(SOSOptionTransferType.enuTransferTypes.ftp.Text())) {
			//  ftp://<user>:<password>@<host>:<port>/<url-path>;type=<typecode>
			// "com.sos.VirtualFileSystem.FTP.SOSVfsFtp"
			objC = getDynamicVFSHandler("com.sos.VirtualFileSystem.FTP.SOSVfsFtp2");
			//			objC = new SOSVfsFtp();
			//			logger.debug(String.format(objMsg.getMsg(SOSVfs_D_0201), conMethodName, SOSVfsFtp.class.toString()));
		}
		if (strWhatSystem.equalsIgnoreCase(SOSOptionTransferType.enuTransferTypes.ftps.Text())) {
			objC = new SOSVfsFtpS();
			logger.trace(SOSVfs_D_0201.params(conMethodName, SOSVfsFtpS.class.toString()));
		}
		if (strWhatSystem.equalsIgnoreCase(SOSOptionTransferType.enuTransferTypes.sftp.Text())) {
			//			objC = getDynamicVFSHandler("com.sos.VirtualFileSystem.SFTP.SOSVfsSFtpJCraft");
			objC = getDynamicVFSHandler(sFTPHandlerClassName);
		}
		if (strWhatSystem.equalsIgnoreCase(SOSOptionTransferType.enuTransferTypes.local.Text())
				|| strWhatSystem.equalsIgnoreCase(SOSOptionTransferType.enuTransferTypes.file.Text())) {
			objC = new SOSVfsLocal();
			logger.trace(SOSVfs_D_0201.params(conMethodName, SOSVfsLocal.class.toString()));
			authenticate = false;
		}
		if (strWhatSystem.equalsIgnoreCase(SOSOptionTransferType.enuTransferTypes.zip.Text())) {
			objC = new SOSVfsZip();
			logger.trace(SOSVfs_D_0201.params(conMethodName, SOSVfsZip.class.toString()));
		}
		if (strWhatSystem.equalsIgnoreCase(SOSOptionTransferType.enuTransferTypes.webdav.Text())) {
			objC = new SOSVfsWebDAV();
			logger.trace(SOSVfs_D_0201.params(conMethodName, SOSVfsWebDAV.class.toString()));
		}
		if (strWhatSystem.equalsIgnoreCase(SOSOptionTransferType.enuTransferTypes.http.Text())) {
			objC = new SOSVfsHTTP();
			logger.trace(SOSVfs_D_0201.params(conMethodName, SOSVfsHTTP.class.toString()));
		}
		if (strWhatSystem.equalsIgnoreCase(SOSOptionTransferType.enuTransferTypes.smb.Text())) {
			objC = new SOSVfsJCIFS();
			logger.trace(SOSVfs_D_0201.params(conMethodName, SOSVfsJCIFS.class.toString()));
		}
		if (objC == null) {
			throw new Exception(SOSVfs_E_0203.params(strWhatSystem));
		}
		if (objURL != null && authenticate) {
			String strHost = objURL.getHost();
			if (strHost != null) {
				int intPort = objURL.getPort();
				objC.Connect(strHost, intPort);
				ISOSAuthenticationOptions objAO = new SOSFTPOptions();
				String strUserInfo = objURL.getUserInfo();
				logger.info("User-Info = " + strUserInfo);
				String[] strUI = strUserInfo.split(":");
				objAO.getUser().Value(strUI[0]);
				objAO.getPassword().Value("");
				if (strUI.length > 1)
					objAO.getPassword().Value(strUI[1]);
				objC.Authenticate(objAO);
				objAO = null;
				logger.info("objURL.getAuthority() : " + objURL.getAuthority());
				logger.info("objURL.getFile()" + objURL.getFile());
			}
		}
		return objC;
	}

	public static void setConnectionOptions(final SOSConnection2OptionsAlternate pobjConnectionOptions) {
		@SuppressWarnings("unused") final String conMethodName = conClassName + "::setConnectionOptions";
		objConnectionOptions = pobjConnectionOptions;
	} // private VFSFactory setConnectionOptions

	/**
	 * Load a specified Class of type ISOSVFSHandlerInterface for the logical data provider
	 *
	 * @param pstrLoadClassNameDefault
	 * @return
	 */
	private static ISOSVFSHandler getDynamicVFSHandler(final String pstrLoadClassNameDefault) {
		@SuppressWarnings("unused") final String conMethodName = conClassName + "::getDynamicVFSHandler";
		String strLoadClassName = pstrLoadClassNameDefault;
		if (objConnectionOptions != null && objConnectionOptions.loadClassName.isDirty() == true) {
			strLoadClassName = objConnectionOptions.loadClassName.Value();
			if (strLoadClassName.length() <= 0) {
				strLoadClassName = pstrLoadClassNameDefault;
			}
			else {
				logger.trace(String.format("loadClassName changed from '%1$s' to '%2$s'", pstrLoadClassNameDefault, strLoadClassName));
			}
		}
		ISOSVFSHandler objC = null;
		try {
			Class objA = null;
			if (objConnectionOptions != null && objConnectionOptions.javaClassPath.isDirty()) {
				String[] strJars = objConnectionOptions.javaClassPath.Value().split(";");
				for (String strJarFileName : strJars) {
					File objF = new File(strJarFileName);
					if (objF.isFile() && objF.canExecute()) {
						addJarsToClassPath(Thread.currentThread().getContextClassLoader(), new File[] { objF });
					}
					else {
						throw new JobSchedulerException(String.format("ClasspathElement '%1$s' not found or not accessible", strJarFileName));
					}
				}
			}
			objA = classLoader.loadClass(strLoadClassName);
			objC = (ISOSVFSHandler) objA.newInstance();
			if (objC instanceof ISOSVFSHandler) {
				logger.trace("ISOSVFSHandler is part of class   ...  " + objA.toString());
			}
			else {
				logger.error("ISOSVFSHandler not part of class" + objA.toString());
			}
		}
		catch (Exception e) {
			e.printStackTrace();
			throw new JobSchedulerException(String.format("Class with Name '%1$s' not found and not loaded", strLoadClassName), e);
		}
		return objC;
	} // private ISOSVFSHandler getDynamicVFSHandler

	private static void addJarsToClassPath(final ClassLoader classLoader1, final File[] jars) {
		if (classLoader1 instanceof URLClassLoader) {
			try {
				Method addUrlMethod = URLClassLoader.class.getDeclaredMethod("addURL", new Class[] { URL.class });
				if (null != addUrlMethod) {
					addUrlMethod.setAccessible(true);
					for (File jar : jars) {
						try {
							addUrlMethod.invoke(classLoader1, jar.toURI().toURL());
						}
						catch (Exception e) {
							e.printStackTrace();
						}
					}
				}
			}
			catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
}
