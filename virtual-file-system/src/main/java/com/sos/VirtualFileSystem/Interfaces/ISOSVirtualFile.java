package com.sos.VirtualFileSystem.Interfaces;

import java.io.File;
import java.io.InputStream;
import java.io.OutputStream;

/** \class ISOSVirtualFile
 *
 * \brief ISOSVirtualFile -
 *
 * \details
 *
 *
 * \code .... code goes here ... \endcode
 *
 * <p style="text-align:center">
 * <br />
 * --------------------------------------------------------------------------- <br />
 * APL/Software GmbH - Berlin <br />
 * ##### generated by ClaviusXPress (http://www.sos-berlin.com) ######### <br />
 * ---------------------------------------------------------------------------
 * </p>
 * \author KB
 * 
 * @version $Id$21.05.2010 \see reference
 *
 *          Created on 21.05.2010 11:01:32 */

/** @author KB */
public interface ISOSVirtualFile {

    // public ISOSVirtualFile (final String pstrFileName);
    /** \brief deleteFile
     *
     * \details
     *
     * \return void
     *
     * @param pstrCommandFile
     * @throws Exception */
    public void deleteFile() throws Exception;

    /** \brief putFile
     *
     * \details
     *
     * \return void
     *
     * @param pfleCommandFile
     * @throws Exception */
    public void putFile(final File fleFile) throws Exception;

    public void putFile(final ISOSVirtualFile pobjVirtualFile) throws Exception;

    /** \brief putFile
     *
     * \details
     *
     * \return void
     *
     * @param strFileName
     * @throws Exception */
    public void putFile(final String strFileName) throws Exception;

    /** \brief getFile
     *
     * \details
     *
     * \return ISOSVirtualFile
     *
     * @param pstrFileName
     * @return
     * @throws Exception */
    public ISOSVirtualFile getFile() throws Exception;

    /** \brief getFileSize
     *
     * \details
     *
     * \return long
     *
     * @param pstrFileName
     * @return
     * @throws Exception */
    public long getFileSize();

    /** \brief getFilePermissions
     *
     * \details
     *
     * \return Integer
     *
     * @param pstrFileName
     * @return
     * @throws Exception */
    // TODO create Class 'SOSFilePermissions' for FilePermissions.
    public Integer getFilePermissions() throws Exception;

    public String getModificationTime();

    public void setFilePermissions(final Integer pintNewPermission) throws Exception;

    public boolean FileExists() throws Exception;

    public boolean isDirectory() throws Exception;

    public boolean notExists();

    public boolean isEmptyFile();

    public OutputStream getFileOutputStream();

    public OutputStream getFileAppendStream();

    public void setModeAppend(final boolean pflgModeAppend);

    public void setModeRestart(final boolean pflgModeRestart);

    public void setModeOverwrite(final boolean pflgModeOverwrite);

    public InputStream getFileInputStream();

    public boolean delete();

    public void rename(final String pstrNewFileName);

    public String getParentVfs();

    public ISOSVirtualFile getParentVfsFile();

    public ISOSVfsFileTransfer getHandler();

    public void setHandler(final ISOSVfsFileTransfer pobjVFSHandler);

    public String getName();

    /** \brief write - Writes len bytes from the specified byte array
     *
     * \details Writes len bytes from the specified byte array starting at
     * offset off to this file. \return void
     *
     * @param bteBuffer
     * @param intOffset
     * @param intLength */
    public void write(byte[] bteBuffer, int intOffset, int intLength);

    public void write(byte[] bteBuffer);

    public int read(byte[] bteBuffer);

    public int read(byte[] bteBuffer, int intOffset, int intLength);

    public void close();

    /** \brief flush - Flushes this file buffer
     *
     * \details Flushes this file buffer and forces any buffered output bytes to
     * be written out. \return void */
    public void flush();

    /** \brief closeInput
     *
     * \details
     *
     * \return void */
    public void closeInput();

    /** \brief closeOutput
     *
     * \details
     *
     * \return void */
    public void closeOutput();

    public String File2String();

    public void String2File(final String pstrContent);

    public long getModificationDateTime();

    public long setModificationDateTime(long pdteDateTime);

}
