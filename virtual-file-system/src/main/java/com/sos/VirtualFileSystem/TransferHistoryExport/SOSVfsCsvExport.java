package com.sos.VirtualFileSystem.TransferHistoryExport;

import java.io.IOException;
import java.lang.management.ManagementFactory;

import org.apache.log4j.Logger;

import com.sos.JSHelper.Exceptions.JobSchedulerException;
import com.sos.JSHelper.io.Files.JSCsvFile;
import com.sos.VirtualFileSystem.Interfaces.IJadeTransferDetailHistoryData;
import com.sos.VirtualFileSystem.Interfaces.IJadeTransferHistoryData;
import com.sos.VirtualFileSystem.Interfaces.ISOSTransferHistory;
import com.sos.VirtualFileSystem.Options.SOSFTPOptions;
import com.sos.VirtualFileSystem.common.SOSVfsMessageCodes;

/** \class SOSVfsCsvExport
 * 
 * \brief SOSVfsCsvExport -
 * 
 * \details
 *
 *
 * \code .... code goes here ... \endcode
 *
 * <p style="text-align:center">
 * <br />
 * --------------------------------------------------------------------------- <br />
 * APL/Software GmbH - Berlin <br />
 * ##### generated by ClaviusXPress (http://www.sos-berlin.com) ######### <br />
 * ---------------------------------------------------------------------------
 * </p>
 * \author KB \version $Id$ \see reference
 *
 * Created on 18.10.2011 13:04:09 */
/** @author KB */
public class SOSVfsCsvExport extends SOSVfsMessageCodes implements ISOSTransferHistory {

    @SuppressWarnings("unused")
    private final String conClassName = "SOSVfsCsvExport";
    private static final String conSVNVersion = "$Id$";
    private static final Logger logger = Logger.getLogger(SOSVfsCsvExport.class);
    private SOSFTPOptions objOptions = null;
    private JSCsvFile objCSVFile = null;
    private final String strCsvFileName = "c:/temp/jade-csv.csv";

    public SOSVfsCsvExport() {
        //
    }

    /** \brief doExportDetail
     * 
     * \details
     *
     * \return */
    @Override
    public void doTransferDetail() {
        @SuppressWarnings("unused")
        final String conMethodName = conClassName + "::doExportDetail";
        if (objCSVFile == null) {
            objCSVFile = new JSCsvFile(strCsvFileName);
            logger.debug(SOSVfs_D_259.params(strCsvFileName));
        }
        // String mandator = objOptions.mandator.Value(); // 0-
        String pid = ManagementFactory.getRuntimeMXBean().getName();
        String strA[] = pid.split("@");
        pid = strA[0];
        // String operation = objOptions.operation.Value(); // 4- operation:
        // send|receive
        // SOSConnection2OptionsAlternate objS =
        // objOptions.getConnectionOptions().Source();
        // String localhost = objS.host.Value(); // 5- local host
        // String localhost_ip = objS.host.getHostAdress(); // 5-1- local host
        // IP adresse
        // String local_user = System.getProperty("user.name"); // 6- local user
        // SOSConnection2OptionsAlternate objT =
        // objOptions.getConnectionOptions().Target();
        // String remote_host = objT.host.Value(); // 7- remote host
        // String remote_host_ip = objT.host.getHostAdress(); // 7- remote host
        // IP
        // String remote_user = objT.user.Value(); // 8- remote host user
        // String protocol = objT.protocol.Value(); // 9- protocol
        // Integer port = objT.port.value(); // 10- port
        // String local_dir = objOptions.local_dir.Value();
        // String remote_dir = new
        // File(this.strTargetFileName).getAbsolutePath();
        // String local_filename = this.strSourceFileName; // 13- file name
        // String remote_filename = this.strTargetFileName; // 14- name
        // if (isEmpty(remote_filename)) {
        // remote_filename = "n.a.";
        // }
        // String fileSize = String.valueOf(this.lngFileSize);
        // String md5 = this.strMD5Hash;
        // String status = this.eTransferStatus.name();
        String last_error_message = "";
        // last_error_message = clearCRLF(((getLogger().getError() != null &&
        // getLogger().getError().length() > 0) ? getLogger().getError()
        // : getLogger().getWarning())); // 15- last_error=|warn message
        // last_error_message =
        // normalizedPassword(sosString.parseToString(last_error_message));
        // String log_filename = objOptions.log_filename.Value();
        // private String historyFields =
        // "guid;mandator;transfer_timestamp;pid;ppid;operation;
        // localhost;localhost_ip;local_user;remote_host;remote_host_ip;remote_user;
        // protocol;port;local_dir;remote_dir;local_filename;remote_filename;file_size;md5;status;last_error_message;log_filename";
        // private String newHistoryFields =
        // "jump_host;jump_host_ip;jump_port;jump_protocol;jump_user";
        try {
            objCSVFile.AddCellValue(" ") // guid
            .AddCellValue(objOptions.mandator.Value()).AddCellValue(" ")
            // transfer_timestamp
            .AddCellValue(pid).AddCellValue("0")
            // ppid
            .AddCellValue(objOptions.operation.Value()).AddCellValue(objOptions.Source().host.Value()).AddCellValue(
                    objOptions.Source().host.getHostAdress()).AddCellValue(objOptions.Source().user.Value()).AddCellValue(
                    objOptions.Target().host.Value()).AddCellValue(objOptions.Target().host.getHostAdress()).AddCellValue(
                    objOptions.Target().user.Value()).AddCellValue(objOptions.protocol.Value()).AddCellValue(objOptions.port.Value()).AddCellValue(
                    objOptions.SourceDir.Value()).AddCellValue(objOptions.TargetDir.Value()).AddCellValue(" ")
            // local_filename
            .AddCellValue(" ")
            // remote_filename
            .AddCellValue(" ")
            // file_size
            .AddCellValue(" ")
            // md5
            .AddCellValue(" ")
            // status
            .AddCellValue(last_error_message).AddCellValue(objOptions.log_filename.Value()).AddCellValue(" ")
            // jump_host
            .AddCellValue(" ")
            // jump_host_ip
            .AddCellValue(" ")
            // jump_port
            .AddCellValue(" ")
            // jump_protocol
            .AddCellValue(" ")
            // jump_user
            .NewLine();
        } catch (Exception e) {
            logger.error(e.getLocalizedMessage());
            throw new JobSchedulerException(SOSVfs_E_260.params(conMethodName), e);
        }
    }

    /** \brief doExportSummary
     * 
     * \details
     *
     * \return */
    @Override
    public void doTransferSummary() {
        // TODO Auto-generated method stub
        return;
    }

    /** \brief setData
     * 
     * \details
     *
     * \return
     *
     * @param pobjTransferHistoryData */
    @Override
    public void setData(final SOSFTPOptions pobjTransferHistoryData) {
        objOptions = pobjTransferHistoryData;
    }

    /** \brief close
     * 
     * \details
     *
     * \return */
    @Override
    public void close() {
        if (objCSVFile != null) {
            try {
                objCSVFile.close();
            } catch (IOException e) {
                logger.error(e.getLocalizedMessage());
            }
            objCSVFile = null;
        }
    }

    @Override
    public void setJadeTransferData(final IJadeTransferHistoryData jadeTransferHistoryExportData) {
        // TODO Auto-generated method stub
    }

    @Override
    public void setJadeTransferDetailData(final IJadeTransferDetailHistoryData jadeTransferDetailHistoryExportData) {
        // TODO Auto-generated method stub
    }

    @Override
    public String getFileName() {
        // TODO Auto-generated method stub
        return null;
    }
}
