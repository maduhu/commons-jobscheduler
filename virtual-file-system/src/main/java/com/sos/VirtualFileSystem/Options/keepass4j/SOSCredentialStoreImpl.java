/**
 * 
 */
package com.sos.VirtualFileSystem.Options.keepass4j;
/**
 * @author KB
 *
 */
import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Date;
import java.util.HashMap;

import org.apache.log4j.Logger;

import com.sos.JSHelper.Annotations.JSOptionClass;
import com.sos.JSHelper.Basics.JSToolBox;
import com.sos.JSHelper.Exceptions.JobSchedulerException;
import com.sos.JSHelper.Options.SOSOptionElement;
import com.sos.VirtualFileSystem.CredentialStore.KeePass.pl.sind.keepass.kdb.KeePassDataBase;
import com.sos.VirtualFileSystem.CredentialStore.KeePass.pl.sind.keepass.kdb.KeePassDataBaseManager;
import com.sos.VirtualFileSystem.CredentialStore.KeePass.pl.sind.keepass.kdb.v1.Entry;
import com.sos.VirtualFileSystem.CredentialStore.KeePass.pl.sind.keepass.kdb.v1.KeePassDataBaseV1;
import com.sos.VirtualFileSystem.CredentialStore.exceptions.CredentialStoreEntryExpired;
import com.sos.VirtualFileSystem.CredentialStore.exceptions.CredentialStoreKeyNotFound;
import com.sos.VirtualFileSystem.Options.keepass4j.SOSCredentialStoreOptions;

/**
* \class SOSSSHJobOptions
*
* \brief SOSSSHJobOptions -
*
* \details
*
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* @version $Id: SOSSSHJobOptions.java 23776 2014-04-11 13:46:50Z kb $16.05.2010
* \see reference
*
* Created on 16.05.2010 20:52:28
 */
/**
 * @author KB
 *
 */
public class SOSCredentialStoreImpl extends JSToolBox {
	/**
	 * 
	 */
	private ISOSCredentialStoreOptionsBridge	objOptionsBridge	= null;

	public SOSCredentialStoreImpl(ISOSCredentialStoreOptionsBridge pobjOptionsBridge) {
		objOptionsBridge = pobjOptionsBridge;
	}
	@SuppressWarnings("unused") private static final long													serialVersionUID			= 2072083231341151442L;
	private final String																					conClassName				= this.getClass()
																																				.getSimpleName();
	@SuppressWarnings("unused") private static final String													conSVNVersion				= "$Id: SOSConnection2OptionsAlternate.java 25635 2014-06-05 12:54:56Z kb $";
	private static final Logger																				logger						= Logger.getLogger(SOSCredentialStoreImpl.class);
	@JSOptionClass(description = "", name = "SOSCredentialStoreOptions") private SOSCredentialStoreOptions	objCredentialStoreOptions	= null;
	private KeePassDataBase																					keePassDb					= null;
	private KeePassDataBaseV1																				kdb1						= null;

	public void setChildClasses(final HashMap<String, String> pobjJSSettings, final String pstrPrefix) throws Exception {
		getCredentialStore().setAllOptions(pobjJSSettings, pstrPrefix);
	} // public SOSConnection2OptionsAlternate (HashMap JSSettings)

	public SOSCredentialStoreOptions getCredentialStore() {
		if (objCredentialStoreOptions == null) {
			objCredentialStoreOptions = new SOSCredentialStoreOptions();
		}
		checkCredentialStoreOptions();
		return objCredentialStoreOptions;
	}

	public SOSCredentialStoreOptions Options() {
		if (objCredentialStoreOptions == null) {
			objCredentialStoreOptions = new SOSCredentialStoreOptions();
		}
		return objCredentialStoreOptions;
	}

	public void checkCredentialStoreOptions() {
		if (Options().use_credential_Store.isTrue()) {
			logger.trace("entering checkCredentialStoreOptions ");
			objCredentialStoreOptions.CredentialStore_FileName.CheckMandatory(true);
			objCredentialStoreOptions.CredentialStore_KeyPath.CheckMandatory(true);
			String strPassword = null;
			File fleKeyFile = null;
			if (objCredentialStoreOptions.CredentialStore_KeyFileName.isDirty()) {
				fleKeyFile = new File(objCredentialStoreOptions.CredentialStore_KeyFileName.Value());
			}
			if (objCredentialStoreOptions.CredentialStore_password.isDirty()) {
				strPassword = objCredentialStoreOptions.CredentialStore_password.Value();
			}
			File fleKeePassDataBase = new File(objCredentialStoreOptions.CredentialStore_FileName.Value());
			try {
				// TODO keePassDB als Pool um evtl. mehrfachladen zu vermeiden.
				keePassDb = KeePassDataBaseManager.openDataBase(fleKeePassDataBase, fleKeyFile, strPassword);
			}
			catch (Exception e) {
				e.printStackTrace();
				throw new JobSchedulerException(e);
			}
			kdb1 = (KeePassDataBaseV1) keePassDb;
			Entry objEntry = kdb1.getEntry(objCredentialStoreOptions.CredentialStore_KeyPath.Value());
			if (objEntry == null) {
				throw new CredentialStoreKeyNotFound(objCredentialStoreOptions);
			}
			Date objExpDate = objEntry.ExpirationDate();
			if (new Date().after(objExpDate)) {
				throw new CredentialStoreEntryExpired(objExpDate);
			}
			boolean flgHideValuesFromCredentialStore = false;
			if (objEntry.Url().length() > 0) {
				logger.trace(objEntry.Url());
				// Possible Elements of an URL are:
				//
				// http://hans:geheim@www.example.org:80/demo/example.cgi?land=de&stadt=aa#geschichte
				// |        |     |   |               |  |                  |                 |
				// |        |     |  host                | url-path        searchpart      fragment
				// |        |   password            port
				// |       user
				// protocol				
				//
				//  ftp://<user>:<password>@<host>:<port>/<url-path>;type=<typecode>
				// see http://docs.oracle.com/javase/7/docs/api/java/net/URL.html
				String strUrl = objEntry.Url(); // 
				try {
					URL objURL = new URL(strUrl);
					setIfNotDirty(objOptionsBridge.getHost(), objURL.getHost());
					String strPort = String.valueOf(objURL.getPort());
					if (isEmpty(strPort) || strPort.equals("-1")) {
						strPort = String.valueOf(objURL.getDefaultPort());
					}
					setIfNotDirty(objOptionsBridge.getPort(), strPort);
					setIfNotDirty(objOptionsBridge.getProtocol(), objURL.getProtocol());
					String strUserInfo = objURL.getUserInfo();
					String[] strU = strUserInfo.split(":");
					setIfNotDirty(objOptionsBridge.getUser(), strU[0]);
					if (strU.length > 1) {
						setIfNotDirty(objOptionsBridge.getPassword(), strU[1]);
					}
					String strAuthority = objURL.getAuthority();
					String[] strA = strAuthority.split("@"); // user:pw  host
				}
				catch (MalformedURLException e) {
					// not a valid url. ignore it, because it could be a host name only
				}
			}
			if (isNotEmpty(objEntry.UserName())) {
				objOptionsBridge.getUser().Value(objEntry.UserName());
				objOptionsBridge.getUser().setHideValue(flgHideValuesFromCredentialStore);
			}
			if (isNotEmpty(objEntry.Password())) {
				objOptionsBridge.getPassword().Value(objEntry.Password());
				objOptionsBridge.getPassword().setHideValue(flgHideValuesFromCredentialStore);
			}
			if (isNotEmpty(objEntry.Url())) {
				objOptionsBridge.getHost().Value(objEntry.Url());
				objOptionsBridge.getHost().setHideValue(flgHideValuesFromCredentialStore);
			}
			objEntry.ExpirationDate();
			//			
			if (objOptionsBridge.getHost().isNotDirty()) {
				objOptionsBridge.getHost().Value(objEntry.getUrl().toString());
			}
			//			assertEquals("note ", "-dburl=test -verbose=-2 -password=12345", objEntry.Notes());
			//			System.out.println("binary Description: " + objEntry.getBinaryDescription().getText());
			if (objCredentialStoreOptions.CredentialStore_ExportAttachment.isTrue()) {
				File fleO = objEntry.saveAttachmentAsFile(objCredentialStoreOptions.CredentialStore_ExportAttachment2FileName.Value());
				if (objCredentialStoreOptions.CredentialStore_DeleteExportedFileOnExit.isTrue()) {
					fleO.deleteOnExit();
				}
			}
			
			if (objCredentialStoreOptions.CredentialStore_ProcessNotesParams.isTrue()) {
				objOptionsBridge.CommandLineArgs(objEntry.getNotesText());
			}
		}
	}

	private void setIfNotDirty(final SOSOptionElement objOption, final String pstrValue) {
		if (objOption.isNotDirty() && isNotEmpty(pstrValue)) {
			logger.trace("setValue = " + pstrValue);
			objOption.Value(pstrValue);
		}
	}
}
