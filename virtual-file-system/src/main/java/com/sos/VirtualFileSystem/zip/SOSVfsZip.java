package com.sos.VirtualFileSystem.zip;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Enumeration;
import java.util.Locale;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.util.zip.ZipOutputStream;

import org.apache.log4j.Logger;

import com.sos.JSHelper.Basics.JSJobUtilities;
import com.sos.JSHelper.Exceptions.JobSchedulerException;
import com.sos.JSHelper.Options.SOSOptionTransferMode;
import com.sos.JSHelper.interfaces.ISOSConnectionOptions;
import com.sos.JSHelper.interfaces.ISOSDataProviderOptions;
import com.sos.JSHelper.io.Files.JSFile;
import com.sos.VirtualFileSystem.DataElements.SOSFileList;
import com.sos.VirtualFileSystem.DataElements.SOSFolderName;
import com.sos.VirtualFileSystem.Interfaces.ISOSAuthenticationOptions;
import com.sos.VirtualFileSystem.Interfaces.ISOSConnection;
import com.sos.VirtualFileSystem.Interfaces.ISOSSession;
import com.sos.VirtualFileSystem.Interfaces.ISOSShellOptions;
import com.sos.VirtualFileSystem.Interfaces.ISOSVFSHandler;
import com.sos.VirtualFileSystem.Interfaces.ISOSVfsFileTransfer;
import com.sos.VirtualFileSystem.Interfaces.ISOSVirtualFile;
import com.sos.VirtualFileSystem.Interfaces.ISOSVirtualFileSystem;
import com.sos.VirtualFileSystem.Interfaces.ISOSVirtualFolder;
import com.sos.VirtualFileSystem.Options.SOSConnection2OptionsAlternate;
import com.sos.VirtualFileSystem.common.SOSFileEntries;
import com.sos.VirtualFileSystem.common.SOSVfsBaseClass;
import com.sos.i18n.annotation.I18NResourceBundle;

/**
* \class SOSVfsZip
*
* \brief SOSVfsZip -
*
* \details
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* @version $Id$23.08.2010
* \see reference
*
* Created on 23.08.2010 17:53:03
 */
/**
 * @author KB
 *
 */
@I18NResourceBundle(baseName = "SOSVirtualFileSystem", defaultLocale = "en")
public class SOSVfsZip extends SOSVfsBaseClass implements ISOSVfsFileTransfer, ISOSVFSHandler, ISOSVirtualFileSystem, ISOSConnection {
	@SuppressWarnings("unused")
	private final String		conClassName			= "SOSVfsZip";
	private final Logger		logger					= Logger.getLogger(SOSVfsZip.class);
	@SuppressWarnings("unused")
	private final InputStream	objInputStream			= null;
	@SuppressWarnings("unused")
	private final OutputStream	objOutputStream			= null;
	private String				strReplyString			= "";
	private ZipFile				objWorkingDirectory		= null;
	public ZipOutputStream		objZipOutputStream		= null;
	private String				strZipArchiveName		= "";
	private String				strCurrentEntryName		= "";
	private SOSVfsZipFileEntry	objCurrentZipFileEntry	= null;

	public SOSVfsZip() {
		//
	}

	/**
	 * \brief appendFile
	 *
	 * \details
	 * Appends a File, which pathname is given as a String-Parameter, to another
	 * file, with name is given as string-parameter.
	 *
	 * \return the size of the file after append-operation
	 *
	 * @param localFile
	 * @param remoteFile
	 * @return
	 */
	// TODO appendFile with ISOSVirtualFile
	@Override
	public long appendFile(final String strSourceFileName, final String strTargetFileName) {
		JSFile objTargetFile = new JSFile(strTargetFileName);
		long lngFileSize = 0;
		try {
			lngFileSize = objTargetFile.AppendFile(strSourceFileName);
		}
		catch (Exception e) {
			String strM = SOSVfs_E_134.params("appendFile()");
			throw new JobSchedulerException(strM, e);
		}
		return lngFileSize;
	}

	/**
	 * \brief ascii
	 *
	 * \details
	 *
	 * \return
	 *
	 */
	@Override
	public void ascii() {
		// nothing to do
	}

	/**
	 * \brief binary
	 *
	 * \details
	 *
	 * \return
	 *
	 */
	@Override
	public void binary() {
		// nothing to do
	}

	/**
	 * \brief changeWorkingDirectory
	 *
	 * \details
	 *
	 * \return
	 *
	 * @param pathname
	 * @return
	 * @throws IOException
	 */
	@Override
	public boolean changeWorkingDirectory(final String pstrPathName) {
		boolean flgResult = true;
		try {
			if (objWorkingDirectory != null) {
				objWorkingDirectory.close();
			}
			strZipArchiveName = pstrPathName;
			JSFile objFile = new JSFile(pstrPathName);
			if (this.isTarget() == true) {
				if (objFile.exists()) {
					objFile.delete();
				}
				objZipOutputStream = new ZipOutputStream(new FileOutputStream(pstrPathName));
				flgResult = true;
				logger.debug(SOSVfs_D_200.params(pstrPathName, "write"));
			}
			else {
				if (objFile.exists()) {
					objWorkingDirectory = new ZipFile(objFile, ZipFile.OPEN_READ);
					flgResult = true;
					logger.debug(SOSVfs_D_200.params(pstrPathName, "read"));
				}
			}
		}
		catch (IOException e) {
			throw new JobSchedulerException(e);
		}
		return flgResult;
	}

	/**
	 * \brief delete
	 *
	 * \details
	 *
	 * \return
	 *
	 * @param pathname
	 * @throws IOException
	 */
	@Override
	public void delete(final String pathname) throws IOException {
		ZipEntry objZE = objWorkingDirectory.getEntry(pathname);
		throw new JSNotImplementedException();
		// objZE.delete();
	}

	private String getRealFileName(final String pstrPathname) {
		// TODO use objWorkingDirectory if it is not null to determine the Directory
		return pstrPathname;
	}

	/**
	 * \brief disconnect
	 *
	 * \details
	 *
	 * \return
	 *
	 * @throws IOException
	 */
	@Override
	public void disconnect() throws IOException {
		// nothing to do at all
	}

	/**
	 * \brief getFile
	 *
	 * \details
	 *
	 * \return
	 *
	 * @param remoteFile
	 * @param localFile
	 * @param append
	 * @return
	 * @throws Exception
	 */
	@Override
	public long getFile(final String pstrSourceFileName, final String pstrTargetFileName, final boolean append) throws Exception {
		long lngFileSize = 0;
		notImplemented();
		return lngFileSize;
	}

	/**
	 * \brief getFile
	 *
	 * \details
	 *
	 * \return
	 *
	 * @param remoteFile
	 * @param localFile
	 * @return
	 * @throws Exception
	 */
	@Override
	public long getFile(final String remoteFile, final String localFile) throws Exception {
		return 0;
	}

	public ISOSVirtualFolder getFolder() {
		// TODO implement VirtualFolder for ZIP
		ISOSVirtualFolder objV = null;
		return objV;
	}

	public ISOSVirtualFolder getFolder(final String pstrFolderName) {
		// TODO implement VirtualFolder for ZIP
		ISOSVirtualFolder objV = null;
		return objV;
	}

	@Override
	public Vector<ISOSVirtualFile> getFiles() {
		Vector<ISOSVirtualFile> vecFiles = new Vector<ISOSVirtualFile>();
		for (Enumeration<? extends ZipEntry> e = objWorkingDirectory.entries(); e.hasMoreElements();) {
			ZipEntry entry = e.nextElement();
			String strZipEntryName = entry.getName();
			SOSVfsZipFileEntry objEntry = new SOSVfsZipFileEntry(strZipEntryName);
			objEntry.setZipEntry(entry);
			logger.debug(SOSVfs_D_201.params(strZipEntryName));
			vecFiles.add(objEntry);
		}
		return vecFiles;
	}

	@Override
	public Vector<ISOSVirtualFile> getFiles(final String pstrFolderName) {
		changeWorkingDirectory(pstrFolderName);
		return getFiles();
	}

	/**
	 * \brief getHandler
	 *
	 * \details
	 *
	 * \return
	 *
	 * @return
	 */
	@Override
	public ISOSVFSHandler getHandler() {
		return this;
	}

	/**
	 * \brief getReplyString
	 *
	 * \details
	 *
	 * \return
	 *
	 * @return
	 */
	@Override
	public String getReplyString() {
		return strReplyString;
	}

	/**
	 * \brief isConnected
	 *
	 * \details
	 *
	 * \return
	 *
	 * @return
	 */
	@Override
	public boolean isConnected() {
		return true;
	}

	/**
	 * \brief listNames
	 *
	 * \details
	 *
	 * \return
	 *
	 * @param pathname
	 * @return
	 * @throws IOException
	 */
	@Override
	public String[] listNames(final String pathname) throws IOException {
		Vector<String> objV = nList(pathname);
		return objV.toArray(new String[objV.size()]);
	}

	/**
	 * \brief login
	 *
	 * \details
	 *
	 * \return
	 *
	 * @param strUserName
	 * @param strPassword
	 */
	@Override
	public void login(final String strUserName, final String strPassword) {
	}

	/**
	 * \brief logout
	 *
	 * \details
	 *
	 * \return
	 *
	 * @throws IOException
	 */
	@Override
	public void logout() throws IOException {
	}

	/**
	 * \brief mkdir
	 *
	 * \details
	 * Create a new (sub-)Folder inside the ZIP-File.
	 *
	 * \return
	 *
	 * @param pathname
	 * @throws IOException
	 */
	@Override
	public void mkdir(final String pathname) throws IOException {
		notImplemented();
		// new File(pathname).mkdir();
	}

	/**
	 * \brief nList
	 *
	 * \details
	 *
	 * \return
	 *
	 * @param pathname
	 * @return
	 */
	@Override
	public Vector<String> nList(final String pathname) {
		changeWorkingDirectory(pathname);
		Vector<String> objV = new Vector<String>();
		for (Enumeration<? extends ZipEntry> e = objWorkingDirectory.entries(); e.hasMoreElements();) {
			ZipEntry entry = e.nextElement();
			String strZipEntryName = entry.getName();
			logger.debug(SOSVfs_D_201.params(strZipEntryName));
			objV.add(strZipEntryName);
		}
		return objV;
	}

	/**
	 * \brief nList
	 *
	 * \details
	 *
	 * \return
	 *
	 * @param pathname
	 * @param flgRecurseSubFolder
	 * @return
	 */
	@Override
	public Vector<String> nList(final String pathname, final boolean flgRecurseSubFolder) {
		return nList(pathname);
	}

	/**
	 * \brief nList
	 *
	 * \details
	 *
	 * \return
	 *
	 * @param recursive
	 * @return
	 * @throws Exception
	 */
	@Override
	public Vector<String> nList(final boolean recursive) throws Exception {
		return nList();
	}

	/**
	 * \brief nList
	 *
	 * \details
	 *
	 * \return
	 *
	 * @return
	 * @throws Exception
	 */
	@Override
	public Vector<String> nList() throws Exception {
		notImplemented();
		return null;
	}

	/**
	 * \brief passive
	 *
	 * \details
	 *
	 * \return
	 *
	 * @return
	 */
	@Override
	public int passive() {
		return 0;
	}

	/**
	 * \brief put
	 *
	 * \details
	 *
	 * \return
	 *
	 * @param localFile
	 * @param remoteFile
	 */
	@Override
	public void put(final String localFile, final String remoteFile) {
	}

	/**
	 * \brief putFile
	 *
	 * \details
	 *
	 * \return
	 *
	 * @param localFile
	 * @param out
	 * @return
	 */
	@Override
	public long putFile(final String localFile, final OutputStream out) {
		return 0;
	}

	@Override
	public void putFile(final ISOSVirtualFile objVirtualFile) {
		if (objZipOutputStream == null) {
			throw new JobSchedulerException(SOSVfs_E_202.get());
		}

		String strName = objVirtualFile.getName();
		strName = new File(strName).getAbsolutePath();
		if (strName.startsWith("c:") == true) {
			strName = strName.substring(3);
		}
		@SuppressWarnings("unused")
		SOSVfsZipFileEntry objVF = (SOSVfsZipFileEntry) this.getFileHandle(strName);

		InputStream objFI = objVirtualFile.getFileInputStream();

		// TODO BufferSize as Option?
		int lngBufferSize = 1024;
		byte[] buffer = new byte[lngBufferSize];
		int intBytesTransferred;
		long totalBytes = 0;
		try {
			synchronized (this) {
				while ((intBytesTransferred = objFI.read(buffer)) != -1) {
					objZipOutputStream.write(buffer, 0, intBytesTransferred);
					totalBytes += intBytesTransferred;
				}
				objFI.close();
				// objZipOutputStream.flush();
				// objZipOutputStream.finish();
				objZipOutputStream.closeEntry();
				logger.debug(SOSVfs_D_203.params(objVirtualFile.getName(), strZipArchiveName, totalBytes));
			}
		}
		catch (Exception e) {
			throw new JobSchedulerException(SOSVfs_E_130.params("putFile()"), e);
		}
		finally {
		}
	}

	/**
	 * \brief putFile
	 *
	 * \details
	 *
	 * \return
	 *
	 * @param localFile
	 * @param remoteFile
	 * @return
	 * @throws Exception
	 */
	@Override
	public long putFile(final String localFile, final String remoteFile) throws Exception {
		return 0;
	}

	/**
	 * \brief getConnection
	 *
	 * \details
	 *
	 * \return
	 *
	 * @return
	 */
	@Override
	public ISOSConnection getConnection() {
		return null;
	}

	/**
	 * \brief getSession
	 *
	 * \details
	 *
	 * \return
	 *
	 * @return
	 */
	@Override
	public ISOSSession getSession() {
		return null;
	}

	/**
	 * \brief mkdir
	 *
	 * \details
	 *
	 * \return
	 *
	 * @param pobjFolderName
	 * @return
	 * @throws IOException
	 */
	@Override
	public ISOSVirtualFolder mkdir(final SOSFolderName pobjFolderName) throws IOException {
		notImplemented();
		new File(pobjFolderName.Value()).mkdir();
		return null;
	}

	/**
	 * \brief rmdir
	 *
	 * \details
	 *
	 * \return
	 *
	 * @param pobjFolderName
	 * @return
	 * @throws IOException
	 */
	@Override
	public boolean rmdir(final SOSFolderName pobjFolderName) throws IOException {
		notImplemented();
		new File(pobjFolderName.Value()).delete();
		return true;
	}

	/**
	 * \brief dir
	 *
	 * \details
	 *
	 * \return
	 *
	 * @param pobjFolderName
	 * @return
	 */
	@Override
	public SOSFileList dir(final SOSFolderName pobjFolderName) {

		String[] strEntryNames = getFilelist("", ".*", 1, true);
		SOSFileList objFL = new SOSFileList();
		objFL.add(strEntryNames, "");
		return objFL;
	}

	/**
	 * \brief dir
	 *
	 * \details
	 *
	 * \return
	 *
	 * @param pathname
	 * @param flag
	 * @return
	 */
	@Override
	public SOSFileList dir(final String pathname, final int flag) {
		notImplemented();
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void setJSJobUtilites(final JSJobUtilities pobjJSJobUtilities) {
	}

	@Override
	public void ExecuteCommand(final String strCmd) throws Exception {
		// TODO shell-execute einbauen wg. pre- und pos-commands
	}

	@Override
	public String createScriptFile(final String pstrContent) throws Exception {
		return EMPTY_STRING;
	}

	@Override
	public Integer getExitCode() {
		return 0;
	}

	@Override
	public String getExitSignal() {
		return EMPTY_STRING;
	}

	@Override
	public StringBuffer getStdErr() throws Exception {
		return new StringBuffer("");
	}

	@Override
	public StringBuffer getStdOut() throws Exception {
		return new StringBuffer("");
	}

	@Override
	public boolean remoteIsWindowsShell() {
		return false;
	}

	@Override
	public ISOSConnection Authenticate(final ISOSAuthenticationOptions pobjAO) throws Exception {
		strReplyString = "230 Login successful.";
		return this;
	}

	@Override
	public void CloseConnection() throws Exception {
		strReplyString = "ok";
	}

	@Override
	public ISOSConnection Connect() throws Exception {
		strReplyString = "ok";
		return this;
	}

	@Override
	public ISOSConnection Connect(final ISOSConnectionOptions pobjConnectionOptions) throws Exception {
		this.Connect();
		return this;
	}

	@Override
	public ISOSConnection Connect(final String pstrHostName, final int pintPortNumber) throws Exception {
		return null;
	}

	@Override
	public void CloseSession() throws Exception {
		strReplyString = "221 Goodbye.";
	}

	@Override
	public ISOSSession OpenSession(final ISOSShellOptions pobjShellOptions) throws Exception {
		return null;
	}

	@Override
	public ISOSVirtualFile getFileHandle(final String pstrFileName) {

		if (pstrFileName.equalsIgnoreCase(strCurrentEntryName) == true) {
			return objCurrentZipFileEntry;
		}

		/**
		 * the java-zip paket is not able to store utf-encoded characters
		 * but this translation will more or less getting deeper into problems
		 */
		// byte[] iso88591Data = pstrFileName.getBytes(Charset.forName ("UTF-8"));
		// String strEncodedEntryName = new String(iso88591Data, Charset.forName ("ISO-8859-1"));
		String strEncodedEntryName = pstrFileName;
		// TODO Option KeepSourcePath
		strEncodedEntryName = new File(strEncodedEntryName).getName();
		SOSVfsZipFileEntry objF = new SOSVfsZipFileEntry(strEncodedEntryName);
		ZipEntry objZE = null;
		if (objZipOutputStream == null || this.isTarget() == false) {
			objZE = objWorkingDirectory.getEntry(strEncodedEntryName);
			if (objZE != null) {
				objF.setHandler(this);
			}
			else {
				objZE = objWorkingDirectory.getEntry(pstrFileName);
				if (objZE != null) {
					objF.setHandler(this);
				}
			}
		}
		else {
			objZE = new ZipEntry(strEncodedEntryName);
			try {
				objZE.setComment("created by com.sos.SOSVirtualFileSystem.SOSVfsZip, locale " + Locale.getDefault());
				objZE.setMethod(ZipEntry.DEFLATED);
				objZipOutputStream.putNextEntry(objZE);
				objF.objOutputStream = objZipOutputStream;
				objF.objEntryOutputStream = objZipOutputStream;
				objF.setHandler(this);
			}
			catch (IOException e) {
				logger.error(e.getLocalizedMessage());
			}
		}

		objF.setHandler(this);
		objF.setZipEntry(objZE);
		objCurrentZipFileEntry = objF;
		strCurrentEntryName = pstrFileName;
		return objF;
	}

	@Override
	public boolean isNegativeCommandCompletion() {
		return false;
	}

	@Override
	public String[] getFilelist(final String folder, final String regexp, final int flag, final boolean withSubFolder) {
		String[] strS = null;

		try {
			Vector<String> objV = new Vector<String>();
			Pattern pattern = Pattern.compile(regexp, flag);

			Enumeration<?> zipEntries = objWorkingDirectory.entries();
			while (zipEntries.hasMoreElements()) {
				String strEntryName = ((ZipEntry) zipEntries.nextElement()).getName();

				Matcher matcher = pattern.matcher(strEntryName);
				if (matcher.find()) {
					objV.add(strEntryName);
				}
			} // while (zipEntries.hasMoreElements())
			strS = objV.toArray(new String[objV.size()]);
		}
		catch (Exception e) {
			logger.error(e.getLocalizedMessage());
		}
		return strS;
	}

	@Override
	public String[] getFolderlist(final String folder, final String regexp, final int flag, final boolean withSubFolder) {
		String[] strS = null;

		try {
			Vector<String> objV = new Vector<String>();
			Pattern pattern = Pattern.compile(regexp, flag);

			Enumeration<?> zipEntries = objWorkingDirectory.entries();
			while (zipEntries.hasMoreElements()) {
				String strEntryName = ((ZipEntry) zipEntries.nextElement()).getName();

				Matcher matcher = pattern.matcher(strEntryName);
				if (matcher.find()) {
					objV.add(strEntryName);
				}
			} // while (zipEntries.hasMoreElements())
			strS = objV.toArray(new String[objV.size()]);
		}
		catch (Exception e) {
			logger.error(e.getLocalizedMessage());
		}
		return strS;
	}

	@Override
	public void CompletePendingCommand() {
		// nothing to do
	}

	@Override
	public ISOSConnection Connect(final SOSConnection2OptionsAlternate pobjConnectionOptions) throws Exception {
		// nothing to do
		return null;
	}

	@Override
	public String DoPWD() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public OutputStream getAppendFileStream(final String strFileName) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public long getFileSize(final String strFileName) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public InputStream getInputStream(final String strFileName) {
		ZipEntry objZE = objWorkingDirectory.getEntry(strFileName);
		InputStream objI = null;
		if (objZE != null) {
			try {
				objI = objWorkingDirectory.getInputStream(objZE);
			}
			catch (IOException e) {
				logger.error(e.getLocalizedMessage());
				throw new JobSchedulerException(e);
			}
		}
		return objI;
	}

	@Override
	public String getModificationTime(final String strFileName) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public OutputStream getOutputStream(final String strFileName) {
		ZipOutputStream objZOS = null;
		ZipEntry objZE = objWorkingDirectory.getEntry(strFileName);
		if (objZE != null) {
			try {
				FileOutputStream objFOS = new FileOutputStream(objWorkingDirectory.getName());
				objZOS = new ZipOutputStream(objFOS);
				objZOS.putNextEntry(objZE);
			}
			catch (Exception e) {
				logger.error(e.getLocalizedMessage());
				throw new JobSchedulerException(e);
			}
		}
		return objZOS;
	}

	@Override
	public boolean isDirectory(final String strFileName) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void rename(final String strFileName, final String pstrNewFileName) {
		// TODO Auto-generated method stub
	}

	@Override
	public void close() {
		if (objWorkingDirectory != null) {
			String strName = objWorkingDirectory.getName();
			try {
				objWorkingDirectory.close();
				logger.debug(SOSVfs_D_204.params(strName));
				objWorkingDirectory = null;
			}
			catch (IOException e) {
				throw new JobSchedulerException(SOSVfs_E_205.params(strName));
			}
		}
		else {
			this.closeOutput();
		}
	}

	@Override
	public void closeInput() {
		// TODO Auto-generated method stub
	}

	@Override
	public void closeOutput() {
		if (objZipOutputStream != null) {
			try {
				objZipOutputStream.flush();
				objZipOutputStream.close();
				logger.debug(SOSVfs_D_206.params(strZipArchiveName));
			}
			catch (IOException e) {
				// TODO Auto-generated catch block
				throw new JobSchedulerException(SOSVfs_E_134.params("close()"), e);
			}
		}
	}

	@Override
	public void flush() {
		if (objZipOutputStream != null) {
			try {
				objZipOutputStream.flush();
			}
			catch (IOException e) {
				// TODO Auto-generated catch block
				throw new JobSchedulerException(SOSVfs_E_134.params("flush()"), e);
			}
		}
	}

	@Override
	public int read(final byte[] bteBuffer) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int read(final byte[] bteBuffer, final int intOffset, final int intLength) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void write(final byte[] bteBuffer, final int intOffset, final int intLength) {
		// TODO Auto-generated method stub
	}

	@Override
	public void write(final byte[] bteBuffer) {
		// TODO Auto-generated method stub
	}

	@Override
	public void openInputFile(final String pstrFileName) {
		// TODO Auto-generated method stub
	}

	@Override
	public void openOutputFile(final String pstrFileName) {
		// TODO Auto-generated method stub
	}

	@Override
	public ISOSVirtualFile TransferMode(final SOSOptionTransferMode pobjFileTransferMode) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void ControlEncoding(final String pstrControlEncoding) {
		// TODO Auto-generated method stub

	}

	@Override
	public void rmdir(final String pstrFolderName) throws IOException {
		notImplemented();
	}

	@Override
	public void doPostLoginOperations() {
		// TODO Auto-generated method stub

	}

	@Override
	public ISOSConnection Connect(final ISOSDataProviderOptions pobjConnectionOptions) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public OutputStream getFileOutputStream() {
		return objOutputStream;
	}

	@Override
	public OutputStream getOutputStream() {
		return objOutputStream;
	}

	@Override
	public InputStream getInputStream() {
		return objInputStream;
	}

    @Override
    public SOSFileEntries getSOSFileEntries() {
        return sosFileEntries;
    }

	@Override
	public void reconnect(SOSConnection2OptionsAlternate options) {
	}
}