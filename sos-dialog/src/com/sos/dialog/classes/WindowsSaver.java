package com.sos.dialog.classes;

import java.util.prefs.Preferences;

import org.apache.log4j.Logger;
import org.eclipse.swt.events.ControlAdapter;
import org.eclipse.swt.events.ControlEvent;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;

/**
* \class WindowsSaver
*
* \brief WindowsSaver -
*
* \details
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \see reference
*
* Created on 08.11.2011 15:29:14
 */

public class WindowsSaver {

	private static final String	conWIN_LOCATE_Y		= "win:locateY:";
	private static final String	conWIN_LOCATE_X		= "win:locateX:";
	private static final String	conWIN_SIZE_Y		= "win:sizeY:";
	private static final String	conWIN_SIZE_X		= "win:sizeX:";

	@SuppressWarnings("unused")
	private final String		conClassName		= this.getClass().getSimpleName();

	@SuppressWarnings("unused")
	private static final String	conSVNVersion		= "$Id$";
	private final Logger		logger				= Logger.getLogger(this.getClass());

	private static final String	conPropertyWIDTH	= "width";

	private final Shell			shell;
	private final Preferences	prefs;
	private final Point			defaultSize;
	private final Point			defaultLocation;
	private final String		className;

	private String				strKey				= "";
	private boolean				flgClassIsActive	= false;

	public void setKey(final String pstrKey) {
		strKey = pstrKey;
	}

	public WindowsSaver(final Class<?> c, final Shell s, final int x, final int y) {
		prefs = Preferences.userNodeForPackage(c);
		shell = s;
		className = c.getName();
		defaultSize = new Point(x, y);
		defaultLocation = new Point(100, 100);

		if (shell != null) {
			shell.addControlListener(new ControlAdapter() {
				@Override
				public void controlMoved(final ControlEvent e) {
					if (flgClassIsActive == false) {
						saveWindowPosAndSize();
					}
				}

				@Override
				public void controlResized(final ControlEvent e) {
					if (flgClassIsActive == false) {
						saveWindowPosAndSize();
					}
				}
			});
		}
	}

	private int getInt(final String s, final int def) {
		try {
			return Integer.parseInt(s);
		}
		catch (NumberFormatException e) {
			return def;
		}
	}

	public void restoreWindow() {
		flgClassIsActive = true;
		logger.debug(className);
		restoreWindowSize();
		restoreWindowLocation();
		flgClassIsActive = false;
	}

	public void restoreWindowLocation() {
		if (shell != null) {
			int x = getInt(prefs.get(conWIN_LOCATE_X + className, String.valueOf(defaultLocation.x)), defaultLocation.x);
			int y = getInt(prefs.get(conWIN_LOCATE_Y + className, String.valueOf(defaultLocation.y)), defaultLocation.y);
			logger.debug("restoreWindowLocation: x = " + x + ", y = " + y + ", key = " + className);
			shell.setLocation(x, y);
		}
		else {
			logger.debug("shell is null");
		}
	}

	public Point getWindowSize() {
		int x = getInt(prefs.get(conWIN_SIZE_X + className, String.valueOf(defaultSize.x)), defaultSize.x);
		int y = getInt(prefs.get(conWIN_SIZE_Y + className, String.valueOf(defaultSize.y)), defaultSize.y);
		logger.debug("getWindowSize: x = " + x + ", y = " + y + ", key = " + className);
		return new Point(x, y);
	}

	public void restoreWindowSize() {
		shell.setSize(getWindowSize());
		logger.debug(className + ": Windws size restored");
	}

	public void saveWindowPosAndSize() {
		saveWindow();
	}

	public void saveWindow() {
		if (shell != null) {
			logger.debug(className);
			int x = shell.getSize().x;
			int y = shell.getSize().y;
			logger.debug("saveWindowSize: x = " + x + ", y = " + y);

			putPref(conWIN_SIZE_X, x);
			putPref(conWIN_SIZE_Y, y);

			x = shell.getLocation().x;
			y = shell.getLocation().y;
			logger.debug("saveWindowLocation: x = " + x + ", y = " + y);

			putPref(conWIN_LOCATE_X, x);
			putPref(conWIN_LOCATE_Y, y);
		}
		else {
			logger.debug("shell is null");
		}
	}

	private void putPref(final String pstrKey, final int pintValue) {
		prefs.put(pstrKey + className, String.valueOf(pintValue));
	}

	public void centerScreen() {
		flgClassIsActive = true;
		java.awt.Dimension screen = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
		shell.setBounds((screen.width - shell.getBounds().width) / 2, (screen.height - shell.getBounds().height) / 2, shell.getBounds().width,
				shell.getBounds().height);
		flgClassIsActive = false;
	}

	private String getPropertyKey() {
		return "properties/" + strKey;
	}

	public void saveProperty(final String pstrPropName, final String pstrPropValue) {
		prefs.node(getPropertyKey()).put(pstrPropName, pstrPropValue);
		logger.debug(String.format("saveProperty %1$s = %2$s", pstrPropName, pstrPropValue));
	}

	public String getProperty(final String pstrPropName) {
		String strR = prefs.node(getPropertyKey()).get(pstrPropName, "");
		logger.debug(String.format("getProperty %1$s = %2$s", pstrPropName, strR));
		return strR;
	}

	public void saveTableColumn(final String tableName, final TableColumn t) {
		String strCaption = (String) t.getData("caption");
		if (strCaption == null) {
			strCaption = t.getText();
		}
		String name = tableName + "/col/" + "_" + strCaption;
		logger.debug("save column: " + name);
		prefs.node(name).put(conPropertyWIDTH, String.valueOf(t.getWidth()));
	}

	public void TableColumnOrderRestore(final Table pobjTable) {

		String name = pobjTable.getData("caption") + "/colorder/default";
		String strNoOfColumn = prefs.node(name).get("NoOfColumns", "");
		if (strNoOfColumn.length() > 0) {
			int intNoOfColumn = new Integer(strNoOfColumn);
			if (intNoOfColumn == pobjTable.getColumnCount()) {
				int[] i = new int[intNoOfColumn];
				String strColOrder = prefs.node(name).get("columnorder", "");
				if (strColOrder.length() > 0) {
					int iCol = 0;
					for (String strIndex : strColOrder.split(";")) {
						if (strIndex.length() > 0) {
							i[iCol++] = new Integer(strIndex);
						}
					}
					pobjTable.setColumnOrder(i);
				}
			}
		}
	}

	public void TableColumnOrderSave(final Table pobjTable) {
		String strOrder = "";
		int intSize = pobjTable.getColumnOrder().length;
		for (int i : pobjTable.getColumnOrder()) {
			strOrder += i + ";";
		}
		String name = pobjTable.getData("caption") + "/colorder/default";
		logger.debug("save column order: " + name + ", " + strOrder);
		prefs.node(name).put("columnorder", strOrder);
		prefs.node(name).put("NoOfColumns", intSize + "");

		//	        for (int i = 0; i < order.length / 2; i++) {
		//	          int temp = order[i];
		//	          order[i] = order[order.length - i - 1];
		//	          order[order.length - i - 1] = temp;
		//	        }
		//	        table.setColumnOrder(order);
	}

	public void restoreTableColumn(final String tableName, final TableColumn t, final int def) {
		String strCaption = (String) t.getData("caption");
		if (strCaption == null) {
			strCaption = t.getText();
		}
		String name = tableName + "/col/" + "_" + strCaption;
		try {
			String strVal = prefs.node(name).get(conPropertyWIDTH, String.valueOf(def));
			logger.debug(String.format("restore column '%1$s' with size '%2$s': ", name, strVal));
			t.setWidth(this.getInt(strVal, def));
		}
		catch (Exception e) {
			t.setWidth(def);
		}
	}
}
