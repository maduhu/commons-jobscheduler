package com.sos.scheduler.model.objects;

import java.util.HashMap;

import org.apache.log4j.Logger;

import com.google.common.base.Strings;
import com.sos.JSHelper.Exceptions.JobSchedulerException;
import com.sos.VirtualFileSystem.Interfaces.ISOSVirtualFile;
import com.sos.scheduler.model.SchedulerObjectFactory;

/**
* \class JSObjParams 
* 
* \brief JSObjParams - 
* 
* \details
*
* \section JSObjParams.java_intro_sec Introduction
*
* \section JSObjParams.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author oh
* @version $Id$
* \see reference
*
* Created on 09.02.2011 15:06:59
 */

/**
 * @author oh
 *
 */
public class JSObjParams extends Params {

	@SuppressWarnings("unused")
	private final String		conClassName	= "JSObjParams";
	@SuppressWarnings("unused")
	private static final Logger	logger			= Logger.getLogger(JSObjParams.class);
	
	public final static String fileNameExtension = ".params.xml";

	public JSObjParams (final SchedulerObjectFactory schedulerObjectFactory) {
		objFactory = schedulerObjectFactory;
	}
	
	public JSObjParams (final SchedulerObjectFactory schedulerObjectFactory, final Params params) {
		objFactory = schedulerObjectFactory;
		setObjectFieldsFrom(params);
	}
	
	public JSObjParams(final SchedulerObjectFactory schedulerObjectFactory, final ISOSVirtualFile pobjVirtualFile) {
		objFactory = schedulerObjectFactory;
		Params objParams = (Params) unMarshal(pobjVirtualFile);
		setObjectFieldsFrom(objParams);
		setHotFolderSrc(pobjVirtualFile);
	}

	public HashMap<String,String> ParamList() {
		return values();
	}
	
	public HashMap<String,String> values() {
        HashMap<String,String> values = new HashMap<String,String>();
        for (Object o : getParamOrCopyParamsOrInclude() ) {
            if (o instanceof Param) {
                Param p = (Param)o ;
                values.put(p.getName(), p.getValue());
            }
        }
        return values;
	}
	
	public boolean hasParameterValue(final String parameterName) {
		boolean result = false;
        HashMap<String,String> values = values();
		if (values.containsKey(parameterName)) {
			String pValue = values.get(parameterName);
			if (!pValue.equals("")) result = true;
		}
		return result;
	}

	public String getParameterValue(final String parameterName) {
		String result = null;
        HashMap<String,String> values = values();
		if (values.containsKey(parameterName)) {
			result = values.get(parameterName);
		}
		return result;
	}

    /**
     * Build a Params object from a xml string.
     * @param paramString
     * @return
     */
    public void setParamsFromString(final String paramString) {
        JSObjParams result = objFactory.createParams();
        try {
            if(!Strings.isNullOrEmpty(paramString)) {
                Params params = (Params)objFactory.unMarshall(paramString);
                setObjectFieldsFrom(params);
            }
        } catch(Exception e) {
            String msg = "Error while parsing parameter string " + paramString;
            logger.error(msg);
            throw new JobSchedulerException(e);
        }
    }

    public void merge(final Params paramsToMerge) {
        for(Object o : paramsToMerge.getParamOrCopyParamsOrInclude()) {
            if(o instanceof Param) {
                Param p = (Param)o;
                if(!hasParameterValue(p.getName())) {
                    add(p);
                    logger.debug("Parameter " + p.getName() + "=" + p.getValue() + " merged.");
                }
            }
        }
    }

    public void add(final Param newParam) {
        getParamOrCopyParamsOrInclude().add(newParam);
    }

    public void add(final String name, final String value) {
        Param p = objFactory.createParam();
        p.setName(name);
        p.setValue(value);
        add(p);
    }

    public int size () {
    	int intSize = ParamList().size();
    	return intSize;
    }
}
