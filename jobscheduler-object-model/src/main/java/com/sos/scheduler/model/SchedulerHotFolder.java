package com.sos.scheduler.model;
import java.io.File;
import java.util.List;

import org.apache.log4j.Logger;

import com.sos.JSHelper.Exceptions.JobSchedulerException;
import com.sos.VirtualFileSystem.Interfaces.ISOSVfsFileTransfer;
import com.sos.VirtualFileSystem.Interfaces.ISOSVirtualFile;
import com.sos.scheduler.model.objects.JSObjBase;
import com.sos.scheduler.model.objects.JSObjJob;
import com.sos.scheduler.model.objects.JSObjJobChain;
import com.sos.scheduler.model.objects.JSObjLock;
import com.sos.scheduler.model.objects.JSObjOrder;
import com.sos.scheduler.model.objects.JSObjParams;
import com.sos.scheduler.model.objects.JSObjProcessClass;
import com.sos.scheduler.model.objects.JSObjSchedule;

/**
* \class SchedulerHotFolder
*
* \brief SchedulerHotFolder -
*
* \details
*
* \section SchedulerHotFolder.java_intro_sec Introduction
*
* \section SchedulerHotFolder.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author oh
* @version $Id$
* \see reference
*
* Created on 10.02.2011 22:58:07
 */
/**
 * @author oh
 *
 */
public class SchedulerHotFolder extends JSObjBase {
	private final String				conClassName			= "SchedulerHotFolder";
	private static final Logger			logger					= Logger.getLogger(SchedulerHotFolder.class);
	private boolean						isLoaded				= false;
	private SchedulerHotFolderFileList	objHotFolderFileList	= new SchedulerHotFolderFileList();

	public SchedulerHotFolder() {
		//
	}

	public SchedulerHotFolder(final SchedulerObjectFactory schedulerObjectFactory) {
		objFactory = schedulerObjectFactory;
	}

	public SchedulerHotFolder(final SchedulerObjectFactory schedulerObjectFactory, final ISOSVirtualFile pobjVirtualFile) {
		objFactory = schedulerObjectFactory;
		setHotFolderSrc(pobjVirtualFile);
	}

	public SchedulerHotFolderFileList load() {
		if (isLoaded) {
			return getHotFolderFileList();
		}
		objHotFolderFileList = load(this.getHotFolderSrc());
		return objHotFolderFileList;
	}

	public SchedulerHotFolderFileList loadRecursive() {
		if (isLoaded) {
			return getHotFolderFileList();
		}
		objHotFolderFileList = loadRecursive(this.getHotFolderSrc());
		return objHotFolderFileList;
	}

	public SchedulerHotFolderFileList refresh() {
		objHotFolderFileList = load(this.getHotFolderSrc());
		return objHotFolderFileList;
	}

	private SchedulerHotFolderFileList loadRecursive(final ISOSVirtualFile pobjVirtualDir) {
		SchedulerHotFolderFileList result = load(pobjVirtualDir);
		List<SchedulerHotFolder> folders = result.getFolderList();
		for (SchedulerHotFolder folder : folders) {
			logger.debug("reading content of " + folder.getHotFolderSrc().getName());
			SchedulerHotFolderFileList fileList = loadRecursive(folder.getHotFolderSrc());
			result.addAll(fileList);
		}
		return result;
	}

	public JSObjJob  getJobByName(final String pstrJobName) {
		JSObjJob objJob = null;
		for (JSObjJob objJ : getHotFolderFileList().getJobList()) {
			String strJobName = objJ.getJobName();
			if (strJobName.equalsIgnoreCase(pstrJobName)) {
				objJob = objJ;
				break;
			}
		}
		return objJob;
	}
	/**
	 *
	 * @param pobjVirtualDir
	 * @return
	 */
	private SchedulerHotFolderFileList load(final ISOSVirtualFile pobjVirtualDir) {
		final String conMethodName = conClassName + "::load";
		SchedulerHotFolderFileList result = new SchedulerHotFolderFileList();
		try {
			if (!pobjVirtualDir.isDirectory()) {
				throw new JobSchedulerException(String.format("%1$s isn't a directory", pobjVirtualDir.getName()));
			}
		}
		catch (Exception e) {
			e.printStackTrace();
			JobSchedulerException objJSException = new JobSchedulerException(conMethodName, e);
			logger.error("", objJSException);
			throw objJSException;
		}
		ISOSVfsFileTransfer objVFSHandler = pobjVirtualDir.getHandler();
		String[] filenames = objVFSHandler.getFolderlist(pobjVirtualDir.getName(), ".*", 0, false);
		result.setHotFolderSrc(pobjVirtualDir);
		for (String filename : filenames) {
			if (filename.contains(".svn") == false) {  // exclude .svn folder
				ISOSVirtualFile objVirtualFile1 = objVFSHandler.getFileHandle(filename);
				try {
					if (objVirtualFile1.isDirectory()) {
						logger.debug("load SchedulerHotFolder = " + filename);
						SchedulerHotFolder obj = objFactory.createSchedulerHotFolder(objVirtualFile1);
						result.add(obj);
					}
				}
				catch (Exception e) {
				}
			}
		}
		logger.debug("getFilelist from: " + pobjVirtualDir.getName());
		filenames = objVFSHandler.getFilelist(pobjVirtualDir.getName(), ".*", 0, false);
		for (String filename : filenames) {
			ISOSVirtualFile objVirtualFile1 = objVFSHandler.getFileHandle(filename);
			String lowerFilename = filename.toLowerCase();
			try {
				if (objVirtualFile1.isDirectory()) {
					logger.debug("load SchedulerHotFolder = " + filename);
					SchedulerHotFolder obj = objFactory.createSchedulerHotFolder(objVirtualFile1);
					result.add(obj);
				}
				else
					if (lowerFilename.endsWith(JSObjJob.fileNameExtension)) {
						logger.debug("load JSObjJob = " + filename);
						JSObjJob obj = objFactory.createJob(objVirtualFile1);
						result.add(obj);
					}
					else
						if (lowerFilename.endsWith(JSObjJobChain.fileNameExtension)) {
							logger.debug("load JSObjJobChain = " + filename);
							JSObjJobChain obj = objFactory.createJobChain(objVirtualFile1);
					       
  							result.add(obj);
						}
						else
							if (lowerFilename.endsWith(JSObjOrder.fileNameExtension)) {
								logger.debug("load JSObjOrder = " + filename);
								JSObjOrder obj = objFactory.createOrder(objVirtualFile1);
								result.add(obj);
							}
							else
								if (lowerFilename.endsWith(JSObjLock.fileNameExtension)) {
									logger.debug("load JSObjLock = " + filename);
									JSObjLock obj = objFactory.createLock(objVirtualFile1);
									result.add(obj);
								}
								else
									if (lowerFilename.endsWith(JSObjProcessClass.fileNameExtension)) {
										logger.debug("load JSObjProcessClass = " + filename);
										JSObjProcessClass obj = objFactory.createProcessClass(objVirtualFile1);
										result.add(obj);
									}
									else
										if (lowerFilename.endsWith(JSObjSchedule.fileNameExtension)) {
											logger.debug("load JSObjSchedule = " + filename);
											JSObjSchedule obj = objFactory.createSchedule(objVirtualFile1);
											result.add(obj);
										}
										else
											if (lowerFilename.endsWith(JSObjParams.fileNameExtension)) {
												logger.debug("load JSObjParams = " + filename);
												JSObjParams obj = objFactory.createParams(objVirtualFile1);
												result.add(obj);
											}
											else {
												continue;
											}
			}
			catch (Exception e) {
				e.printStackTrace();
				logger.error("", new JobSchedulerException(conMethodName, e));
				throw new JobSchedulerException(conMethodName, e);
			}
		}
		// Collections.sort(objHotFolderFileList.getFileList());
		isLoaded = true;
		logger.debug(String.format("%1$s objects found in %2$s", result.getFileList().size(), pobjVirtualDir.getName()));
		return result;
	} // load

	public SchedulerHotFolderFileList getHotFolderFileList() {
		return objHotFolderFileList;
	}
}
