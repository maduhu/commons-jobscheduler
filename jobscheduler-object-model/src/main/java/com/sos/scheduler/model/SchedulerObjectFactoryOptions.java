package com.sos.scheduler.model;

import org.apache.log4j.Logger;

import com.sos.JSHelper.Annotations.JSOptionDefinition;
import com.sos.JSHelper.Options.JSOptionsClass;
import com.sos.JSHelper.Options.SOSOptionHostName;
import com.sos.JSHelper.Options.SOSOptionInteger;
import com.sos.JSHelper.Options.SOSOptionJSTransferMethod;
import com.sos.JSHelper.Options.SOSOptionPortNumber;

/** \class SchedulerObjectFactoryOptions
 *
 * \brief SchedulerObjectFactoryOptions -
 *
 * \details
 *
 * \section SchedulerObjectFactoryOptions.java_intro_sec Introduction
 *
 * \section SchedulerObjectFactoryOptions.java_samples Some Samples
 *
 * \code .... code goes here ... \endcode
 *
 * <p style="text-align:center">
 * <br />
 * --------------------------------------------------------------------------- <br />
 * APL/Software GmbH - Berlin <br />
 * ##### generated by ClaviusXPress (http://www.sos-berlin.com) ######### <br />
 * ---------------------------------------------------------------------------
 * </p>
 * \author KB
 * 
 * @version $Id$18.01.2011 \see reference
 *
 *          Created on 18.01.2011 13:15:34 */
public class SchedulerObjectFactoryOptions extends JSOptionsClass implements ISOSSchedulerSocket {

    private static final long serialVersionUID = -7712192294207358955L;
    @SuppressWarnings("unused")
    private final String conClassName = this.getClass().getSimpleName();
    @SuppressWarnings("unused")
    private static final String conSVNVersion = "$Id$";
    @SuppressWarnings("unused")
    private final Logger logger = Logger.getLogger(this.getClass());
    /** \option tcp_time_out \type SOSOptionInteger \brief tcp_time_out - The
     * time out in seconds for a tcp connection
     *
     * \details The time out in seconds for a tcp connection
     *
     * \mandatory: false
     *
     * \created 27.08.2013 03:40:58 by KB */
    @JSOptionDefinition(name = "tcp_time_out", description = "The time out in seconds for a tcp connection", key = "tcp_time_out", type = "SOSOptionInteger", mandatory = false)
    public SOSOptionInteger TCPTimeoutValue = new SOSOptionInteger( // ...
            this, // ....
            conClassName + ".tcp_time_out", // ...
            "The time out in seconds for a tcp connection", // ...
            "60", // ...
            "60", // ...
            false);

    public SOSOptionInteger TimeOut = (SOSOptionInteger) TCPTimeoutValue.SetAlias("time_out");

    /*
     * (non-Javadoc)
     * @see com.sos.scheduler.model.ISOSSchedulerSocket#getTCPTimeoutValue()
     */
    @Override
    public int getTCPTimeoutValue() {

        @SuppressWarnings("unused")
        final String conMethodName = conClassName + "::getTCPTimeoutValue";

        return TCPTimeoutValue.value();
    } // public String gettcp_time_out

    /*
     * (non-Javadoc)
     * @see
     * com.sos.scheduler.model.ISOSSchedulerSocket#setTCPTimeoutValue(java.lang
     * .String)
     */
    @Override
    public ISOSSchedulerSocket setTCPTimeoutValue(final String pstrValue) {

        @SuppressWarnings("unused")
        final String conMethodName = conClassName + "::settcp_time_out";
        TCPTimeoutValue.Value(pstrValue);
        return this;
    } // public SchedulerObjectFactoryOptions settcp_time_out

    /** \option UDPPortNumber \type SOSOptionPortNumber \brief UDPPortNumber -
     * The tcp-port of the scheduler instance
     *
     * \details The scheduler communication port
     *
     * \mandatory: true
     *
     * \created 18.01.2011 13:23:19 by KB */
    @JSOptionDefinition(name = "UDPPortNumber", description = "The scheduler communication port for UDP", key = "UDPPortNumber", type = "SOSOptionPortNumber", mandatory = true)
    public SOSOptionPortNumber UDPPortNumber = new SOSOptionPortNumber( // ...
            this, // ....
            conClassName + ".UDPPortNumber", // ...
            "The scheduler communication port for UDP", // ...
            "4444", // ...
            "4444", // ...
            true);

    /*
     * (non-Javadoc)
     * @see com.sos.scheduler.model.ISOSSchedulerSocket#getUDPPortNumber()
     */
    @Override
    public int getUDPPortNumber() {
        @SuppressWarnings("unused")
        final String conMethodName = conClassName + "::getPortNumber";
        return UDPPortNumber.value();
    } // public String getUDPPortNumber

    /*
     * (non-Javadoc)
     * @see
     * com.sos.scheduler.model.ISOSSchedulerSocket#setUDPPortNumber(java.lang
     * .String)
     */
    @Override
    public ISOSSchedulerSocket setUDPPortNumber(final String pstrValue) {
        @SuppressWarnings("unused")
        final String conMethodName = conClassName + "::setPortNumber";
        UDPPortNumber.Value(pstrValue);
        return this;
    } // public SchedulerObjectFactoryOptions setUDPPortNumber

    /** \option PortNumber \type SOSOptionPortNumber \brief PortNumber - The
     * tcp-port of the scheduler instance
     *
     * \details The scheduler communication port
     *
     * \mandatory: true
     *
     * \created 18.01.2011 13:23:19 by KB */
    @JSOptionDefinition(name = "PortNumber", description = "The scheduler communication port", key = "PortNumber", type = "SOSOptionPortNumber", mandatory = true)
    public SOSOptionPortNumber PortNumber = new SOSOptionPortNumber( // ...
            this, // ....
            conClassName + ".PortNumber", // ...
            "The scheduler communication port", // ...
            "0", // ...
            "4444", // ...
            true);
    public SOSOptionPortNumber TCPPortNumber = (SOSOptionPortNumber) PortNumber.SetAlias("tcp_port_number");

    /*
     * (non-Javadoc)
     * @see com.sos.scheduler.model.ISOSSchedulerSocket#getPortNumber()
     */
    @Override
    public int getPortNumber() {
        @SuppressWarnings("unused")
        final String conMethodName = conClassName + "::getPortNumber";
        return PortNumber.value();
    } // public String getPortNumber

    /*
     * (non-Javadoc)
     * @see
     * com.sos.scheduler.model.ISOSSchedulerSocket#setPortNumber(java.lang.String
     * )
     */
    @Override
    public ISOSSchedulerSocket setPortNumber(final String pstrValue) {
        @SuppressWarnings("unused")
        final String conMethodName = conClassName + "::setPortNumber";
        PortNumber.Value(pstrValue);
        return this;
    } // public SchedulerObjectFactoryOptions setPortNumber

    /** \option ServerName \type SOSOptionString \brief ServerName - Name of
     * Server of JobScheduler Instance
     *
     * \details The Name of the Server
     *
     * \mandatory: true
     *
     * \created 18.01.2011 12:07:48 by KB */
    @JSOptionDefinition(name = "ServerName", description = "The Name of the Server", key = "ServerName", type = "SOSOptionString", mandatory = true)
    public SOSOptionHostName ServerName = new SOSOptionHostName( // ...
            this, // ....
            conClassName + ".ServerName", // ...
            "The Name of the Server", // ...
            "0.0.0.0", // ...
            "localhost", // ...
            true);

    public SOSOptionHostName ServerIPv4 = (SOSOptionHostName) ServerName.SetAlias("Server_IPv4_Name");

    /** \option TransferMethod \type SOSOptionJSTransferMethod \brief
     * TransferMethod - How to communicate with the JobScheduler
     *
     * \details The technical method of how to communicate with the JobScheduler
     *
     * \mandatory: true
     *
     * \created 26.04.2011 12:22:06 by KB */
    @JSOptionDefinition(name = "TransferMethod", description = "The technical method of how to communicate with the JobScheduler", key = "TransferMethod", type = "SOSOptionJSTransferMethod", mandatory = true)
    public SOSOptionJSTransferMethod TransferMethod = new SOSOptionJSTransferMethod( // ...
            this, // ....
            conClassName + ".TransferMethod", // ...
            "The technical method of how to communicate with the JobScheduler", // ...
            "tcp", // ...
            "tcp", // ...
            true);

    /*
     * (non-Javadoc)
     * @see com.sos.scheduler.model.ISOSSchedulerSocket#getTransferMethod()
     */
    @Override
    public String getTransferMethod() {
        @SuppressWarnings("unused")
        final String conMethodName = conClassName + "::getTransferMethod";
        return TransferMethod.Value();
    } // public String getTransferMethod

    /*
     * (non-Javadoc)
     * @see
     * com.sos.scheduler.model.ISOSSchedulerSocket#setTransferMethod(java.lang
     * .String)
     */
    @Override
    public ISOSSchedulerSocket setTransferMethod(final String pstrValue) {
        @SuppressWarnings("unused")
        final String conMethodName = conClassName + "::setTransferMethod";
        TransferMethod.Value(pstrValue);
        return this;
    } // public SchedulerObjectFactoryOptions setTransferMethod

    /*
     * (non-Javadoc)
     * @see com.sos.scheduler.model.ISOSSchedulerSocket#getServerName()
     */
    @Override
    public String getServerName() {
        @SuppressWarnings("unused")
        final String conMethodName = conClassName + "::getServerName";
        return ServerName.Value();
    } // public String getServerName

    /*
     * (non-Javadoc)
     * @see
     * com.sos.scheduler.model.ISOSSchedulerSocket#setServerName(java.lang.String
     * )
     */
    @Override
    public ISOSSchedulerSocket setServerName(final String pstrValue) {
        @SuppressWarnings("unused")
        final String conMethodName = conClassName + "::setServerName";
        ServerName.Value(pstrValue);
        return this;
    } // public SchedulerObjectFactory setServerName

    public SchedulerObjectFactoryOptions() {
        objParentClass = this.getClass();
    }
}
