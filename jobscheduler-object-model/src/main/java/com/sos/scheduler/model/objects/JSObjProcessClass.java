package com.sos.scheduler.model.objects;

import java.io.File;
import java.math.BigInteger;

import javax.xml.bind.JAXBElement;

import org.apache.log4j.Logger;

import com.sos.VirtualFileSystem.Interfaces.ISOSVirtualFile;
import com.sos.scheduler.model.SchedulerObjectFactory;

/**
* \class JSObjProcessClass
*
* \brief JSObjProcessClass -
*
* \details
*
* \section JSObjProcessClass.java_intro_sec Introduction
*
* \section JSObjProcessClass.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author oh
* @version $Id$
* \see reference
*
* Created on 09.02.2011 15:09:33
 */

/**
 * @author oh
 *
 */
public class JSObjProcessClass extends ProcessClass {

    @SuppressWarnings("unused")
    private final String        conClassName      = "JSObjProcessClass";
    @SuppressWarnings("unused")
    private static final Logger logger            = Logger.getLogger(JSObjProcessClass.class);

    public final static String  fileNameExtension = ".process_class.xml";

    public JSObjProcessClass(final SchedulerObjectFactory schedulerObjectFactory) {
        super();
        objFactory = schedulerObjectFactory;
        super.strFileNameExtension = fileNameExtension;
    }

    public JSObjProcessClass(final SchedulerObjectFactory schedulerObjectFactory, final ProcessClass origOrder) {
        super();
        super.strFileNameExtension = fileNameExtension;
        objFactory = schedulerObjectFactory;
        setObjectFieldsFrom(origOrder);
    }

    @SuppressWarnings("unchecked")
    public JSObjProcessClass(final SchedulerObjectFactory schedulerObjectFactory, final ISOSVirtualFile pobjVirtualFile) {
        objFactory = schedulerObjectFactory;
        objJAXBElement = (JAXBElement<JSObjBase>) unMarshal(pobjVirtualFile);
        setObjectFieldsFrom(objJAXBElement.getValue());
        setHotFolderSrc(pobjVirtualFile);
    }

    public void setSpoolerIdIfNotEmpty(String value) {
        if (!isEmpty(value)) {
            super.setSpoolerId(value);
        }
    }

    public void setNameIfNotEmpty(String value) {
        if (!isEmpty(value)) {
            super.setName(value);
        }
    }

    public void setRemoteSchedulerIfNotEmpty(String value) {
        if (!isEmpty(value)) {
            super.setSpoolerId(value);
        }
    }

    public void setReplaceIfNotEmpty(String value) {
        if (!isEmpty(value)) {
            super.setReplace(value);
        }
    }

    public void setMaxProcessesIfNotEmpty(String value) {
        if (!isEmpty(value)) {
            try {
                super.setMaxProcesses(new BigInteger(value));
            }
            catch (NumberFormatException e) {
                e.printStackTrace();
            }
        }
    }

    @Override
    public String getObjectName() {

        @SuppressWarnings("unused")
        final String conMethodName = conClassName + "::getJobName";

        String name = this.getHotFolderSrc().getName();
        int i = name.indexOf(fileNameExtension);
        if (i != -1) {
            name = name.substring(0, name.indexOf(fileNameExtension));
        }
        name = new File(name).getName();

        return name;

    } // private String getJobName

    public void setMaxProcesses(final int value) {
        maxProcesses = Int2BigInteger(value);
    }

}
