package com.sos.scheduler.model;

/**
* \class SchedulerHotFolderTest
*
* \brief SchedulerHotFolderTest -
*
* \details
*
* \section SchedulerHotFolderTest.java_intro_sec Introduction
*
* \section SchedulerHotFolderTest.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author oh
* @version $Id$
* \see reference
*
* Created on 15.02.2011 10:39:39
 */

import com.sos.JSHelper.DataElements.JSDataElementDate;
import com.sos.JSHelper.DataElements.JSDateFormat;
import com.sos.JSHelper.io.Files.JSTextFile;
import com.sos.VirtualFileSystem.Factory.VFSFactory;
import com.sos.VirtualFileSystem.Interfaces.ISOSVFSHandler;
import com.sos.VirtualFileSystem.Interfaces.ISOSVfsFileTransfer;
import com.sos.VirtualFileSystem.Interfaces.ISOSVirtualFile;
import com.sos.VirtualFileSystem.Options.SOSFTPOptions;
import com.sos.VirtualFileSystem.shell.cmdShell;
import com.sos.scheduler.converter.graphviz.Dot;
import com.sos.scheduler.model.objects.*;
import com.sos.scheduler.model.objects.JobChain.JobChainNode;
import org.apache.log4j.Logger;
import org.junit.*;

import java.io.File;
import java.util.Calendar;
import java.util.Date;
import java.util.Hashtable;

/**
 * @author oh
 *
 */
public class SchedulerHotFolderTest {

	// z: liegt auf 8of9.sos/c
	private static final String				conLiveFolderLocation		= "/8of9_buildjars_4210/config/live/";
	private static final String				conLiveLocalFolderLocation	= "Z:" + conLiveFolderLocation;

	@SuppressWarnings("unused")
	private final String					conClassName				= "SchedulerHotFolderTest";

	private static Logger					logger						= Logger.getLogger(SchedulerHotFolderTest.class);

	private static SchedulerObjectFactory	objFactory					= null;

	private ISOSVFSHandler					objVFS						= null;
	private ISOSVfsFileTransfer				objFileSystemHandler		= null;
	private SOSFTPOptions					objOptions					= null;

	public SchedulerHotFolderTest() {
		//
	}

	/**
	 * \brief setUpBeforeClass
	 *
	 * \details
	 *
	 * \return void
	 *
	 * @throws java.lang.Exception
	 */
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		logger.debug("test start");
		objFactory = new SchedulerObjectFactory("8of9.sos", 4210);
		objFactory.initMarshaller(Spooler.class);
	}

	/**
	 * \brief tearDownAfterClass
	 *
	 * \details
	 *
	 * \return void
	 *
	 * @throws java.lang.Exception
	 */
	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		// objFactory.getSocket().doClose();
		logger.debug("test ended");
	}

	/**
	 * \brief setUp
	 *
	 * \details
	 *
	 * \return void
	 *
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {
	}

	/**
	 * \brief tearDown
	 *
	 * \details
	 *
	 * \return void
	 *
	 * @throws java.lang.Exception
	 */
	@After
	public void tearDown() throws Exception {
	}

	/**
	 * Prepare tests for FTPVfs
	 */
	private final void prepareLocalVfs() {
		try {
			objVFS = VFSFactory.getHandler("local");
			objFileSystemHandler = (ISOSVfsFileTransfer) objVFS;
		}
		catch (Exception e) {
			logger.error(e);
		}
	}

	/**
	 * Prepare tests for FTPVfs
	 */
	@SuppressWarnings("deprecation")
	private final void prepareFtpVfs() {
		objOptions = new SOSFTPOptions();
		objOptions.host.Value("8of9.sos");
		// objOptions.protocol.Value("ftp");
		// objOptions.port.Value("21");
		objOptions.user.Value("sos");
		objOptions.password.Value("sos");
		try {
			objVFS = VFSFactory.getHandler(objOptions.protocol.Value());
			objVFS.Connect(objOptions);
			objVFS.Authenticate(objOptions);
			objFileSystemHandler = (ISOSVfsFileTransfer) objVFS;
		}
		catch (Exception e) {
			logger.error(e);
		}
	}

	public final SchedulerHotFolderFileList loadHotFolder(final String strTestHotFolder) {
		ISOSVirtualFile objHotFolder = objFileSystemHandler.getFileHandle(strTestHotFolder);
		SchedulerHotFolder objSchedulerHotFolder = objFactory.createSchedulerHotFolder(objHotFolder);
		logger.info(String.format("... load %1$s", strTestHotFolder));
		SchedulerHotFolderFileList objSchedulerHotFolderFileList = objSchedulerHotFolder.load();
		objSchedulerHotFolderFileList.getFolderList();
		objSchedulerHotFolderFileList.getJobList();
		objSchedulerHotFolderFileList.getJobChainList();
		objSchedulerHotFolderFileList.getOrderList();
		objSchedulerHotFolderFileList.getProcessClassList();
		objSchedulerHotFolderFileList.getLockList();
		objSchedulerHotFolderFileList.getScheduleList();
		objSchedulerHotFolderFileList.getParamsList();
		for (JSObjBase obj : objSchedulerHotFolderFileList.getSortedFileList()) {
			logger.info(String.format("%1$s is an instance of %2$s", obj.getHotFolderSrc().getName(), obj.getClass()));

			if (obj instanceof SchedulerHotFolder) {
				logger.info(String.format("... load %1$s", obj.getHotFolderSrc().getName()));
				//				SchedulerHotFolder objSchedulerSubFolder = (SchedulerHotFolder) obj;
				//				objSchedulerSubFolder.load();
			}
			else {
				logger.info(obj.toXMLString());
			}
		}

		return objSchedulerHotFolderFileList;
	}

	@Test
	public final void CreateDOTFileFromChain() throws Exception {

		boolean flgCreateCluster = false;

		prepareLocalVfs();
		//String conLiveLocalFolderLocation = "C:/ProgramData/sos-berlin.com/jobscheduler/latestscheduler_4446/config/live";
		SchedulerHotFolderFileList objSchedulerHotFolderFileList = loadHotFolder(conLiveLocalFolderLocation);
		for (JSObjBase obj : objSchedulerHotFolderFileList.getSortedFileList()) {
			logger.info(String.format("%1$s is an instance of %2$s", obj.getHotFolderSrc().getName(), obj.getClass()));

			if (obj instanceof JSObjJobChain) {

				// TODO as a method in JSObjChain

				JSObjJobChain objChain = (JSObjJobChain) obj;
				String strName = objChain.getName();
				if (strName == null) {
					strName = objChain.getObjectName();
				}
				String strFileName = "c:/temp/dottest/" + strName ;
				JSTextFile objDotFile = new JSTextFile(strFileName + ".dot");

				// Get list of orders related to this JobChain

				Hashtable<String, JSObjOrder> tblOrders = new Hashtable<String, JSObjOrder>();
				for (JSObjBase objO : objSchedulerHotFolderFileList.getSortedFileList()) {
					if (objO instanceof JSObjOrder) {
						JSObjOrder objOrder = (JSObjOrder) objO;
						String strOrderName = objOrder.getJobChainName();
						if (strName.equalsIgnoreCase(strOrderName)) {
							tblOrders.put(strOrderName, objOrder);
						}
					}
				}
				objDotFile.WriteLine("digraph " + getQuoted(strName) + " {");
				objDotFile.WriteLine("rankdir = TB;");

				objDotFile.WriteLine("graph [");
				objDotFile.WriteLine("label = " + getQuoted(objChain.getTitle()));
				objDotFile.WriteLine("fontsize = 14");
				objDotFile.WriteLine("];");
				objDotFile.WriteLine("node [");
				objDotFile.WriteLine("fontsize = 10");
				objDotFile.WriteLine("shape = " + getQuoted("box"));
				objDotFile.WriteLine("style = " + getQuoted("rounded"));
				objDotFile.WriteLine("fontname = " + getQuoted("Arial"));
				objDotFile.WriteLine("];");

				Hashtable<String, JobChainNode> tblNodes = new Hashtable<String, JobChainNode>();
				objDotFile.WriteLine(getQuoted("start") + " [label = " + getQuoted("start" + ": " + strName) + ", shape = " + getQuoted("box") + ", style = "
						+ getQuoted("solid") + "];");
				objDotFile.WriteLine(getQuoted("end") + " [label = " + getQuoted("end" + ": " + strName) + ", shape = " + getQuoted("box") + ", style = "
						+ getQuoted("solid") + "];");

				for (JSObjOrder objOrder : tblOrders.values()) {
					objDotFile.WriteLine(getQuoted(objOrder.getObjectName()) + " [label = " + getQuoted("Order - " + objOrder.getObjectName()) + "];");
				}

				for (Object objO : objChain.getJobChainNodeOrFileOrderSinkOrJobChainNodeEnd()) {
					if (objO instanceof JobChainNode) {
						JobChainNode objNode = (JobChainNode) objO;
						String strState = objNode.getState();
						if (tblNodes.get(strState) == null) {
							tblNodes.put(strState, objNode);
							// "0" [label = "0: virtual start "];
							String strJobName = objNode.getJob();
							if (strJobName == null) {
								strJobName = "endNode";
							}
							String strT = strState;
							if (strState.equalsIgnoreCase(strJobName) == false) {
								strT = strState + ": " + strJobName;
							}
							objDotFile.WriteLine(getQuoted(strState) + " [label = " + getQuoted(strT) + "];");
							String strErrorState = objNode.getErrorState();
							if (strErrorState != null && tblNodes.get(strErrorState) == null) {
								tblNodes.put(strErrorState, objNode);
								objDotFile.WriteLine(getQuoted(strErrorState) + " [label = " + getQuoted(strErrorState)
										+ ", color=\"red\", fillcolor=\"yellow\", style=\"filled\", fontcolor=\"blue\"];");
							}
						}
					}
				}
				// TODO implement Method: getNodes()
				// TODO implement Method: getAllNodeNames()

				for (JSObjOrder objOrder : tblOrders.values()) {
					objDotFile.WriteLine(getQuoted(objOrder.getObjectName()) + " -> " + getQuoted("start"));
				}

				boolean flgStart = true;
				String strState = null;
				String strNextState = null;
				String strLastNextState = null;
				for (Object objO : objChain.getJobChainNodeOrFileOrderSinkOrJobChainNodeEnd()) {
					if (objO instanceof JobChainNode) {
						JobChainNode objNode = (JobChainNode) objO;

						strState = objNode.getState();

						if (flgStart == true) {
							flgStart = false;
							objDotFile.WriteLine(getQuoted("start") + " -> " + strState);
							if (flgCreateCluster) {
								objDotFile.WriteLine("subgraph cluster_0 {");
								objDotFile.WriteLine("    style=filled;");
								objDotFile.WriteLine("color=lightgrey;");
								objDotFile.WriteLine("node [style=filled,color=white];");
							}
						}
						strNextState = objNode.getNextState();
						if (strNextState != null) {
							objDotFile.WriteLine(getQuoted(strState) + " -> " + getQuoted(strNextState));
							strLastNextState = strNextState;
						}
						//						else {
						//							objDotFile.WriteLine(getQuoted(strState) + " -> " + getQuoted("end"));
						//						}
					}
				}

				objDotFile.WriteLine(getQuoted(strLastNextState) + " -> " + "end");
				if (flgCreateCluster) {
					objDotFile.WriteLine("label = \"Process\";");
					objDotFile.WriteLine("}");
				}

				/**
				 * create the links to the error-states.
				 */
				Hashtable<String, JobChainNode> tblErrNodes = new Hashtable<String, JobChainNode>();
				for (Object objO : objChain.getJobChainNodeOrFileOrderSinkOrJobChainNodeEnd()) {
					if (objO instanceof JobChainNode) {
						JobChainNode objNode = (JobChainNode) objO;

						strState = objNode.getState();

						String strErrorState = objNode.getErrorState();
						if (strErrorState != null) {
							objDotFile.WriteLine(getQuoted(strState) + " -> " + getQuoted(strErrorState) + " [style=\"dotted\", constraint=false]");
							tblErrNodes.put(strErrorState, objNode);
						}
						else {
						}
					}
				}

				if (flgCreateCluster) {
					objDotFile.WriteLine("subgraph cluster_1 {");
					objDotFile.WriteLine("    style=filled;");
					objDotFile.WriteLine("color=lightgrey;");
					objDotFile.WriteLine("node [style=filled,color=white];");
				}

				String strLastErrNode = "";
				for (JobChainNode objErrNode : tblErrNodes.values()) {
					String strErrNodeName = objErrNode.getErrorState();
					if (flgCreateCluster) {
						if (strLastErrNode.length() <= 0) {
							strLastErrNode = strErrNodeName;
						}
						else {
							objDotFile.WriteLine(getQuoted(strLastErrNode) + " -> " + getQuoted(strErrNodeName) + " [style=invis]");
							strLastErrNode = strErrNodeName;
						}
					}
					objDotFile.WriteLine(getQuoted(strErrNodeName) + " -> " + getQuoted("end"));
				}

				if (flgCreateCluster) {
					objDotFile.WriteLine("label = \"Error\";");
					objDotFile.WriteLine("}");
				}

				objDotFile.WriteLine("}");
				objDotFile.close();

				cmdShell objShell = new cmdShell();

				String strCommandString = String.format(Dot.Command + " -x -T%1$s %2$s.dot > %2$s.%1$s", "jpg", strFileName);
				objShell.setCommand(strCommandString);
				objShell.run();

			}
			else {
			}
		}

	}

	private String getQuoted(final String pstrVal) {
		return "\"" + pstrVal + "\"";
	}

	/**
	 * Test method for {@link com.sos.scheduler.model.SchedulerHotFolder)}.
	 * @throws Exception
	 */
	@Test
	public final void loadHotFolderLocal() {
		prepareLocalVfs();
		loadHotFolder(conLiveLocalFolderLocation);
	}

	/**
	 * Test method for {@link com.sos.scheduler.model.SchedulerHotFolder)}.
	 * @throws Exception
	 */
	@Test
	public final void loadHotFolderFTP() {
		prepareFtpVfs();
		loadHotFolder(conLiveFolderLocation);
	}

	/**
	 * Test method for {@link com.sos.scheduler.model.objects.JSObjJobChain}.
	 */
	@Test
	public final void loadJobChainByVfs() {

		prepareLocalVfs();
		String strTestFilePath = conLiveLocalFolderLocation + "BuildJars.job_chain.xml";
		ISOSVirtualFile objFile = objFileSystemHandler.getFileHandle(strTestFilePath);

		JSObjJobChain objJobChain = new JSObjJobChain(objFactory, objFile);
		objJobChain.setTitle("New Title");
		objJobChain.setOrdersRecoverable(false);
		String xmlStr = objJobChain.toXMLString();
		logger.info(xmlStr);
	}

	@Test
	public final void loadJobChainByFtpVfs() {
		prepareFtpVfs();
		String strTestFilePath = conLiveFolderLocation + "BuildJars.job_chain.xml";
		ISOSVirtualFile objFile = objFileSystemHandler.getFileHandle(strTestFilePath);

		JSObjJobChain objJobChain = objFactory.createJobChain(objFile);
		objJobChain.setTitle("New Title");
		objJobChain.setOrdersRecoverable(false);
		String xmlStr = objJobChain.toXMLString();
		logger.info(xmlStr);
	}

	@Test
	public final void loadJobByFtpVfs() {
		prepareFtpVfs();
		String strTestFilePath = conLiveFolderLocation + "junitModel/testOrderJob.job.xml";
		ISOSVirtualFile objFile = objFileSystemHandler.getFileHandle(strTestFilePath);

		JSObjJob objJob = objFactory.createJob(objFile);
		objJob.setTitle("New Title");
		objJob.getScript().getContent();
		String xmlStr = objJob.toXMLString();
		logger.info(xmlStr);
	}

	@Test
	public final void loadLockByFtpVfs() {
		prepareFtpVfs();
		String strTestFilePath = conLiveFolderLocation + "junitModel/testlock.lock.xml";
		ISOSVirtualFile objFile = objFileSystemHandler.getFileHandle(strTestFilePath);

		JSObjLock objLock = objFactory.createLock(objFile);
		objLock.setMaxNonExclusive(20);
		String xmlStr = objLock.toXMLString();
		logger.info(xmlStr);
		objLock.toXMLFile();
	}

	/**
	 *
	 * \brief loadOrderByVfs
	 *
	 * \details
	 *
	 * \return void
	 *
	 */
	@Test
	public final void modifyOrderByVfs() {
		prepareLocalVfs();
		String strTestFilePath = conLiveLocalFolderLocation + "junitModel/testJobChain,testOrder.order.xml";
		ISOSVirtualFile objFile = objFileSystemHandler.getFileHandle(strTestFilePath);

		JSObjOrder objOrder = objFactory.createOrder(objFile);
		objOrder.setTitle("New Title");
		String xmlStr = objOrder.toXMLString();
		logger.info(xmlStr);
		objOrder.toXMLFile();
	}

	@Test
	public final void loadOrderByVfs() {
		prepareLocalVfs();
		String strTestFilePath = conLiveLocalFolderLocation + "junitModel/testJobChain,testOrder.order.xml";
		ISOSVirtualFile objFile = objFileSystemHandler.getFileHandle(strTestFilePath);

		JSObjOrder objOrder = objFactory.createOrder(objFile);
		String xmlStr = objOrder.toXMLString();
		logger.info(xmlStr);
	}

	@Test
	public final void loadHolidaysByVfs() {
		prepareLocalVfs();
		String strTestFilePath = conLiveLocalFolderLocation + "holidays.xml";
		ISOSVirtualFile objFile = objFileSystemHandler.getFileHandle(strTestFilePath);

		JSObjHolidays objHolidays = objFactory.createHolidays(objFile);
		String xmlStr = objHolidays.toXMLString();
		logger.info(xmlStr);

		JSDataElementDate objD = new JSDataElementDate("2011-11-27", JSDateFormat.dfDATE_SHORT);
		logger.info(objD.Value());
		if (objHolidays.isAHoliday(objD.getDateObject())) {
			logger.info("is a Holiday");
		}
	}

	@Test
	public void testDateRange() {

		for (int i = 20; i < 60; i++) {
			System.out.println(addDays(new Date(), i) + " --- " + i);
		}
	}

	public Date addDays(final Date d, final int days) {

		Calendar c1 = Calendar.getInstance();
		c1.setTime(d);
		c1.add(Calendar.DAY_OF_YEAR, -days);

		return c1.getTime();
	}

	@Test
	public final void testLastFridayAlgorithm() {
		prepareLocalVfs();
		String strTestFilePath = conLiveLocalFolderLocation + "holidays.xml";
		ISOSVirtualFile objFile = objFileSystemHandler.getFileHandle(strTestFilePath);

		JSObjHolidays objHolidays = objFactory.createHolidays(objFile);
		String xmlStr = objHolidays.toXMLString();
		logger.info(xmlStr);

		Calendar c1 = Calendar.getInstance();
		JSDataElementDate objD = new JSDataElementDate("2011-11-01", JSDateFormat.dfDATE_SHORT);
		int intYear = c1.get(Calendar.YEAR);

		for (int i = 9; i <= 12; i++) {
			int intMonth = i - 1;
			int intLastFridayInMOnth = objD.getLastFridayInAMonth(intMonth, intYear);
			c1.clear();
			c1.setTimeInMillis(new Date().getTime());
			c1.set(intYear, intMonth, intLastFridayInMOnth, 23, 30, 30);
			logger.debug("lastfriday = " + c1.getTime());
			logger.debug(c1.getTimeInMillis());
			if (objHolidays.isAHoliday(c1)) {
				logger.info(c1.getTime() + " is a Holiday");
				Calendar c2 = (Calendar) c1.clone();
				while (objHolidays.isAHoliday(c2)) {
					c2.add(Calendar.DAY_OF_MONTH, 1);
				}
				if (c1.get(Calendar.MONTH) == c2.get(Calendar.MONTH)) {
					logger.info("later date found on " + c2.getTime());
				}
				c2 = (Calendar) c1.clone();
				while (objHolidays.isAHoliday(c2)) {
					c2.add(Calendar.DAY_OF_MONTH, -1);
				}
				if (c1.get(Calendar.MONTH) == c2.get(Calendar.MONTH)) {
					logger.info("previous date found on " + c2.getTime());
				}
			}
			else {
				logger.info("valid date found on " + c1.getTime());
			}
		}
	}

	@Test
	public final void loadObject() {
		String strTestFilePath = conLiveLocalFolderLocation + "junitModel/testJobChain,testOrder.order.xml";
		File strTestFile = new File(strTestFilePath);
		Object obj = objFactory.unMarshall(strTestFile);
		logger.info(obj.getClass());
	}

	@Test
	public final void loadOrderByFtpVfs() {
		prepareFtpVfs();
		String strTestFilePath = conLiveFolderLocation + "BuildJars,1.order.xml";
		ISOSVirtualFile objFile = objFileSystemHandler.getFileHandle(strTestFilePath);

		JSObjOrder objOrder = objFactory.createOrder(objFile);
		String xmlStr = objOrder.toXMLString();
		logger.info(xmlStr);
	}

}
