package com.sos.scheduler.model.test;

import com.sos.JSHelper.Exceptions.JobSchedulerException;
import com.sos.JSHelper.io.Files.JSXMLFile;
import com.sos.scheduler.model.SchedulerObjectFactory;
import com.sos.scheduler.model.answers.At;
import com.sos.scheduler.model.answers.Calendar;
import com.sos.scheduler.model.answers.Period;
import com.sos.scheduler.model.answers.Task;
import com.sos.scheduler.model.commands.*;
import com.sos.scheduler.model.objects.Job;
import com.sos.scheduler.model.objects.ProcessClass;
import com.sos.scheduler.model.objects.Spooler;
import com.sos.scheduler.model.objects.Spooler.Config;
import org.apache.log4j.Logger;

import java.io.File;
import java.math.BigInteger;

/**
* \class TestLoadSchedulerXML
*
* \brief TestLoadSchedulerXML -
*
* \details
*
* \section TestLoadSchedulerXML.java_intro_sec Introduction
*
* \section TestLoadSchedulerXML.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* @version $Id$17.01.2011
* \see reference
*
* Created on 17.01.2011 19:26:09
 */

/**
 * @author KB
 *
 */
public class TestLoadSchedulerXML implements Runnable {

	private final String		conClassName	= "TestLoadSchedulerXML";
	private static Logger		logger			= Logger.getLogger(TestLoadSchedulerXML.class);

	TestLoadSchedulerXML() {
	}

	@Override
	public void run() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::run";

		try {

			logger.debug("test start");
			SchedulerObjectFactory objFactory = new SchedulerObjectFactory("localhost", 4444);
			objFactory.initMarshaller(Spooler.class);

			Spooler objSchedulerConfig = (Spooler) objFactory.unMarshall(new File("C:/Program Files (x86)/Scheduler/config/scheduler.xml"));
			// PurchaseOrderType po = (PurchaseOrderType)objSchedulerConfig.getValue();

			Config objConfig = objSchedulerConfig.getConfig().get(0);
			System.out.println(objConfig.getPort());
			System.out.println(objConfig.getTcpPort());
			System.out.println(objConfig.getUdpPort());

			for (ProcessClass objProcessClass : objConfig.getProcessClasses().getProcessClass()) {
				logger.debug("ProcessClass = " + objProcessClass.getName());
			}
			logger.debug("ready");

			// das geht auch.
			// u.unmarshal(new StringReader("das ist das haus vom Nikolaus"));
			Job objJob = (Job) objFactory.unMarshall(new File("C:/Program Files (x86)/Scheduler/config/live/show_env.job.xml"));
			JSXMLFile objXMLFile;
			try {
				objXMLFile = new JSXMLFile("c:/temp/t.xml");
			}
			catch (Exception e) {
				e.printStackTrace();
				throw new JobSchedulerException("JSXMLFile ended with exception", e);
			}
			objFactory.marshal(objJob, objXMLFile);
			logger.debug(objXMLFile.getContent());

			JSCmdStartJob objStartJob = objFactory.createStartJob();
			objStartJob.setName("show_env");
			objStartJob.setForce("yes");
			objStartJob.setJob("show_env");

			objStartJob.setParams(new String[] { "Hallo", "Value of Hallo" });

			logger.debug(objStartJob.toXMLString());
			try {
				objStartJob.run();
			}
			catch (JobSchedulerException e) {
				// TODO: handle exception
			}
			catch (Exception e) {
				// TODO: handle exception
			}
			/**
			 * *
			 * The following xml will the JS respond if the request could be satisfied:
			 *
						<spooler>
						  <answer time="2011-01-19 11:51:31.352">
						    <ok>
						      <task job="/show_env" id="3725" task="3725" state="none" name="show_env" enqueued="2011-01-19 11:51:31.367" start_at="2011-01-19 11:51:31.352" steps="0" log_file="C:/Program Files (x86)/Scheduler/logs/scheduler-2011-01-19-105244.scheduler.log" force_start="yes">
						        <log level="debug9"/>
						      </task>
						    </ok>
						  </answer>
						</spooler>
			*/
			Task objTask = objStartJob.getTask();
			logger.info("task-id  = " + objTask.getTaskId());
			logger.info("enqueued = " + objTask.getEnqueued());

			/*
			 * this shall result into an error because "willi" should not be a valid job
			 */
			objStartJob.setJob("willi");
			try {
				objStartJob.run();
			}
			catch (JobSchedulerException e) {
				// TODO: handle exception
			}
			catch (Exception e) {
				// TODO: handle exception
			}

			/**
			 * This answer is given by the JS in case of an error:
			 *
			 * <?xml version="1.0" encoding="ISO-8859-1"?>
				<spooler>
				<answer time="2011-01-19 11:51:31.402">
					<ERROR time="2011-01-19 11:51:31" code="SCHEDULER-161" text="SCHEDULER-161  There is no Job '/willi'"/>
				</answer>
				</spooler>
			 */

			JSCmdShowState objShowState = objFactory.createShowState();
			objShowState.setWhat("all"); // see: http://localhost:4444/doc/en/xml/show_state.xml
			objShowState.run();

			objShowState.setWhat("");
			objShowState.run();

			JSCmdShowJob objCmdShowJob = objFactory.createShowJob();
			objCmdShowJob.setJob("show_env");
			objCmdShowJob.setWhat("all");
			objCmdShowJob.run();

			JSCmdShowJobs objCmdShowJobs = objFactory.createShowJobs();
			objCmdShowJobs.setMaxTaskHistory(BigInteger.valueOf(100));
			objCmdShowJobs.setWhat("all");
			objCmdShowJobs.run();

			JSCmdShowHistory objCmdShowHistory = objFactory.createShowHistory();
			objCmdShowHistory.setJob("show_env");
			objCmdShowHistory.setMaxOrders(BigInteger.valueOf(9999));
//			objCmdShowHistory.setId(BigInteger.valueOf(3749));
//			objCmdShowHistory.setWhat("all");
//			objCmdShowHistory.s
			objCmdShowHistory.run();

			JSCmdShowTask objCmdShowTask = objFactory.createShowTask();
			objCmdShowTask.setId(BigInteger.valueOf(3749));
			objCmdShowTask.setWhat("all");
			objCmdShowTask.run();

			JSCmdShowCalendar objSC = objFactory.createShowCalendar(); // see: http://localhost:4444/doc/en/xml/show_calendar.xml
			objSC.setWhat("orders");
			objSC.setLimit(9999);
			objSC.setFrom("2011-01-21T23:00:00");
//			objSC.setBefore("2011-01-22T23:00:00");
			objSC.run();

			/**
			 * Response should be:
			 * <?xml version="1.0" encoding="ISO-8859-1"?>
<spooler>
  <answer time="2011-01-20 11:11:42.016">
    <calendar>
      <at at="2011-01-21T11:00:00" job_chain="/FileCopyExampleChain" order="FileCopy1"/>
      <at at="now" job_chain="/SSH/error/CheckJobRun" order="check_job_sample"/>
    </calendar>
  </answer>
</spooler>
			 */
			Calendar objCalendar = objSC.getCalendar();
			for (Object objCalendarObject : objCalendar.getAtOrPeriod()) {
				if (objCalendarObject instanceof At) {
					At objAt = (At) objCalendarObject;
					// TODO hier gibt es context-probleme, weil die answer nicht im eigentlichen spooler liegt
					// logger.debug(objAt.toXMLString());
					logger.debug(objFactory.answerToXMLString(objAt));
					logger.debug("Start at :" + objAt.getAt());
					logger.debug("Job Name :" + objAt.getJob());
					logger.debug("Job-Chain Name :" + objAt.getJobChain());
					logger.debug("Order Name :" + objAt.getOrder());
				}
				else {
					if (objCalendarObject instanceof Period) {
						Period objPeriod = (Period) objCalendarObject;
						logger.debug(objFactory.answerToXMLString(objPeriod));
						logger.debug("Absolute Repeat Interval :" + objPeriod.getAbsoluteRepeat());
						logger.debug("Timerange start :" + objPeriod.getBegin());
						logger.debug("Timerange end :" + objPeriod.getEnd());
						logger.debug("Job-Name :" + objPeriod.getJob());
					}
				}
			}

		}
		catch (Exception je) {
			je.printStackTrace();
		}

	} // private void run

}
