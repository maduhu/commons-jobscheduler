package sos.net.sosftp;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.io.File;
import java.io.IOException;
import java.util.UUID;
import java.util.Vector;

import junit.framework.Assert;

import org.apache.log4j.Logger;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import sos.net.SOSFTP;

import com.sos.JSHelper.Logging.Log4JHelper;
import com.sos.JSHelper.io.Files.JSFile;

/**
* \class TestSOSFTP
*
* \brief TestSOSFTP -
*
* \details
*
* \section TestSOSFTP.java_intro_sec Introduction
*
* \section TestSOSFTP.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* @version $Id$26.07.2010
* \see reference
*
* Created on 26.07.2010 16:20:48
 */

/**
 * @author KB
 *
 */
public class TestSOSFTP {

	private static final String	C_TEMP_TEST			= "c:/temp/test";

	@SuppressWarnings("unused")
	private final String		conClassName		= "TestSOSFTP";

	@SuppressWarnings("unused")
	private static Logger		logger				= null;
	@SuppressWarnings("unused")
	private static Log4JHelper	objLogger			= null;
	private static SOSFTP		sosftp				= null;
	private final String		strTestFolderName	= "./TestSOSFtp";

	public TestSOSFTP() {
		//
	}

	@Test
	public void testUml() {

		String strU = "Ã¼bersicht_PMFHSBC.csv";

		strU = strU.replaceAll("Ã¼", "Ü");
		System.out.println(strU);
	}

	/**
	 * \brief setUpBeforeClass
	 *
	 * \details
	 *
	 * \return void
	 *
	 * @throws java.lang.Exception
	 */
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		// TODO über eine Option steuern. Die auch in die Standard-Option-Class aufnehmen
		objLogger = new Log4JHelper("./log4j.properties"); //$NON-NLS-1$

		sosftp = new SOSFTP("WILMA", 21, "", 123);

		sosftp.login("kb", "kb");

	}

	/**
	 * \brief tearDownAfterClass
	 *
	 * \details
	 *
	 * \return void
	 *
	 * @throws java.lang.Exception
	 */
	@AfterClass
	public static void tearDownAfterClass() throws Exception {

		if (sosftp != null) {
			sosftp.disconnect();
			sosftp = null;
		}
	}

	/**
	 * \brief setUp
	 *
	 * \details
	 *
	 * \return void
	 *
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {
	}

	@Test
	public void TestHiddenFile() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::TestHiddenFile";

		Assert.assertEquals("Ist hidden file", false, sosftp.isNotHiddenFile(".."));
		Assert.assertEquals("Ist hidden file", false, sosftp.isNotHiddenFile("."));
		Assert.assertEquals("Ist nothidden file", true, sosftp.isNotHiddenFile("/home/kb"));

	} // private void TestHiddenFile

	@Test
	public void getUUID() {
		for (int i = 0; i <= 100; i++) {
			UUID objUUID = UUID.randomUUID();
			System.out.println(objUUID.toString());
		}
	}

	@Test
	public void TestMKDIR() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::TestMKDIR";
		try {
			boolean flgOK = sosftp.mkdir(strTestFolderName);
			assertTrue("Folder created", flgOK);
			flgOK = sosftp.changeWorkingDirectory(strTestFolderName);
			Assert.assertTrue("CD is possible", flgOK);
			if (flgOK == true) {
				sosftp.cdup();
			}
		}
		catch (IOException e) {
			e.printStackTrace();
		}

	} // private void TestMKDIR

	@Test
	public void TestRMDIR() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::TestRMDIR";
		try {
			sosftp.rmdir(strTestFolderName);
			boolean flgOK = sosftp.changeWorkingDirectory(strTestFolderName);
			Assert.assertFalse("Folder is deleted", flgOK);
		}
		catch (IOException e) {
			e.printStackTrace();
		}

	} // private void TestMKDIR

	@Test
	public void TestnList() throws Exception {
		try {
			// SOSFTP sosftp = new SOSFTP("wilma", 21);
			// sosftp.login("test", "12345");
			// System.getProperties().put("socksProxySet", "true");
			/*System.getProperties().put("ftp.proxySet", "true");
			System.getProperties().put("socksProxyHost", "proxy.sos");
			System.getProperties().put("socksProxyPort", "1080");
			System.getProperties().put("socksProxyUserName", "sos");
			System.getProperties().put("socksProxyPassword", "sos");
			*/

			/*HttpClient client = new HttpClient();
			client.getHostConfiguration().setProxy(proxyHost, port);
			*/

			/*System.getProperties().setProperty("proxyHost", "proxy.sos");
			System.getProperties().setProperty("proxyPort","3128" );
			System.getProperties().setProperty("proxySet", "true");
			*/
/*
			System.getProperties().setProperty("http.proxyHost", "proxy.sos");
			System.getProperties().setProperty("http.proxyPort","3128" );
			System.getProperties().setProperty("http.proxySet", "true");
*/

			// sosftp = new SOSFTP("WILMA", 21, "", 123);
			// sosftp = new SOSFTP("www.sos-berlin.com", 21);

			// sosftp = new SOSFTP("192.11.0.61", 21);
			// sosftp.login("anonymous", "info@sos-berlin.com");
			// sosftp.nList("/home/test/temp");

			System.out.println("~~~~~~~~~~~~~Test mit nlist~~~~~~~~~~~~~~~~~~~");

			// sosftp.login("test", "12345");

			long s1 = System.currentTimeMillis();
			Vector<String> va = sosftp.nList(".");
			long e1 = System.currentTimeMillis();
			long r1 = e1 - s1;

			System.out.println("elapsed Time is : " + r1);
			for (int i = 0; i < va.size(); i++) {
				System.out.println("VA File: " + va.get(i));
			}

/*			long e11 = System.currentTimeMillis();
			long r11 = e11-s1;
			System.out.println("--> :" + r11);
			*/

			/*
			System.out.println("~~~~~~~~~~~~~Test mit FTPFILE~~~~~~~~~~~~~~~~~~~");
			long s2 = System.currentTimeMillis();
			@SuppressWarnings("unused")
			FTPFile[] v = sosftp.listFiles("/home/test/temp");
			//			long e2 = System.currentTimeMillis();
			//			long r2 = e2 - s2;
			/*System.out.println("2 is :" + r2);
			for(int i = 0; i < v.length; i++) {
				if(v[i].isFile())
					System.out.println("File: "+ v[i].getName());
			}
			long e22 = System.currentTimeMillis();
			long r22 = e22 - s2;

			System.out.println("--> :" + r22);

			/*
			Vector v = sosftp.dir("/home/test/temp", 1);
			for(int i = 0; i < v.size(); i++)
				System.out.println(i + " " + v.get(i));
			*/

			/*		Vector v1 = sosftp.getFilenames();
					for(int i = 0; i < v1.size() && i < 10; i++)
						System.out.println(i + " " + v1.get(i));
				*/
		}
		catch (Exception e) {
			// System.err.println(e.toString());
			e.printStackTrace();
		}
		finally {
		}
	}

	@Test
	public void TestnListRecurseSubFolder() throws Exception {
		String[] strExpectedFileNames = new String[] { "/home/kb/testdir/file1.txt", "/home/kb/wake.pl", "/home/kb/wake_kb.sh" };
		try {
			long s1 = System.currentTimeMillis();
			Vector<String> strListOfAllFiles = sosftp.nList(".", false);
			long e1 = System.currentTimeMillis();
			long r1 = e1 - s1;

			System.out.println("elapsed Time is : " + r1);
			for (int i = 0; i < strListOfAllFiles.size(); i++) {
				System.out.println("VA File: " + strListOfAllFiles.get(i));
				String strFileName = strListOfAllFiles.get(i);
				System.out.println("FileName is " + new File(strFileName).getName());
				;
				// Assert.assertEquals("ExpectedFile not found = ", strExpectedFileNames[i], strListOfAllFiles.get(i));
			}

		}
		catch (Exception e) {
			e.printStackTrace();
		}
		finally {
		}
	}

	@Test
	public void testStripRemoteDirName() throws Exception {

		String strT = "";
		strT = stripRemoteDirName(C_TEMP_TEST, C_TEMP_TEST + "huhu.txt");
		Assert.assertEquals("FileName expected", "huhu.txt", strT);
		strT = stripRemoteDirName(C_TEMP_TEST, C_TEMP_TEST + "1/huhu.txt");
		Assert.assertEquals("FileName expected", "." + File.separator + "1" + File.separator + "huhu.txt", strT);
		strT = stripRemoteDirName(C_TEMP_TEST, C_TEMP_TEST + "1/2/3/huhu.txt");
		Assert.assertEquals("FileName expected", adjustSeparator("./1/2//3/huhu.txt"), strT);
	}

	private String stripRemoteDirName(final String pstrRootPath, final String pstrPathName) throws Exception {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::stripRemoteDirName";

		String strResult = pstrPathName;
		String strR = new File(pstrRootPath).getAbsolutePath();
		String strP = new File(pstrPathName).getAbsolutePath();
		if (strP.startsWith(strR) == true) {
			strResult = strP.substring(strR.length());
			if (strResult.contains(File.separator)) {
				if (strResult.startsWith(File.separator)) {
					strResult = strResult.substring(1);
				}
				if (strResult.contains(File.separator)) {
					strResult = "." + File.separator + strResult;
				}
			}
			// strResult = new File(strResult).getCanonicalPath();
			strResult = adjustSeparator(strResult);
		}
		return strResult;
	} // private String stripRemoteDirName

	private String adjustSeparator(final String pstrPathName) {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::";

		String strRet = pstrPathName;
		String[] strA = pstrPathName.split("[/\\\\]");
		if (strA.length > 0) {
			strRet = "";
			for (String string : strA) {
				if (string.length() > 0) {
					strRet = strRet + string + File.separator;
				}
			}
			strRet = strRet.substring(0, strRet.length() - 1);
		}
		// if (pstrPathName.contains("/")) {
		// strRet = pstrPathName.replaceAll("/", File.separator);
		// }
		// else if (pstrPathName.contains("\\")) {
		// strRet = pstrPathName.replaceAll("/", File.separator);
		// }

		return strRet;
	} // private String adjustSeparator
	public static final String	conSettingFILE_SPEC	= "file_spec";

	// http://www.sos-berlin.com/jira/browse/SOSFTP-96

	private boolean Check4MultipleFileSpecs(final String pstrRegExp) {
		boolean flgMultipleFileSpecs = false;
		int intFileSpecSize = conSettingFILE_SPEC.length();
		if (pstrRegExp.startsWith(conSettingFILE_SPEC) && pstrRegExp.length() > intFileSpecSize) {
			String strFileSpecIndex = pstrRegExp.substring(intFileSpecSize); // format is file_spec_111
			if (strFileSpecIndex.startsWith("_")) {
				strFileSpecIndex = strFileSpecIndex.substring(1);
			}
			int intIndex = 0;
			try {
				intIndex = new Integer(strFileSpecIndex);
			}
			catch (NumberFormatException e) {
			}
			if (intIndex > 0) {
				flgMultipleFileSpecs = true;
			}
		}
		return flgMultipleFileSpecs;
	}

	@Test
	public void testGetKeywordValuePair() {

	}

	@Test
	public void testFileSpec() {
		assertTrue("is numeric file_spec", Check4MultipleFileSpecs("file_spec_17"));
		assertTrue("is numeric file_spec", Check4MultipleFileSpecs("file_spec17"));
	}

	@Test
	public void testFileSpec2() {
		assertFalse("is regular file_spec", Check4MultipleFileSpecs("file_spec"));
	}

	@Test
	public void testFileSpec3() {
		assertFalse("is invalid numeric file_spec", Check4MultipleFileSpecs("file_spec_abc"));
		assertFalse("is invalid numeric file_spec", Check4MultipleFileSpecs("file_spec1o"));
	}

	private final String	strTestFileName	= "text.txt";
	//	private String				strTestPathName			= "R:/backup/sos/java/junittests/testdata/SOSDataExchange/";
	private final String	strTestPathName	= "R:\\backup\\sos\\java\\junittests\\testdata\\SOSDataExchange/";
	private final String	strKBHome		= "/home/kb/";
	private String[]		strArguments	= null;

	@Test
	public void testSendUsingFilePathAndLocalDir() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::testSendUsingFilePathAndLocalDir";
		CreateTestFile();
		strArguments = new String[] { "-verbose=9", "-remote_dir=./relative", "-operation=send", "-host=wilma.sos", "-user=kb", "-password=kb",
				"-local_dir=" + strTestPathName, "-file_path=" + strTestPathName + strTestFileName };
		callSOSFtp(strArguments);

	} // private void test1

	private void callSOSFtp(final String[] pstrParameter) {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::callSOSFtp";

		SOSFTPCommandSend.gflgUseSystemExit = false;
		SOSFTPCommandSend.main(pstrParameter);

	} // private void callSOSFtp

	@Test
	public void testSendUsingFilePathAndLocalDir2() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::testSendUsingFilePathAndLocalDir2";
		CreateTestFile();
		String[] strArguments = { "-verbose=9", "-remote_dir=./relative", "-operation=send", "-host=wilma.sos", "-user=kb", "-password=kb",
				"-local_dir=" + strTestPathName + "hugo/", "-file_path=" + strTestPathName + strTestFileName };
		callSOSFtp(strArguments);
	} // private void test1

	@Test
	public void testSendUsingFilePathAndLocalDir3() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::testSendUsingFilePathAndLocalDir3";
		CreateTestFile();
		String[] strArguments = { "-verbose=9", "-remote_dir=./relative", "-operation=send", "-host=wilma.sos", "-user=kb", "-password=kb",
				"-local_dir=" + strTestPathName, "-file_path=" + strTestFileName };
		callSOSFtp(strArguments);
	} // private void test1

	@Test
	public void testSendUsingFilePathAndLocalDir4() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::testSendUsingFilePathAndLocalDir3";
		CreateTestFile();
		String[] strArguments = { "-verbose=9", "-remote_dir=./relative", "-operation=send", "-host=wilma.sos", "-user=kb", "-password=kb",
				"-local_dir=R:/backup/sos/java/junittests/testdata/", "-file_path=./SOSDataExchange/" + strTestFileName };
		callSOSFtp(strArguments);
	} // private void test1

	@Test
	public void testSendUsingFilePathAndLocalDir5() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::testSendUsingFilePathAndLocalDir3";
		CreateTestFile();
		String[] strArguments = { "-verbose=9", "-remote_dir=./relative", "-operation=send", "-host=wilma.sos", "-user=kb", "-password=kb",
				"-file_path=" + strTestPathName + strTestFileName };
		callSOSFtp(strArguments);
	} // private void testSendUsingFilePathAndLocalDir5

	@Test
	public void testSendUsingFilePathAndLocalDir6() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::testSendUsingFilePathAndLocalDir3";
		CreateTestFile();
		String[] strArguments = { "-verbose=9", "-remote_dir=./relative", "-operation=send", "-host=wilma.sos", "-user=kb", "-password=kb", "-local_dir=\"\" ",
				"-file_path=" + strTestPathName + strTestFileName };
		callSOSFtp(strArguments);
	} // private void testSendUsingFilePathAndLocalDir6

	private void CreateTestFile() {
		CreateTestFile(strTestFileName);
	}

	private void CreateTestFile(final String pstrFileName) {

		JSFile objFile = new JSFile(strTestPathName, pstrFileName);
		// objFile.deleteOnExit();
		try {
			objFile.WriteLine("This is a simple Testfile. nothing else.");
			objFile.close();
		}
		catch (IOException e) {
			e.printStackTrace();
		}
	}

}
