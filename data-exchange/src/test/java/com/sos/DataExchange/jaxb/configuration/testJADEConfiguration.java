package com.sos.DataExchange.jaxb.configuration;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.List;
import java.util.Vector;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

/**
* \class testConfigurationElement
*
* \brief testConfigurationElement -
*
* \details
*
* \section testConfigurationElement.java_intro_sec Introduction
*
* \section testConfigurationElement.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* \version 21.08.2012
* \see reference
*
* Created on 21.08.2012 13:33:43
 */

public class testJADEConfiguration {

	@SuppressWarnings("unused")
	private final String	conClassName	= "testConfigurationElement";

	public testJADEConfiguration() {
		//
	}

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	@Before
	public void setUp() throws Exception {
	}

	@After
	public void tearDown() throws Exception {
	}

	@Test
	public void test() {
		try {
			// create a JAXBContext capable of handling classes generated into
			JAXBContext jc = JAXBContext.newInstance(ConfigurationElement.class);

			// create an Unmarshaller
			Unmarshaller u = jc.createUnmarshaller();

			// unmarshal an instance document into a tree of Java content
			ConfigurationElement objJADEConfig = (ConfigurationElement) u.unmarshal(new FileInputStream("ConfigurationExample.jadeconf"));
			Vector<Object> objProfileOrProfiles = (Vector<Object>) objJADEConfig.getIncludeOrProfileOrProfiles();
			for (Object object : objProfileOrProfiles) {
				if (object instanceof JADEProfile) {
					iterateProfile(object);
				}
				else {
					if (object instanceof JADEProfiles) {
						iterateProfiles(object);
					}
				}
			}
		}
		catch (JAXBException je) {
			je.printStackTrace();
		}
		catch (IOException ioe) {
			ioe.printStackTrace();
		}
	}

	private void iterateProfiles(final Object objP) {
		JADEProfiles objProfiles = (JADEProfiles) objP;

		System.out.println("Profiles name= " + objProfiles.getName());
		List<Object> objProfileOrProfiles = objProfiles.getIncludeOrProfile();
		for (Object object : objProfileOrProfiles) {
			if (object instanceof JADEProfile) {
				iterateProfile(object);
			}
		}

	}

	private void iterateProfile(final Object objP) {
		if (objP instanceof JADEProfile) {
			JADEProfile objProfile = (JADEProfile) objP;
			System.out.println("--- Profile name = " + objProfile.getName());
			for (Object object2 : objProfile.getIncludeOrIncludesOrParams()) {
				if (object2 instanceof JADEProfileIncludes) {
				}
				else {
					if (object2 instanceof JADEParam) {
						JADEParam objParam = (JADEParam) object2;
						System.out.println(" ... Param name = " + objParam.getName());
						Object objV = objParam.getIncludeOrValues();
						if (objV instanceof JADEParamValues) {
							JADEParamValues objValues = (JADEParamValues) objV;
							for (Object objV2 : objValues.getValue()) {
								Value objValue = (Value) objV2;
								System.out.println(String.format(" +++ value '%1$2' with prefix '%2$s'", objValue.getVal(), objValue.getPrefix()));
							}
						}
					}
					else {
						if (object2 instanceof JADEParams) {
							JADEParams objParams = (JADEParams) object2;
							for (Object object3 : objParams.getParamOrParams()) {
								if (object3 instanceof JADEParam) {
									JADEParam objParam = (JADEParam) object3;
									System.out.println("Param name = " + objParam.getName());
									for (Object objV2 : objParam.getIncludeOrValues()) {
										if (objV2 instanceof JADEParamValues) {
											JADEParamValues objValues = (JADEParamValues) objV2;
											for (Object objV3 : objValues.getValue()) {
												Value objValue = (Value) objV3;
												System.out.println(String.format(" +++ value '%1$s' with prefix '%2$s'", objValue.getVal(),
														objValue.getPrefix()));
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	@Test
	public void testProfiles() {
		try {
			// create a JAXBContext capable of handling classes generated into
			JAXBContext jc = JAXBContext.newInstance(JADEProfiles.class);
			//			JAXBContext jc = JAXBContext.newInstance("com.sos.jade.jaxb.configuration");

			// create an Unmarshaller
			Unmarshaller u = jc.createUnmarshaller();

			// unmarshal an instance document into a tree of Java content
			ConfigurationElement objJADEConfig = (ConfigurationElement) u.unmarshal(new FileInputStream("ConfigurationExample.jadeconf"));
			//			ConfigurationElement objJADEConfig = (ConfigurationElement) u.unmarshal(new FileInputStream("C:/Users/KB/sossvn/doc/en/JADE/jade_configuration_v1.0.xsd"));
			Vector<Object> objProfileOrProfiles = (Vector<Object>) objJADEConfig.getIncludeOrProfileOrProfiles();
			for (Object object : objProfileOrProfiles) {
				if (object instanceof JADEProfile) {
					JADEProfile objProfile = (JADEProfile) object;
					for (Object object2 : objProfile.getIncludeOrIncludesOrParams()) {
						if (object2 instanceof JADEProfileIncludes) {
						}
						else {
							if (object2 instanceof JADEParams) {
							}
						}
					}
				}
				else {
					if (object instanceof JADEProfiles) {
						JADEProfiles objProfiles = (JADEProfiles) object;
					}
				}
			}
			//			JADEProfiles objJADEProfiles = (JADEProfiles) objJADEConfig.getIncludeOrProfileOrProfiles();

			// create a Marshaller and marshal to a file
			Marshaller m = jc.createMarshaller();
			m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
			m.marshal(objJADEConfig, System.out);

		}
		catch (JAXBException je) {
			je.printStackTrace();
		}
		catch (IOException ioe) {
			ioe.printStackTrace();
		}
	}

}
