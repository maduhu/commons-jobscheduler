package com.sos.JSHelper.io.Files;

import java.io.File;
import java.util.Vector;
import java.util.regex.Pattern;

import junit.framework.Assert;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.sos.JSHelper.Logging.Log4JHelper;
import com.sos.JSHelper.Options.SOSOptionTime;
import com.sos.JSHelper.io.SOSFileSystemOperations;

//import sos.scheduler.file.JobSchedulerFileOperationsBaseTest;

/**
* \class SOSFileOperationsTest 
* 
* \brief SOSFileOperationsTest - 
* 
* \details
*
* \section SOSFileOperationsTest.java_intro_sec Introduction
*
* \section SOSFileOperationsTest.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* @version $Id$13.09.2010
* \see reference
*
* Created on 13.09.2010 16:10:28
 */

/**
 * @author KB
 *
 */
public class SOSFileSystemOperationsTest {

	private final String		conClassName		= "SOSFileSystemOperationsTest";

	private String				strReplaceWhat		= "";
	private String				strReplaceWith		= "";
	private String				strStringToWorkOn	= "";

	private static final String	conSVNVersion		= "$Id$";
	private static final Logger	logger				= Logger.getLogger(SOSFileSystemOperationsTest.class);

	private static Log4JHelper	objLogger			= null;

	public SOSFileSystemOperationsTest() {
		//
	}

	/**
	 * \brief setUpBeforeClass
	 * 
	 * \details
	 *
	 * \return void
	 *
	 * @throws java.lang.Exception
	 */
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	/**
	 * \brief tearDownAfterClass
	 * 
	 * \details
	 *
	 * \return void
	 *
	 * @throws java.lang.Exception
	 */
	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	/**
	 * \brief setUp
	 * 
	 * \details
	 *
	 * \return void
	 *
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {
		Log4JHelper.flgUseJobSchedulerLog4JAppender = false;
		objLogger = new Log4JHelper("./log4j.properties"); //$NON-NLS-1$
		objLogger.setLevel(Level.DEBUG);

	}

	/**
	 * \brief tearDown
	 * 
	 * \details
	 *
	 * \return void
	 *
	 * @throws java.lang.Exception
	 */
	@After
	public void tearDown() throws Exception {
	}

	@Test
	public void testDoReplace() throws Exception {

		/**
		 * simple textrecplacing: replace the full string
		 */

		strReplaceWhat = "Hello";
		strReplaceWith = "World";
		strStringToWorkOn = "Hello";

		doTest("replace the full string", "Hello", "World", strStringToWorkOn, strReplaceWith);

		/**
		 * simple example: replace the groups by absolute values
		 */
		strReplaceWhat = "(1)abc(12)def(.*)";
		strReplaceWith = "A;BB;CCC";
		strStringToWorkOn = "1abc12def123.txt";

		doTest("replace the groups by absolute values", strReplaceWhat, strReplaceWith, strStringToWorkOn, "AabcBBdefCCC");

		strReplaceWhat = "(INT_)(.*)";
		// strReplaceWith = ";\\2";
		strReplaceWith = "\\-;\\2";
		strStringToWorkOn = "INT_4711-0815.txt";

		doTest("suppres the first part of the value", strReplaceWhat, strReplaceWith, strStringToWorkOn, "4711-0815.txt");

		/**
		 * a little bit more complicated: 
		 * the first 5 and the last chars are part of the new string. the 6 chars in the middle are discarded.
		 * the "non-standard" pattern \- is used to indicate, that this group has to be discarded in the 
		 * resulting text. As an alternative it is possible to use an empty item ";;".
		 */
		strReplaceWhat = "(.{5})(.{6})(.*)";
		// strReplaceWith = "\\1;\\-;\\3;";
		strReplaceWith = "\\1;;\\3;";
		strStringToWorkOn = "abcba123456hallo.txt";

		doTest("suppres the first part of the value", strReplaceWhat, strReplaceWith, strStringToWorkOn, "abcbahallo.txt");

		/**
		 * An example for swapping the groups 
		 */
		doTest("Swapping", "(1)abc(12)def(.*)", "\\2;\\1;CCC", "1abc12def123.txt", "12abc1defCCC");

		/**
		 * Delete a group at the end of the string
		 */
		doTest("Swapping", "(1)abc(12)def(.*)", "\\2;\\1;\\-", "1abc12def123.txt", "12abc1def");

		/**
		 * put a prefix to the new string-value
		 */
		doTest("Prefix", "(.*)", "prefix\\1", "1abc12def123.txt", "prefix1abc12def123.txt");

		/**
		 * a suffix is possible, too
		 */
		doTest("Prefix", "(.*)", "\\1suffix", "1abc12def123.txt", "1abc12def123.txtsuffix");

		/**
		 * a suffix and a prefix is possible. makes it more flexible
		 */
		doTest("Prefix", "(.*)", "prefix\\1suffix", "1abc12def123.txt", "prefix1abc12def123.txtsuffix");

		/**
		 * now we have a prefix with the value but we have to delete it on the result-value
		 */
		doTest("Prefix", "(prefix)(.*)", "\\-;\\2", "prefix1abc12def123.txt", "1abc12def123.txt");

		/*
		 * Introducing a "non-regexp" feature: date-variable.
		 * The format has to be given as a valid java-daten-format mask.
		 * 
		 */
		String strDate = SOSOptionTime.getCurrentTimeAsString("yyyyMMddHHmm");
		doTest("Date insertion", "(.*)(.txt)", "\\1_[date:yyyyMMddHHmm];\\2", "1.txt", "1_" + strDate + ".txt");

		strDate = SOSOptionTime.getCurrentTimeAsString();
		doTest("Date insertion without date-format", "(.*)(.txt)", "\\1_[date:];\\2", "1.txt", "1_" + strDate + ".txt");

		strDate = SOSOptionTime.getCurrentTimeAsString();
		doTest("Date suffix", "(.*)(.txt)", "\\1;\\2_[date:]", "1.txt", "1.txt_" + strDate);

		strDate = SOSOptionTime.getCurrentTimeAsString();
		doTest("Date prefix", "(.*)(.txt)", "[date:]_\\1;\\2", "1.txt", strDate + "_1.txt");

	}

	/**
	 * just another variable: filename
	 * uppercase- or lowercase-conversion is possible.
	 * the type of conversion is indicated by writing "uppercase" oder "lowercase" after the colon.
	 */
	@Test
	public void VariableFileNameTest() throws Exception {
		doTest("FileName uppercase", ".*", "[filename:uppercase]", "1.txt", "1.TXT");
		doTest("FileName lowercase", ".*", "[filename:lowercase]", "1.txt", "1.txt");
	}

	private void doTest(final String strText, final String strReplaceWhat, final String strReplaceWith, final String strWork, final String strExpectedResult) throws Exception {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::doTest";

		SOSFileSystemOperations objFSO = new SOSFileSystemOperations();
		String strResult = objFSO.getReplacementFilename(strWork, strReplaceWhat, strReplaceWith);
		Assert.assertEquals(strText, strExpectedResult, strResult);

	} // private void doTest

	@Test
	public void ResultListTest() throws Exception {

		String file = "c:/temp";
		String fileSpec = "^.*\\.kb$";

		for (int j = 0; j < 10; j++) {
			JSFile objTestFile = new JSFile(file + "/test" + j + ".kb");
			objTestFile.WriteLine("This is a line for testing");
			objTestFile.deleteOnExit();
			objTestFile.close();
			logger.info("File created: " + objTestFile.getAbsolutePath());
		}

		String minFileAge = "0";
		String maxFileAge = "0";
		int skipFirstFiles = 0;
		int skipLastFiles = 0;
		String minFileSize = "-1";
		String maxFileSize = "-1";

		SOSFileSystemOperations objFSO = new SOSFileSystemOperations();

		boolean flgOperationWasSuccessful = objFSO.existsFile(file, fileSpec, Pattern.CASE_INSENSITIVE, //
				minFileAge, maxFileAge, minFileSize, maxFileSize, //
				skipFirstFiles, skipLastFiles, null);

		System.out.println("flgOperationWasSuccessful: " + flgOperationWasSuccessful);
		if (flgOperationWasSuccessful) {
			
			Vector<File> lstR = objFSO.lstResultList;
			int intNoOfHits = lstR.size();
			logger.info("intNoOfHits = " + intNoOfHits);
			for (File file2 : lstR) {
				logger.info("FileName = " + file2.getAbsolutePath());
			}
		}
	}
}
