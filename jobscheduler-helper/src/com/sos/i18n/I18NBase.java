package com.sos.i18n;
import java.util.Locale;

import org.apache.log4j.Logger;

/**
* \class I18NBase 
* 
* \brief I18NBase - 
* 
* \details
*
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* @version $Id$10.01.2011
* \see reference
*
* Created on 10.01.2011 19:14:11
 */
/**
 * @author KB
 *
 */
public class I18NBase extends com.sos.JSHelper.Basics.JSToolBox {
	@SuppressWarnings("unused")
	private final String		conClassName		= "I18NBase";
	@SuppressWarnings("unused")
	private final String		conSVNVersion		= "$Id$";
	private static final Logger	logger				= Logger.getLogger(I18NBase.class);
	/*!
	 * \var OUTPUT_CHARSET_NAME
	 * \brief We use ISO-8859-1, rather than the JVM's default encoding, as the encoding when writing the resource bundle
	 * properties files, since ISO-8859-1 is the encoding Java uses to read resource bundle properties files unless you
	 * jump through some major hoops, which we currently do not jump through in
	 * {@link com.sos.i18n.Msg#getResourceBundle()}.
	 * <p/>
	 * Note, for compatibility with older Java runtimes, we use the "historical Java name" for the encoding -
	 * "ISO8859_1".
	 */
	private static final String	OUTPUT_CHARSET_NAME	= "ISO-8859-1";
	/*!
	 * \var BUNDLE_BASE_NAME
	 * \brief This is the base name of this task's own I18N message bundle.
	 */
	static Msg.BundleBaseName	BUNDLE_BASE_NAME;
	private String				strLocale			= Locale.getDefault().toString();
	private Locale				objLocale			= Locale.getDefault();

	protected I18NBase() {
	}

	protected I18NBase(String strBundleBaseName) {
		super(strBundleBaseName);
		BUNDLE_BASE_NAME = new Msg.BundleBaseName(strBundleBaseName);
	}

	protected I18NBase(String strBundleBaseName, final String pstrLocale) {
		super(strBundleBaseName);
		BUNDLE_BASE_NAME = new Msg.BundleBaseName(strBundleBaseName, pstrLocale);
		strLocale = pstrLocale;
		objLocale = new Locale(strLocale);
	}

	/**
	 * Gets an I18N message from this task's own resource bundle.
	 *
	 * @param  key     the bundle key that is associated with the message to log
	 * @param  varargs values to replace the message's placeholders with
	 *
	 * @return the message in the VM's default locale
	 */
	protected String getMsg(String key, Object... varargs) {
		if(BUNDLE_BASE_NAME != null) {
			String strBundleBaseName = BUNDLE_BASE_NAME.getBundleBaseName();
			BUNDLE_BASE_NAME = new Msg.BundleBaseName(strBundleBaseName, strLocale);
		}
		return Msg.createMsg(BUNDLE_BASE_NAME, objLocale, key, varargs).toString();
		// return Msg.createMsg(BUNDLE_BASE_NAME, key, varargs).toString();
	}

	public void setLocale(final String pstrLocale) {
		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::setLocale";
//		logger.debug("set locale to " + pstrLocale);
		if (pstrLocale != null && pstrLocale.trim().length() > 0) {
			strLocale = pstrLocale;
			objLocale = new Locale(pstrLocale);
		}
	} // private void setLocale
}
