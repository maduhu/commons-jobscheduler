package com.sos.JSHelper.Options;
/**
* \class JSOptionBoolean
*
* \brief JSOptionBoolean -
*
* \details
*
* \section JSOptionBoolean.java_intro_sec Introduction
*
* \section JSOptionBoolean.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author eqbfd
* @version $Id$23.01.2009
* \see reference
*
* Created on 23.01.2009 14:41:38
 */
/**
 * @author eqbfd
 *
 */
public class SOSOptionBoolean extends SOSOptionElement {
	private static final long						serialVersionUID	= -955477664516893069L;
	private final String							conClassName		= "JSOptionBoolean";
	@SuppressWarnings("hiding") public final String	ControlType			= "checkbox";

	@Override public String getControlType() {
		return ControlType;
	}

	/**
	 * \brief JSOptionBoolean
	 *
	 * \details
	 *
	 * @param pPstrKey
	 * @param pPstrDescription
	 * @param pPstrValue
	 * @param pPstrDefaultValue
	 * @param pPflgIsMandatory
	 * @throws Exception
	 */
	public SOSOptionBoolean(final JSOptionsClass pobjParent, final String pPstrKey, final String pPstrDescription, final String pPstrValue,
			final String pPstrDefaultValue, final boolean pPflgIsMandatory) {
		super(pobjParent, pPstrKey, pPstrDescription, pPstrValue, pPstrDefaultValue, pPflgIsMandatory);
		intOptionType = isOptionTypeBoolean; // Boolean
		this.Value(pPstrValue);
		this.setNotDirty();
	}

	/**
	 * \brief Value - Wert des Datenelements festlegen
	 *
	 * \details
	 *
	 * @param pstrValue
	 * @return
	 * @throws Exception
	 */
	@Override public void Value(final String pstrValue) {
		if (isNotEmpty(pstrValue)) {
			/**
			 * \todo über den regexp prüfen, ob die Werte syntaktisch korrekt sind
			 */
			super.Value(pstrValue);
			flgValue = String2Bool();
		}
		else {
			super.Value("");
		}
		flgValue = String2Bool(strValue);
	}

	public void value(final boolean pflgValue) {
		@SuppressWarnings("unused") final String conMethodName = conClassName + "::value";
		if (pflgValue != flgValue) {
			flgValue = pflgValue;
			if (pflgValue) {
				this.Value("true");
			}
			else {
				this.Value("false");
			}
		}
	} // public void value}

	public boolean value() {
		@SuppressWarnings("unused") final String conMethodName = conClassName + "::Value";
		return flgValue;
	} // public flgValue Value}

	/**
	 *
	 * \brief isTrue
	 *
	 * \details
	 * returns true, if the value of this option is "true".
	 *
	 * \return boolean
	 * \see isFalse()
	 *
	 * @return
	 */
	public boolean isTrue() {
		@SuppressWarnings("unused") final String conMethodName = conClassName + "::isTrue";
		return flgValue == true;
	} // private boolean isTrue

	/**
	 *
	 * \brief isFalse
	 *
	 * \details
	 * returns "true", if the value of this option is "false".
	 *
	 * \return boolean
	 * \see isTrue()
	 *
	 * @return
	 */
	public boolean isFalse() {
		@SuppressWarnings("unused") final String conMethodName = conClassName + "::isFalse";
		return flgValue == false;
	} // private boolean isFalse

	public void setTrue() {
		@SuppressWarnings("unused") final String conMethodName = conClassName + "::setTrue";
		this.value(true);
	} // private void setTrue

	public void setFalse() {
		@SuppressWarnings("unused") final String conMethodName = conClassName + "::setFalse";
		this.value(false);
	} // private void setFalse
}
