package com.sos.JSHelper.Options;

import java.io.File;

import com.sos.JSHelper.Annotations.JSOptionDefinition;
import com.sos.JSHelper.Exceptions.JobSchedulerException;

/**
* \class JSOptionFolderName
*
* \brief JSOptionFolderName -
*
* \details
*
* \section JSOptionFolderName.java_intro_sec Introduction
*
* \section JSOptionFolderName.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* @version $Id$14.06.2009
* \see reference
*
* Created on 14.06.2009 16:52:26
 */

/**
 * @author KB
 *
 */
public class SOSOptionFolderName extends SOSOptionFileName {

	private static final long	serialVersionUID	= 1197392401084895147L;
	private final String		conClassName		= "JSOptionFolderName";
	@SuppressWarnings("hiding")
	public final String			ControlType			= "folder";


	public SOSOptionFolderName (final String pstrFolderName) {
		super(null, "", "description", pstrFolderName, "", false);
	}
	/**
	* \brief CreateFolder - Option: Folder anlegen, wenn noch nicht vorhanden
	*
	* \details
	*
	*/
	@JSOptionDefinition(name = "CreateFolder", value = "true", description = "Folder anlegen, wenn noch nicht vorhanden", key = "CreateFolder", type = "JSOptionBoolean", mandatory = false)
	public SOSOptionBoolean		CreateFolder		= new SOSOptionBoolean(objParentClass, // Verweis auf die SOSOptionClass-Instanz
															".CreateFolder", // Schlüssel, i.d.r. identisch mit dem Namen der Option
															"Folder anlegen, wenn noch nicht vorhanden", // Kurzbeschreibung
															"true", // Wert
															"true", // defaultwert
															false // Option muss einen Wert haben
													);

	/**
	 * \brief JSOptionFolderName
	 *
	 * \details
	 *
	 * @param pobjParent
	 * @param pstrKey
	 * @param pstrDescription
	 * @param pstrValue
	 * @param pstrDefaultValue
	 * @param pflgIsMandatory
	 */
	public SOSOptionFolderName(final JSOptionsClass pobjParent, final String pstrKey, final String pstrDescription, final String pstrValue,
			final String pstrDefaultValue, final boolean pflgIsMandatory) {
		super(pobjParent, pstrKey, pstrDescription, pstrValue, pstrDefaultValue, pflgIsMandatory);

		intOptionType = isOptionTypeFolder;
	}

	/**
	 * \brief Value - Wert der Option liefern
	 *
	 * \details
	 *
	 * @param pstrValue
	 * @return
	 */
	@Override
	public String Value() {
		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::Value";
		if (strValue == null) {
			strValue = "";
		}
		String strLValue = super.Value();
		if (IsNotEmpty()) {
			if (strLValue.endsWith("/") || strLValue.endsWith("\\") || isDotFolder()) {

			}
			else {
				strLValue = strLValue + "/";
			}

			if (objParentClass != null) {
				// prüfen, ob es den Folder gibt ...
				//				this.strValue = this.objParentClass.CheckFolder(this.strValue, conMethodName, this.CreateFolder.flgValue);
			}
		}
		return strLValue;
	}

	public boolean isDotFolder () {
		String strT = super.Value();
		return strT.equals(".") || strT.equals("..");
	}
	
	public File[] listFiles () {
		File[] objFL = this.JSFile().listFiles();
		if (objFL != null) {
		}
		else {
			throw new JobSchedulerException(String.format("No Files found for pathname '%1$s'", strValue));
		}

		return objFL;
	}
}
