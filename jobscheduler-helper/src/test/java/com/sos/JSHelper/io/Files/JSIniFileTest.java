package com.sos.JSHelper.io.Files;

/**
* \class JSIniFileTest 
* 
* \brief JSIniFileTest - 
* 
* \details
*
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* \version $Id$
* \see reference
*
* Created on 26.08.2011 21:31:13
 */

import org.apache.log4j.Logger;
import org.junit.*;

import java.io.File;
import java.util.Map;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

/**
 * @author KB
 *
 */
public class JSIniFileTest {

	private static final String	conIniFileName	= "R:/backup/sos/java/development/SOSDataExchange/examples/jade_settings.ini";
	@SuppressWarnings("unused")
	private final String		conClassName	= "JSIniFileTest";
	private static final String	conSVNVersion	= "$Id$";
	private static final Logger	logger			= Logger.getLogger(JSIniFileTest.class);

	private JSIniFile			objF			= null;

	public JSIniFileTest() {
		//
	}

	/**
	 * \brief setUpBeforeClass
	 * 
	 * \details
	 *
	 * \return void
	 *
	 * @throws java.lang.Exception
	 */
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	/**
	 * \brief tearDownAfterClass
	 * 
	 * \details
	 *
	 * \return void
	 *
	 * @throws java.lang.Exception
	 */
	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	/**
	 * \brief setUp
	 * 
	 * \details
	 *
	 * \return void
	 *
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {
		objF = new JSIniFile(conIniFileName);
	}

	/**
	 * \brief tearDown
	 * 
	 * \details
	 *
	 * \return void
	 *
	 * @throws java.lang.Exception
	 */
	@After
	public void tearDown() throws Exception {
	}

	/**
	 * Test method for {@link com.sos.JSHelper.io.Files.JSIniFile#JSIniFile(java.lang.String)}.
	 */
	@Test
	public final void testJSIniFile() {
		assertTrue("is not null", objF != null);
	}

	/**
	 * Test method for {@link com.sos.JSHelper.io.Files.JSIniFile#isDirty()}.
	 */
	@Test
	public final void testIsDirty() {
		// fail("Not yet implemented"); // TODO
	}

	/**
	 * Test method for {@link com.sos.JSHelper.io.Files.JSIniFile#Sections()}.
	 */
	@Test
	public final void testSections() {
		Map<String, SOSProfileSection> objS = objF.Sections();
		assertTrue("is not null", objS != null);
		logger.debug("number of sections = " + objS.size());
		for (SOSProfileSection objPS : objS.values()) {
			logger.debug(objPS.Name());
			for (SOSProfileEntry objEntry : objPS.Entries().values()) {
				logger.debug("     " + objEntry.Name() + " = " + objEntry.Value());
			}
		}
	}

	/**
	 * Test method for {@link com.sos.JSHelper.io.Files.JSIniFile#Value(java.lang.String)}.
	 */
	@Test
	public final void testValueString() {
	}

	/**
	 * Test method for {@link com.sos.JSHelper.io.Files.JSIniFile#Value(java.lang.String, java.lang.String)}.
	 */
	@Test
	public final void testValueStringString() {
	}

	/**
	 * Test method for {@link com.sos.JSHelper.io.Files.JSIniFile#setValue(java.lang.String, java.lang.String)}.
	 */
	@Test
	@Ignore("Test set to Ignore for later examination, fails in Jenkins build")
	public final void testSetValue() {
		SOSProfileSection obj = objF.getSection("do_sftp");
		assertEquals("section name not ok", "do_sftp", obj.strSectionName);
		obj.addEntry("Test", "HalloTest");
		SOSProfileEntry objE = obj.Entry("protocol");
		String strT = objE.Value();
		assertEquals("Entry Value test failed", "sftp", strT);
	}

	@Test
	@Ignore("Test set to Ignore for later examination, fails in Jenkins build")
	public final void testDeleteValue() {
		SOSProfileSection obj = objF.getSection("do_sftp");
		assertEquals("section name not ok", "do_sftp", obj.strSectionName);
		obj.addEntry("Test", "HalloTest");
		obj.deleteEntry("protocol");
		SOSProfileEntry objE = obj.Entry("protocol");
		assertEquals("Entry delete failed", null, objE);
	}

	/**
	 * Test method for {@link com.sos.JSHelper.io.Files.JSIniFile#SectionName(java.lang.String)}.
	 */
	@Test
	@Ignore("Test set to Ignore for later examination, fails in Jenkins build")
	public final void testSectionNameString() {
		SOSProfileSection obj = objF.getSection("do_sftp");
		assertEquals("section name not ok", "do_sftp", obj.strSectionName);
	}

	/**
	 * Test method for {@link com.sos.JSHelper.io.Files.JSIniFile#SectionName()}.
	 */
	@Test
	public final void testSectionName() {
	}

	/**
	 * Test method for {@link com.sos.JSHelper.io.Files.JSIniFile#getPropertyString(java.lang.String, java.lang.String, java.lang.String)}.
	 */
	@Test
	public final void testGetPropertyString() {
	}

	/**
	 * Test method for {@link com.sos.JSHelper.io.Files.JSIniFile#getPropertyInt(java.lang.String, java.lang.String, int)}.
	 */
	@Test
	public final void testGetPropertyInt() {
	}

	/**
	 * Test method for {@link com.sos.JSHelper.io.Files.JSIniFile#getPropertyBool(java.lang.String, java.lang.String, boolean)}.
	 */
	@Test
	public final void testGetPropertyBool() {
	}

	/**
	 * Test method for {@link com.sos.JSHelper.io.Files.JSIniFile#ProfileName()}.
	 */
	@Test
	public final void testProfileName() {
		String strName = objF.strFileName;
		assertTrue("name is identisch", strName.replace('\\', '/').equals(conIniFileName.replace('\\', '/')));
	}

	/**
	 * Test method for {@link com.sos.JSHelper.io.Files.JSIniFile#ProfileName(java.lang.String)}.
	 */
	@Test
	public final void testProfileNameString() {
	}

	/**
	 * Test method for {@link com.sos.JSHelper.io.Files.JSIniFile#toString()}.
	 */
	@Test
	public final void testToString() {
		logger.debug(objF.toString());
	}

	@Test
	@Ignore("Test set to Ignore for later examination")
	public final void testSaveAs() {
		String strSaveAsFileName = JSFile.getTempdir() + "/SaveAs.ini";
		new File(strSaveAsFileName).delete();
		objF.saveAs(strSaveAsFileName);
		assertTrue("File exists ", new File(strSaveAsFileName).exists());
	}
	
	@Test
	public final void testCreateInifile () {
		String strNewIniFileName = JSFile.getTempdir() + "/CreateNew.ini";
		JSIniFile objNew = new JSIniFile(strNewIniFileName);
		objNew.delete();
		SOSProfileSection objS = objNew.addSection("Test2");
		objS.addEntry("Test", "ValueOfTest");
		objS = objNew.addSection("Test3");
		objS.addEntry("Test", "ValueOfTest");
		objNew.save();
		assertTrue("File exists ", new File(strNewIniFileName).exists());		
	}
}
