package com.sos.JSHelper.io.Files;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.io.IOException;

import org.apache.log4j.Logger;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

/**
* \class JSFileTest 
* 
* \brief JSFileTest - 
* 
* \details
*
* \section JSFileTest.java_intro_sec Introduction
*
* \section JSFileTest.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author EQALS
* @version $Id$14.09.2009
* \see reference
*
* Created on 14.09.2009 09:30:29
 */

public class JSFileTest {

	private final String		conClassName	= "JSFileTest";
	private final String		strRec			= "Eine Zeile zum Test ...";
	private final String		strFolderName	= "R:\\backup\\sos\\Java\\junittests\\testdata\\JSCsvFileTest";
	private String				strTestFileName	= strFolderName + "test.txt";

	private static Logger		logger			= Logger.getLogger(JSFileTest.class);

	public JSFileTest() {
		//
	}

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		// JSFile fleFile = new JSFile(strTestFileName);
		// fleFile.delete();
	}

	@Before
	public void setUp() throws Exception {
	}

	@After
	public void tearDown() throws Exception {
	}

	private void createTestFile() throws IOException {
		JSFile objTestFile = new JSFile(strTestFileName);
		for (int i = 0; i <= 40; i++) {
			objTestFile.WriteLine(strRec);
		}
		objTestFile.close();
	}

	// @Test
	public void testCopy() throws Exception {
		JSFile fleFile = new JSFile("L:/TestData/data/invcon/reference-stocks-1546.xml");
		JSFile fleTarget = new JSFile("L:/TestData/data/invcon/reference-stocks-1546b.xml");
		fleFile.copy("L:/TestData/data/invcon/reference-stocks-1546b.xml");
		fleTarget.delete();

		// Anderer Konstruktor
		fleFile = new JSFile("L:/TestData/data/invcon/", "reference-stocks-1546.xml");
		fleFile.copy("L:/TestData/data/invcon/reference-stocks-1546b.xml");
		fleTarget.delete();
	}

	@Test
	public void testGetTimeStamp () {
		JSFile fleT = JSFile.createTempFile();
		System.out.println(fleT.getTimeStamp());
	}
	// @Test
	public void testAppendFile() throws Exception {
		createTestFile();
		JSFile fleFile = new JSFile(strTestFileName);
		long lngFileSize = fleFile.length();
		String strTarget = strFolderName + "target.txt";
		fleFile.copy(strTarget);

		fleFile.AppendFile(strTarget);
		assertEquals("file size not as expected", lngFileSize * 2, fleFile.length());
	}

	// @Test(expected = com.sos.JSHelper.Exceptions.JobSchedulerException.class)
	public void testAppendFile2() throws Exception {
		createTestFile();
		JSFile fleFile = new JSFile(strTestFileName);
		long lngFileSize = fleFile.length();
		String strFile2Append = strTestFileName;
		fleFile.copy(strFile2Append);

		fleFile.AppendFile(strFile2Append);
		assertEquals("file size not as expected", lngFileSize * 2, fleFile.length());
	}

	// @Test
	public void testLock() throws Exception {
		JSFile fleFile = new JSFile(strTestFileName);
		fleFile.doLock();
		assertTrue("Erwartet wird ein true, weil File gesperrt ... ", fleFile.isLocked());

		fleFile.WriteLine(strRec);

		fleFile.close();
		assertFalse("Erwartet wird ein false, weil File nicht mehr gesperrt ... ", fleFile.isLocked());
	}

	// @Test
	public void testExclusive() throws Exception {
		JSFile fleFile = new JSFile("c:/temp/test-exclusive.txt");
		fleFile.setExclusive(true);
		fleFile.WriteLine("Die Basis ist das Fundament der Grundlage");
		assertTrue("Erwartet wird ein true, weil File exclusive ... ", fleFile.isExclusive());

		fleFile.close();
		assertFalse("Erwartet wird ein false, weil File nicht mehr exclusive ... ", fleFile.isExclusive());
		fleFile.delete();
	}

	// @Test
	public void doDelete() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::doDelete";

		JSFile fleFile = new JSFile(strTestFileName);

		fleFile.delete();
		assertFalse("Erwartet wird ein false, weil File nicht mehr da ... ", fleFile.exists());

	} // private void doDelete

	// @Test
	public void doWrite() throws Exception {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::doWrite";

		JSFile fleFile = new JSFile(strTestFileName);
		fleFile.doLock();
		for (int i = 0; i < 1; i++) {
			fleFile.WriteLine(strRec);
		}
		fleFile.close();

		assertEquals("Satz vergleich", strRec + System.getProperty("line.separator"), fleFile.File2String());
		fleFile.close();
	} // private void doWrite

	// @Test
	public void getLine() throws Exception {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::getLine";

		JSFile fleFile = new JSFile(strTestFileName);
		fleFile.doLock();

		assertEquals("Satz vergleich", strRec, fleFile.GetLine().toString());
		fleFile.close();

	} // private void getLine

	// @Test
	public void doRead() throws Exception {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::doRead";

		JSFile fleFile = new JSFile(strTestFileName);
		fleFile.doLock();

		assertEquals("Satz vergleich", strRec + System.getProperty("line.separator"), fleFile.File2String());
		fleFile.close();

	} // private void doRead

	// @Test
	public void MassRandom() throws Exception {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::MassRandom";

		JSFile fleFile = new JSFile(strTestFileName);
		fleFile.doLock();
		for (int i = 0; i < 10000; i++) {
			fleFile.WriteLine(strRec);
		}
		fleFile.close();
		fleFile.delete();
		assertEquals("Dummy", "a", "a");
	} // private void MassRandom

	// @Test
	public void MassSequential() throws Exception {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::MassSequential";

		JSFile fleFile = new JSFile(strTestFileName);
		for (int i = 0; i < 10000; i++) {
			fleFile.WriteLine(strRec);
		}
		fleFile.close();

		assertEquals("Dummy", "a", "a");
	} // private void MassSequential

	// @Test
	public void CreateBackupTest() throws Exception {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::CreateBackupTest";

		JSFile fleFile = new JSFile(strTestFileName);
		String strNewFileName = fleFile.CreateBackup();
		fleFile.close();
		JSFile fleBackUp = new JSFile(strNewFileName);
		assertTrue("Datei existiert", fleBackUp.exists());
		fleBackUp.delete();
	} // private void CreateBackupTest

	// @Test
	public void CreateBackupTest2() throws Exception {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::CreateBackupTest2";

		JSFile fleFile = new JSFile(strTestFileName);
		String strNewFileName = fleFile.CreateBackup(".willi");
		fleFile.close();
		JSFile fleBackUp = new JSFile(strNewFileName);
		assertTrue("Datei existiert", fleBackUp.exists());
		fleBackUp.delete();
	} // private void CreateBackupTest2

	// @Test
	public void CreateBackupTest3() throws Exception {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::CreateBackupTest3";

		JSFile fleFile = new JSFile(strTestFileName);
		fleFile.BackupFolderName.Value(System.getProperty("java.io.tmpdir"));
		String strNewFileName = fleFile.CreateBackup(".willi");
		fleFile.close();
		JSFile fleBackUp = new JSFile(strNewFileName);
		assertTrue("Datei existiert", fleBackUp.exists());
		fleBackUp.delete();
	} // private void CreateBackupTest3

	// @Test
	public void TestToXml() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::TestToXml";

		JSFile objFile = new JSFile(strTestFileName);
		System.out.println(objFile.toXml());

	} // private void TestToXml

	// @Test
	public void TestGetContent() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::TestGetContent";

		JSFile objFile = new JSFile(strTestFileName);
		StringBuffer strB = new StringBuffer("");
		String strT = strRec + System.getProperty("line.separator");
		for (int i = 0; i < 10000; i++) {
			strB.append(strT);
		}

		assertEquals("Content read ...", strB.toString(), objFile.getContent());
		System.out.println(objFile.toXml());

	} // private void TestToXml

	// @Test
	public void testZipWrite() throws IOException {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::testZipWrite";

		JSFile objFile = new JSFile(strTestFileName + ".gz");
		objFile.setZipFile(true);

		String strText = "Die Basis ist das Fundament der Grundlage";
		objFile.WriteLine(strText);
		objFile.close();

		objFile = new JSFile(strTestFileName + ".gz");
		objFile.setZipFile(true);
		String strT = objFile.getContent();
		objFile.close();

		assertEquals("wrong content", strText + System.getProperty("line.separator"), strT);

		objFile = new JSFile(strTestFileName + ".gz");
		objFile.setZipFile(true);
		StringBuffer strB = objFile.GetLine();
		objFile.close();

		assertEquals("wrong content", strText, strB.toString());

	} // private void testZipWrite

	 @Test
	public void testCreateUniqueFileName() throws IOException {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::testCreateUniqueFileName";
 
		JSFile objFile = new JSFile(strTestFileName);
		String strT = objFile.getUniqueFileName();
		JSFile objF1 = new JSFile(strT);
		objF1.WriteLine("test");

		strT = objFile.getUniqueFileName();

	} // private void testCreateUniqueFileName

	// @Test
	public void testCreateUniqueFileName2() throws IOException {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::testCreateUniqueFileName";

		strTestFileName = strFolderName + "test";
		JSFile objFile = new JSFile(strTestFileName);
		objFile.WriteLine("Test");
		String strT = objFile.getUniqueFileName();
		logger.debug(strT);
		JSFile objF1 = new JSFile(strT);
		objF1.WriteLine("test");

		strT = objFile.getUniqueFileName();
		logger.debug(strT);

	} // private void testCreateUniqueFileName

	// @Test
	public void testGetExtensionFileName() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::testGetExtensionFileName";

		JSFile objFile = new JSFile("test.x");
		String strE = objFile.getFileExtensionName();

		assertEquals("wrong extension", ".x", strE);

		objFile = new JSFile("test.xy");
		strE = objFile.getFileExtensionName();

		assertEquals("wrong extension", ".xy", strE);

		objFile = new JSFile("test");
		strE = objFile.getFileExtensionName();

		assertEquals("wrong extension", "", strE);

		objFile = new JSFile("test.job.xml");
		strE = objFile.getFileExtensionName();

		assertEquals("wrong extension", ".xml", strE);

	} // private void testGetExtensionFileName

	// @Test
	public void testBackupProperty() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::testBackupProperty";

		System.setProperty(JSFile.conPropertySOS_JSFILE_EXTENSION_4_BACKUPFILE, ".sostmp");
		JSFile objFile = new JSFile(strTestFileName);
		objFile.CreateBackup();

	} // private void testBackupProperty

	@Test
	public void testExistsAndCanWrite () {
		
		JSTextFile objFile = new JSTextFile("./abcd.properties");
		boolean flgNew = false;
		boolean flgPropFileIsOk = false;

		if (objFile.exists() == false && objFile.getParentFile().canWrite() == true) { // if we can't write we should avoid an exception
		}
		else {
			assertTrue("geht nicht", false);
		}

	}
	// @Test
	public void testDumpHex() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::testDumpHex";

		JSFile objFile = new JSFile(strTestFileName);
		logger.info(objFile.getContent());
		objFile.dumpHex(System.out);

	} // private void testDumpHex

}
