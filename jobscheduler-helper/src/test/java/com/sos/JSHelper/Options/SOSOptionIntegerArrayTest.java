package com.sos.JSHelper.Options;

import static org.junit.Assert.fail;
import junit.framework.Assert;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.sos.JSHelper.Exceptions.JobSchedulerException;

/** \class SOSOptionIntegerArrayTest
 * 
 * \brief SOSOptionIntegerArrayTest -
 * 
 * \details
 *
 * \section SOSOptionIntegerArrayTest.java_intro_sec Introduction
 *
 * \section SOSOptionIntegerArrayTest.java_samples Some Samples
 *
 * \code .... code goes here ... \endcode
 *
 * <p style="text-align:center">
 * <br />
 * --------------------------------------------------------------------------- <br />
 * APL/Software GmbH - Berlin <br />
 * ##### generated by ClaviusXPress (http://www.sos-berlin.com) ######### <br />
 * ---------------------------------------------------------------------------
 * </p>
 * \author KB
 * 
 * @version $Id$02.08.2010 \see reference
 *
 *          Created on 02.08.2010 14:29:00 */

public class SOSOptionIntegerArrayTest {

    @SuppressWarnings("unused")
    private final String conClassName = "SOSOptionIntegerArrayTest";
    private SOSOptionIntegerArray objOption = null;

    public SOSOptionIntegerArrayTest() {
        //
    }

    @BeforeClass
    public static void setUpBeforeClass() throws Exception {
    }

    @AfterClass
    public static void tearDownAfterClass() throws Exception {
    }

    @Before
    public void setUp() throws Exception {
        objOption = new SOSOptionIntegerArray(null, "key", "Description", "1 2 3", "", false);
    }

    @After
    public void tearDown() throws Exception {
    }

    @Test
    public void testToString() {
        Assert.assertEquals("must be '1 2 3'", "1 2 3", objOption.Value());
    }

    @Test
    public void testValueString() {
        String strTestString = "1,2,3,4,5";
        objOption.Value(strTestString);
        Assert.assertEquals("Must be '" + strTestString + "'", strTestString, objOption.Value());
        Assert.assertEquals("Size must be 5", 5, objOption.Values().size());
        int iElem = objOption.Values().elementAt(3 - 1);
        Assert.assertEquals("Value must be 3", 3, iElem);

        strTestString = "1 2 3 4 5";
        objOption.Value(strTestString);
        Assert.assertEquals("Must be '" + strTestString + "'", strTestString, objOption.Value());
        Assert.assertEquals("Size must be 5", 5, objOption.Values().size());
        iElem = objOption.Values().elementAt(3 - 1);
        Assert.assertEquals("Value must be 3", 3, iElem);

        strTestString = "1; 2; 3; 4; 5";
        objOption.Value(strTestString);
        Assert.assertEquals("Must be '" + strTestString + "'", strTestString, objOption.Value());
        Assert.assertEquals("Size must be 5", 5, objOption.Values().size());
        iElem = objOption.Values().elementAt(3 - 1);
        Assert.assertEquals("Value must be 3", 3, iElem);
    }

    @Test
    public void testSOSOptionIntegerArray() {
        // fail("Not yet implemented");
    }

    @Test(expected = JobSchedulerException.class)
    public void testValues() {
        String strTestString = "a b c true";
        objOption.Value(strTestString);
        fail("Expected JobSchedulerException because args are not integer");
    }

    @Test(expected = JobSchedulerException.class)
    public void testValues2() {
        String strTestString = "a b c true";
        String strMessage = "Expected JobSchedulerException because args are not integer";
        // try {
        objOption.Value(strTestString);
        fail(strMessage);
        // }
        // catch (JobSchedulerException expected) {
        // expected.getNestedException().printStackTrace();
        // expected.printStackTrace();
        // }
        // catch (Exception e) {
        // fail(strMessage);
        // }
    }

    @Test
    public void testContains() {

        Assert.assertTrue("Value of 2 ist part of the value-list", objOption.contains(2));

        Assert.assertFalse("Value of 7 ist *not* part of the value-list", objOption.contains(7));

        String strTestString = "1; 2; 3; 4; 5-10";
        objOption.Value(strTestString);

        Assert.assertTrue("Value of 7 ist *now* part of the value-list", objOption.contains(7));

    }
}
