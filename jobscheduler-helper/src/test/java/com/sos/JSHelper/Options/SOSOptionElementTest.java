package com.sos.JSHelper.Options;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;

/** \class SOSOptionElementTest
 * 
 * \brief SOSOptionElementTest -
 * 
 * \details
 *
 * \section SOSOptionElementTest.java_intro_sec Introduction
 *
 * \section SOSOptionElementTest.java_samples Some Samples
 *
 * \code .... code goes here ... \endcode
 *
 * <p style="text-align:center">
 * <br />
 * --------------------------------------------------------------------------- <br />
 * APL/Software GmbH - Berlin <br />
 * ##### generated by ClaviusXPress (http://www.sos-berlin.com) ######### <br />
 * ---------------------------------------------------------------------------
 * </p>
 * \author KB
 * 
 * @version $Id$03.08.2010 \see reference
 *
 *          Created on 03.08.2010 13:47:30 */

/** @author KB */
public class SOSOptionElementTest {

    private final String conClassName = "SOSOptionElementTest";
    private SOSOptionElement objOption = null;

    public SOSOptionElementTest() {
        //
    }

    /** \brief setUpBeforeClass
     * 
     * \details
     *
     * \return void
     *
     * @throws java.lang.Exception */
    @BeforeClass
    public static void setUpBeforeClass() throws Exception {
    }

    /** \brief tearDownAfterClass
     * 
     * \details
     *
     * \return void
     *
     * @throws java.lang.Exception */
    @AfterClass
    public static void tearDownAfterClass() throws Exception {
    }

    /** \brief setUp
     * 
     * \details
     *
     * \return void
     *
     * @throws java.lang.Exception */
    @Before
    public void setUp() throws Exception {
        objOption = new SOSOptionElement(null, "key", "Description", "value", "DefaultValue", true);

    }

    /** \brief tearDown
     * 
     * \details
     *
     * \return void
     *
     * @throws java.lang.Exception */
    @After
    public void tearDown() throws Exception {
    }

    /** \brief testSetPrefix
     * 
     * \details
     *
     * \return void */
    @Test
    public void testSetPrefix() {
        String strPrefix = "alternate_";
        String strKey = "key";
        String strNewKey = objOption.setPrefix(strPrefix);
        assertEquals("Key has wrong prefix", strPrefix + strKey, strNewKey);

        objOption.strKey = conClassName + ".key";
        strNewKey = objOption.setPrefix(strPrefix);
        assertEquals("Key has wrong prefix", conClassName + "." + strPrefix + strKey, strNewKey);
    }

    @Test
    public void testHide() {
        String strT = objOption.toString();
        assertEquals("toString", "key (Description): value", strT);
        objOption.setHideValue(true);
        assertEquals("toString", "key (Description): *****", objOption.toString());
        objOption.setHideOption(true);
        assertEquals("toString", "", objOption.toString());
    }

    /** Test method for
     * {@link com.sos.JSHelper.Options.SOSOptionElement#toString()}. */
    @Test
    public void testToString() {
        String strString = objOption.toString();
        assertEquals("Expected Value not got", "key (Description): value", strString);
    }

    /** Test method for
     * {@link com.sos.JSHelper.Options.SOSOptionElement#SOSOptionElement(com.sos.JSHelper.Options.JSOptionsClass, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean)}
     * . */
    @Test
    public void testSOSOptionElement() {

        SOSOptionElement objOpt = new SOSOptionElement(null, "key", "Description", "value", "DefaultValue", true);
        assertEquals("Key failed", "key", objOpt.getKey());
        assertEquals("Description failed", "Description", objOpt.Description());
        assertEquals("Value failed", "value", objOpt.Value());
        assertEquals("DefaultValue failed", "DefaultValue", objOpt.DefaultValue());
        assertTrue("Is Mandatory failed", objOpt.isMandatory());
    }

    /** Test method for
     * {@link com.sos.JSHelper.Options.SOSOptionElement#ColumnHeader(java.lang.String)}
     * . */
    @Test
    public void testColumnHeaderString() {
        assertEquals("ColumnHeader failed", "key", objOption.ColumnHeader());
        objOption.ColumnHeader("Column");
        assertEquals("ColumnHeader failed", "Column", objOption.ColumnHeader());

    }

    /** Test method for
     * {@link com.sos.JSHelper.Options.SOSOptionElement#ColumnHeader()}. */
    @Test
    @Ignore("Not yet implemented")
    public void testColumnHeader() {
        // fail("Not yet implemented");
    }

    /** Test method for
     * {@link com.sos.JSHelper.Options.SOSOptionElement#Title(java.lang.String)}
     * . */
    @Test
    @Ignore("Not yet implemented")
    public void testTitleString() {
        // fail("Not yet implemented");
    }

    /** Test method for {@link com.sos.JSHelper.Options.SOSOptionElement#Title()}
     * . */
    @Test
    @Ignore("Not yet implemented")
    public void testTitle() {
        // fail("Not yet implemented");
    }

    /** Test method for
     * {@link com.sos.JSHelper.Options.SOSOptionElement#DefaultValue()}. */
    @Test
    @Ignore("Not yet implemented")
    public void testDefaultValue() {
        // fail("Not yet implemented");
    }

    /** Test method for
     * {@link com.sos.JSHelper.Options.SOSOptionElement#getKey()}. */
    @Test
    @Ignore("Not yet implemented")
    public void testGetKey() {
        // fail("Not yet implemented");
    }

    /** Test method for
     * {@link com.sos.JSHelper.Options.SOSOptionElement#Value(java.lang.String)}
     * . */
    @Test
    @Ignore("Not yet implemented")
    public void testValueString() {
        // fail("Not yet implemented");
    }

    /** Test method for {@link com.sos.JSHelper.Options.SOSOptionElement#Value()}
     * . */
    @Test
    @Ignore("Not yet implemented")
    public void testValue() {
        // fail("Not yet implemented");
    }

    /** Test method for
     * {@link com.sos.JSHelper.Options.SOSOptionElement#Description(java.lang.String)}
     * . */
    @Test
    @Ignore("Not yet implemented")
    public void testDescriptionString() {
        // fail("Not yet implemented");
    }

    /** Test method for
     * {@link com.sos.JSHelper.Options.SOSOptionElement#Description()}. */
    @Test
    @Ignore("Not yet implemented")
    public void testDescription() {
        // fail("Not yet implemented");
    }

    /** Test method for
     * {@link com.sos.JSHelper.Options.SOSOptionElement#Size(int)}. */
    @Test
    @Ignore("Not yet implemented")
    public void testSizeInt() {
        // fail("Not yet implemented");
    }

    /** Test method for
     * {@link com.sos.JSHelper.Options.SOSOptionElement#Size(java.lang.Integer)}
     * . */
    @Test
    @Ignore("Not yet implemented")
    public void testSizeInteger() {
        // fail("Not yet implemented");
    }

    /** Test method for {@link com.sos.JSHelper.Options.SOSOptionElement#Size()}. */
    @Test
    @Ignore("Not yet implemented")
    public void testSize() {
        // fail("Not yet implemented");
    }

    /** Test method for {@link com.sos.JSHelper.Options.SOSOptionElement#ISize()}
     * . */
    @Test
    @Ignore("Not yet implemented")
    public void testISize() {
        // fail("Not yet implemented");
    }

    /** Test method for
     * {@link com.sos.JSHelper.Options.SOSOptionElement#XMLTagName(java.lang.String)}
     * . */
    @Test
    @Ignore("Not yet implemented")
    public void testXMLTagNameString() {
        // fail("Not yet implemented");
    }

    /** Test method for
     * {@link com.sos.JSHelper.Options.SOSOptionElement#XMLTagName()}. */
    @Test
    @Ignore("Not yet implemented")
    public void testXMLTagName() {
        // fail("Not yet implemented");
    }

    /** Test method for {@link com.sos.JSHelper.Options.SOSOptionElement#toXml()}
     * . */
    @Test
    @Ignore("Not yet implemented")
    public void testToXml() {
        // fail("Not yet implemented");
    }

    /** Test method for
     * {@link com.sos.JSHelper.Options.SOSOptionElement#toXml(com.sos.JSHelper.io.Files.JSXMLFile)}
     * . */
    @Test
    @Ignore("Not yet implemented")
    public void testToXmlJSXMLFile() {
        // fail("Not yet implemented");
    }

    /** Test method for
     * {@link com.sos.JSHelper.Options.SOSOptionElement#FormatString(java.lang.String)}
     * . */
    @Test
    @Ignore("Not yet implemented")
    public void testFormatStringString() {
        // fail("Not yet implemented");
    }

    /** Test method for
     * {@link com.sos.JSHelper.Options.SOSOptionElement#FormatString()}. */
    @Test
    @Ignore("Not yet implemented")
    public void testFormatString() {
        // fail("Not yet implemented");
    }

    /** Test method for
     * {@link com.sos.JSHelper.Options.SOSOptionElement#doInit()}. */
    @Test
    @Ignore("Not yet implemented")
    public void testDoInit() {
        // fail("Not yet implemented");
    }

    /** Test method for
     * {@link com.sos.JSHelper.Options.SOSOptionElement#FormattedValue()}. */
    @Test
    @Ignore("Not yet implemented")
    public void testFormattedValue() {
        // fail("Not yet implemented");
    }

    /** Test method for
     * {@link com.sos.JSHelper.Options.SOSOptionElement#IsEmpty()}. */
    @Test
    @Ignore("Not yet implemented")
    public void testIsEmpty() {
        // fail("Not yet implemented");
    }

    /** Test method for
     * {@link com.sos.JSHelper.Options.SOSOptionElement#IsNotEmpty()}. */
    @Test
    @Ignore("Not yet implemented")
    public void testIsNotEmpty() {
        // fail("Not yet implemented");
    }

    /** Test method for
     * {@link com.sos.JSHelper.Options.SOSOptionElement#MapValue()}. */
    @Test
    @Ignore("Not yet implemented")
    public void testMapValue() {
        // fail("Not yet implemented");
    }

    /** Test method for
     * {@link com.sos.JSHelper.Options.SOSOptionElement#CheckMandatory()}. */
    @Test
    @Ignore("Not yet implemented")
    public void testCheckMandatory() {
        // fail("Not yet implemented");
    }

    /** Test method for {@link com.sos.JSHelper.Options.SOSOptionElement#toOut()}
     * . */
    @Test
    @Ignore("Not yet implemented")
    public void testToOut() {
        // fail("Not yet implemented");
    }

    /** Test method for
     * {@link com.sos.JSHelper.Options.SOSOptionElement#OptionType()}. */
    @Test
    @Ignore("Not yet implemented")
    public void testOptionType() {

    }

    /** Test method for
     * {@link com.sos.JSHelper.Options.SOSOptionElement#OptionType(int)}. */
    @Test
    @Ignore("Not yet implemented")
    public void testOptionTypeInt() {
        // fail("Not yet implemented");
    }

    /** Test method for
     * {@link com.sos.JSHelper.Options.SOSOptionElement#isMandatory(boolean)}. */
    @Test
    @Ignore("Not yet implemented")
    public void testIsMandatoryBoolean() {
        // fail("Not yet implemented");
    }

    /** Test method for
     * {@link com.sos.JSHelper.Options.SOSOptionElement#isMandatory()}. */
    @Test
    @Ignore("Not yet implemented")
    public void testIsMandatory() {
        // fail("Not yet implemented");
    }

    /** Test method for
     * {@link com.sos.JSHelper.Options.SOSOptionElement#SetAlias(java.lang.String)}
     * . */
    @Test
    public void testSetAlias() {
        objOption.SetAlias("newKey");
        objOption.SetAlias("AliasKey");
    }

    @Test
    public void testSetDirty() {

        @SuppressWarnings("unused")
        final String conMethodName = conClassName + "::testSetDirty";

        assertFalse("Must be not Dirty", objOption.isDirty());
        objOption.Value("Dirty");
        assertTrue("Must be Dirty", objOption.isDirty());

    } // private void testSetDirty

    @Test
    public void testEnvVarAsValue() {
        SOSOptionElement objOpt = new SOSOptionElement(null, "key", "Description", "env:APPDATA", "env:LOCALAPPDATA", true);
        System.out.println("value = " + objOpt.Value());
        System.out.println("default value = " + objOpt.DefaultValue());
    }

    @Test
    public void testEnvVarAsValue2() {
        SOSOptionElement objOpt = new SOSOptionElement(null, "key", "Description", "file:${APPDATA}", "env:LOCALAPPDATA", true);
        System.out.println("value = " + objOpt.Value());
        System.out.println("default value = " + objOpt.DefaultValue());
        objOpt = new SOSOptionElement(null, "key", "Description", "file:${APPDATA}/config/live", "env:LOCALAPPDATA", true);
        System.out.println("value = " + objOpt.Value());
        System.out.println("default value = " + objOpt.DefaultValue());
        objOpt = new SOSOptionElement(null, "key", "Description", "${APPDATA}/config/live", "env:LOCALAPPDATA", true);
        System.out.println("value = " + objOpt.Value());
        System.out.println("default value = " + objOpt.DefaultValue());
        objOpt = new SOSOptionElement(null, "key", "Description", "${APPDATA}", "env:LOCALAPPDATA", true);
        System.out.println("value = " + objOpt.Value());
        System.out.println("default value = " + objOpt.DefaultValue());
    }

    @Test
    public void testSOSLocale() {

        SOSOptionLocale Locale = new SOSOptionLocale( // ...
        null, // ....
        conClassName + ".Locale", // ...
        "I18N is for internationalization of Application", // ...
        "env:SOS_LOCALE", // ...
        java.util.Locale.getDefault().toString(), // ...
        true);

        System.out.println("Locale = " + Locale.Value());
    }

    // @Test funktioniert unter Maven nicht. Property wird nicht gesetzt. in der
    // Eclipse funzt es ...
    public void testSystemProperty() {
        System.setProperty("log4j.configuration", "test-config.properties");
        JSOptionsClass objO = new JSOptionsClass();
        assertEquals("propertyfile name", "test-config.properties", objO.log4jPropertyFileName.Value());

    }

}
