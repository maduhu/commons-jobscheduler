package com.sos.JSHelper.Options;

import static junit.framework.Assert.assertTrue;
import static org.junit.Assert.assertFalse;

import java.util.HashMap;

import org.apache.log4j.Logger;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

/** \class JSOptionsClassTest
 *
 * \brief JSOptionsClassTest -
 *
 * \details
 *
 *
 * \code .... code goes here ... \endcode
 *
 * <p style="text-align:center">
 * <br />
 * --------------------------------------------------------------------------- <br />
 * APL/Software GmbH - Berlin <br />
 * ##### generated by ClaviusXPress (http://www.sos-berlin.com) ######### <br />
 * ---------------------------------------------------------------------------
 * </p>
 * \author KB \version $Id$ \see reference
 *
 * Created on 20.01.2012 10:35:25 */
public class JSOptionsClassTest {

    @SuppressWarnings("unused")
    private final String conClassName = "JSOptionsClassTest";
    private static final String conSVNVersion = "$Id$";
    private static final Logger logger = Logger.getLogger(JSOptionsClassTest.class);

    public JSOptionsClassTest() {
        //
    }

    @BeforeClass
    public static void setUpBeforeClass() throws Exception {
    }

    @AfterClass
    public static void tearDownAfterClass() throws Exception {
    }

    @Before
    public void setUp() throws Exception {
    }

    @After
    public void tearDown() throws Exception {
    }

    @Test
    public final void testSetLocale() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testGetI18NLocale() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testGetLocale() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testGetCheckNotProcessedOptions() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testSetCheckNotProcessedOptions() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testGetXmlId() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testSetXmlId() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testGetlog_filename() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testSetlog_filename() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testGetlog4jPropertyFileName() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testSetlog4jPropertyFileName() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testJSOptionsClass() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testJSOptionsClassHashMapOfStringString() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testSettings() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testTempDirName() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testTempDir() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testTempDirString() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testUserDir() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testUserDirString() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testSettingsHashMapOfStringString() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testGetItemString() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testCheckNotProcessedOptions() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testGetProcessedOptions() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testAddProcessedOptions() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testGetItemStringString() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testGetIntItem() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testString2Integer() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testGetBoolItemString() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testGetBoolItemStringBoolean() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testString2Bool() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testToOutString() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testToOut() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testToString() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testSetAllCommonOptions() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testGetEnvironmentVariables() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testCheckMandatory() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testTestMode() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testTestModeBoolean() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testDebug() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testDebugBoolean() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testDebugLevel() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testDebugLevelInt() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testCheckFileIsReadable() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testCheckFolder() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testCheckIsFileWritable() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testGetVal() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testArchiverOptions() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testNormalizeDirectoryName() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testNormalizeFileNameString() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testNormalizeFileNameStringString() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testAbsolutFileName() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testSubstituteVariables() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testIgnoreEnvironmentVariables() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testIgnoreEnvironmentVariablesBoolean() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testSplitString() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testCheckNull() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testCommandLineArgsStringArray() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testCommandLineArgs() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testLoadPropertiesString() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testLoadSystemProperties() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testLoadPropertiesProperties() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testSetAllOptionsHashMapOfStringStringString() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testSetAllOptionsHashMapOfStringString() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testCurrentNodeName() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testCurrentNodeNameString() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testOptionByName() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testDumpSettings() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testGetIndexedItem() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testIterateAllDataElementsByAnnotation() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testIterate() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testGetItems() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testPutObject() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testGetObjectAsString() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testGetObject() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testLoadXMLJSXMLFile() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testLoadXMLJSXMLFileString() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testToXMLFile() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testToXML() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testDeletePrefix() {
        // fail("Not yet implemented");
    }

    @Test
    public final void testGetPid() {
        // fail("Not yet implemented");
    }

    @Test
    public void testIsOption() throws Exception {
        JSOptionsClass o = new JSOptionsClass();
        assertTrue(o.isOption("Scheduler_Data"));
        assertFalse(o.isOption("not_valid"));
    }

    @Test
    public void testGetValuePairs() throws Exception {
        JSOptionsClass objOC = new JSOptionsClass();
        objOC.Locale.Value("DE");
        String strT = objOC.getOptionsAsKeyValuePairs();
        System.out.println(strT);
    }

    @Test
    public final void testSettings4StepName() throws Exception {
        JSOptionsClass objOC = new JSOptionsClass();
        HashMap<String, String> objHsh = new HashMap<String, String>();
        objHsh.put("operation", "copy");
        objHsh.put("source/source_host", "wilma.sos");
        objHsh.put("source/source_user", "sos");
        objHsh.put("source/source_port", "22");
        objHsh.put("source/source_protocol", "sftp");
        objHsh.put("source/source_password", "sos");
        objHsh.put("source/source_dir", "/home/sos/setup.scheduler/releases");
        objHsh.put("source/source_ssh_auth_method", "password");
        objHsh.put("test/target_host", "tux.sos");
        objHsh.put("test/target_protocol", "sftp");
        objHsh.put("test/target_port", "22");
        objHsh.put("test/target_password", "sos");
        objHsh.put("test/target_user", "sos");
        objHsh.put("test/target_dir", "/srv/www/htdocs/test");
        objHsh.put("test/target_ssh_auth_method", "password");
        objHsh.put("overwrite_files", "true");
        objHsh.put("check_size", "true");
        objHsh.put("file_spec", "^scheduler_(win32|linux)_joe\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]{4}\\.(tar\\.gz|zip)$");
        objHsh.put("recursive", "false");
        // objHsh.put("remote_dir", "/srv/www/htdocs/test");
        // objHsh.put("local_dir", "/home/sos/setup.scheduler/releases");
        objHsh.put("verbose", "9");
        objHsh.put("buffer_size", "32000");
        objHsh.put("SendTransferHistory", "false");
        String strCmd = "SITE chmod 777 $SourceFileName";
        objHsh.put("source_pre_command", strCmd);
        objHsh.put("target_pre_command", strCmd);
        objOC.CurrentNodeName("test");
        objOC.setAllOptions(objHsh);
        HashMap<String, String> objS4SN = objOC.Settings4StepName();
        String strS = objS4SN.get("source/source_user");
        String strS2 = objS4SN.get("target_user");
        System.out.println(strS + " / " + strS2);
    }

    @Test
    public final void testStoreOptionValues() {
        JSOptionsClass objOC = new JSOptionsClass();
        objOC.Locale.Value("en_EN");
        objOC.storeOptionValues();
        objOC = new JSOptionsClass();
        objOC.initializeOptionValues();
        Assert.assertEquals("locale is wrong", "en_EN", objOC.Locale.Value());
    }
}
