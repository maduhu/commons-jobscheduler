package com.sos.JSHelper.DataElements;


import static org.junit.Assert.assertEquals;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

/**
 * \class JSDataElementTimeStampISOTest 
 * 
 * \brief JSDataElementTimeStampISOTest - 
 * 
 * \details
 *
 * \section JSDataElementTimeStampISOTest.java_intro_sec Introduction
 *
 * \section JSDataElementTimeStampISOTest.java_samples Some Samples
 *
 * \code
 *   .... code goes here ...
 * \endcode
 *
 * <p style="text-align:center">
 * <br />---------------------------------------------------------------------------
 * <br /> APL/Software GmbH - Berlin
 * <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
 * <br />---------------------------------------------------------------------------
 * </p>
 * \author EQALS
* @version $Id$03.11.2009
 * \see reference
 *
 * Created on 03.11.2009 14:17:18
 */

public class JSDataElementTimeStampISOTest {

	@SuppressWarnings("unused")
	private final String	conClassName	= "JSDataElementTimeStampISOTest";

	public JSDataElementTimeStampISOTest() {
		//
	}

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	@Before
	public void setUp() throws Exception {
	}

	@After
	public void tearDown() throws Exception {
	}

//	@Test
	public void testISODate() throws Exception {

		String strT;

		JSDataElementTimeStampISO	ValidFromDate		= new JSDataElementTimeStampISO( // ....			
				" ", // .. Value ...
				"Date as of which the price is valid", // Titel
				8, // ... Size ...
				20, // ... Pos ...
				" ", // ... FormatString ...
				"ValidFromDate", // ... ColumnHeaderText ...
				"ValidFromDate" // ... XMLTagName ...
		);


		ValidFromDate.Value("2009-08-31T15:36:53");
		strT = ValidFromDate.toXml();
		assertEquals("Date as XML is", "<ValidFromDate>2009-08-31T15:36:53</ValidFromDate>", strT);


		// Mapics liefert den ISO-Code Datum+Uhrzeit. 
		// Über den FormatString dfDATE_SHORT läst sich steuern, dass nur das Datum benötigt wird
		// Das ist beim Feld ValidFromDate der Fall.
		ValidFromDate		= new JSDataElementTimeStampISO( // ....			
				" ", // .. Value ...
				"Date as of which the price is valid", // Titel
				8, // ... Size ...
				20, // ... Pos ...
				" ", // ... FormatString ...
				"ValidFromDate", // ... ColumnHeaderText ...
				"ValidFromDate" // ... XMLTagName ...
		);
		ValidFromDate.FormatString(JSDateFormat.dfDATE_SHORT);
		ValidFromDate.Value("2009-08-31T15:36:53");
		strT = ValidFromDate.toXml();
		assertEquals("Date as XML is", "<ValidFromDate>2009-08-31</ValidFromDate>", strT);





	}


	@Test
	public void testValidFromDate() throws Exception {
		String strT;
		final JSDataElementValidFromDate	ValidFromDate		= new JSDataElementValidFromDate( // ....			
				" ", // .. Value ...
				"Date as of which the price is valid", // Titel 
				8, // ... Size ...
				20, // ... Pos ...
				" ", // ... FormatString ...
				"ValidFromDate", // ... ColumnHeaderText ...
				"ValidFromDate" // ... XMLTagName ...
		);
		ValidFromDate.FormatString(JSDateFormat.dfDATE_SHORT);
		ValidFromDate.Value("2009-08-31T15:36:53");
		strT = ValidFromDate.toXml();
		assertEquals("Date as XML is", "<ValidFromDate>2009-08-31</ValidFromDate>", strT);		



	}

}
