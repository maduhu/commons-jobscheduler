package com.sos.localization;
import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.MissingFormatArgumentException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.UnknownFormatConversionException;
import java.util.regex.Matcher;

import org.apache.log4j.Logger;

/**
* \class Messages
*
* \brief Messages -
*
* \details
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* @version $Id$03.09.2010
* \see reference
*
* Created on 03.09.2010 13:10:49
 */
public class Messages implements Serializable {
	/**
	 *
	 */
	private static final long	serialVersionUID			= -1276188512965716159L;
	private final String		conClassName				= "Messages";
	private String				BUNDLE_NAME					= "com.sos.localization.messages";	//$NON-NLS-1$
	private ResourceBundle		objResource_Bundle			= null;
	private ResourceBundle		objResourceBundleDefault	= null;
	private Locale				objCurrentLocale			= Locale.getDefault();
	private static final Logger	logger						= Logger.getLogger(Messages.class);
	private static final String	ENCODING_KEY				= "properties.file.encoding";

	private enuEncodings		enuEncoding					= enuEncodings.ISO_8859_1;
	private final enuEncodings	enuEncodingDefault			= enuEncodings.ISO_8859_1;

	public static enum enuEncodings {
		ISO_8859_1, UTF_8
		/* */;

		public String text() {
			String strT = this.name().toUpperCase().replace('_', '-');
			return strT;
		}
	}

	@SuppressWarnings("unused")
	private Messages() {
	}

	public Messages(final String pstrBundleName) {
		BUNDLE_NAME = pstrBundleName;
		String strSOSLocale = System.getenv("SOS_LOCALE");
		if (strSOSLocale == null) {
			objCurrentLocale = Locale.getDefault();
		}
		else {
			objCurrentLocale = new Locale(strSOSLocale);
		}
		objResource_Bundle = this.getBundle();
	}

	public Messages(final String pstrBundleName, final Locale pobjLocale) {
		BUNDLE_NAME = pstrBundleName;
		objCurrentLocale = pobjLocale;
		objResource_Bundle = this.getBundle();
	}

	/**
	 * Pass a ClassLoader to be able to load a ResourceBundle from a different context.
	 * @param pstrBundleName
	 * @param pobjLocale
	 * @param loader
	 */
	public Messages(final String pstrBundleName, final Locale pobjLocale, ClassLoader loader) {
		BUNDLE_NAME = pstrBundleName;
		objCurrentLocale = pobjLocale;
		objResource_Bundle = this.getBundle(loader);
	}

	public ResourceBundle getBundle() {
		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::getBundle";
		ResourceBundle objB = null;
		try {
			objB = ResourceBundle.getBundle(BUNDLE_NAME, objCurrentLocale);
			// logger.debug(String.format("current ResourceBundle is %1$s, locale is %2$s.", BUNDLE_NAME, objB.getLocale().getLanguage()));
			//readEncodingFromMessageFile(objB);
			setEncoding(objB);
		}
		catch (MissingResourceException mb) {
			try {//Try to get local default
				objB = ResourceBundle.getBundle(BUNDLE_NAME);
			}
			catch (MissingResourceException mbb) {
				objB = ResourceBundle.getBundle(BUNDLE_NAME, new Locale("en"));
			}

		}
		catch (Exception e) {
			e.printStackTrace(System.err);
		}
		objResourceBundleDefault = ResourceBundle.getBundle(BUNDLE_NAME, new Locale("en"));
		return objB;
	} // private ResourceBundle getBundle

	public ResourceBundle getBundle(ClassLoader loader) {
		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::getBundle";
		ResourceBundle objB = null;
		try {
			if (loader == null) {
				objB = ResourceBundle.getBundle(BUNDLE_NAME, objCurrentLocale);
			}
			else {
				objB = ResourceBundle.getBundle(BUNDLE_NAME, objCurrentLocale, loader);
			}
			// logger.debug(String.format("current ResourceBundle is %1$s, locale is %2$s.", BUNDLE_NAME, objB.getLocale().getLanguage()));
			//readEncodingFromMessageFile(objB);
			setEncoding(objB);
		}
		catch (MissingResourceException mb) {
			try {//Try to get local default
				if (loader == null) {
					objB = ResourceBundle.getBundle(BUNDLE_NAME);
				}
				else {
					objB = ResourceBundle.getBundle(BUNDLE_NAME, Locale.getDefault(), loader);
				}
			}
			catch (MissingResourceException mbb) {
				if (loader == null) {
					objB = ResourceBundle.getBundle(BUNDLE_NAME, new Locale("en"));
				}
				else {
					objB = ResourceBundle.getBundle(BUNDLE_NAME, new Locale("en"), loader);
				}
			}

		}
		catch (Exception e) {
			e.printStackTrace(System.err);
		}
		if (loader == null) {
			objResourceBundleDefault = ResourceBundle.getBundle(BUNDLE_NAME, new Locale("en"));
		}
		else {
			objResourceBundleDefault = ResourceBundle.getBundle(BUNDLE_NAME, new Locale("en"), loader);
		}
		return objB;
	}

	public void setLocale(final Locale pobjLocale) {
		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::setLocale";
		objCurrentLocale = pobjLocale;
	} // private void setLocale

	//	private void readEncodingFromMessageFile(final ResourceBundle objB) {
	//		String messageFile = BUNDLE_NAME.replace('.', '/');
	//		String language = objB.getLocale().getLanguage();
	//		if(language != null && language.length() > 0) {
	//			messageFile += "_" + language;
	//		}
	//		messageFile += ".properties";
	//		InputStream messagesInputStream = getClass().getClassLoader().getResourceAsStream(messageFile);
	//		if(messagesInputStream != null) {
	//			try {
	//				byte bom[] = new byte[2];
	//				int read = messagesInputStream.read(bom);
	//				if (read == 2 && bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {
	////					logger.debug(String.format("UTF-8 bom found in %1$s", messageFile));
	//					enuEncoding = enuEncodings.UTF_8;
	//				}
	//			}
	//			catch (IOException e) {}
	//			finally {
	//				try {
	//					messagesInputStream.close();
	//				}
	//				catch (IOException e) {}
	//			}
	////			logger.debug(String.format("Message encoding: %1$s", enuEncoding.text()));
	//		}
	//	}

	private void setEncoding(final ResourceBundle objBundle) {
		try {
			String strM = null;
			if (objBundle != null) {
				strM = objBundle.getString(ENCODING_KEY);
				if (strM != null && strM.equalsIgnoreCase(enuEncodings.UTF_8.text())) {
					enuEncoding = enuEncodings.UTF_8;
				}
			}
		}
		catch (MissingResourceException e) {
		}
	}

	private String	strLastKey	= "";

	private String getString(final String pstrKey, final ResourceBundle objBundle) {
		String strT = null;
		try {
			String strM = "";
			if (objResource_Bundle == null) {
				objResource_Bundle = getBundle();
			}
			enuEncodings encoding = enuEncoding;
			if (objResource_Bundle != null) {
				try {
					strM = objResource_Bundle.getString(pstrKey);
				}
				catch (MissingResourceException e) {
					strM = objResourceBundleDefault.getString(pstrKey);
					encoding = enuEncodingDefault;
				}

				if (strM == null) {
					strM = pstrKey;
				}
				else {
					// strM = this.getMsg(pstrKey);
					// link to another key?
					if (strM.startsWith("[") && strM.endsWith("]")) { //$NON-NLS-1$
						logger.trace("strLastKey = " + strLastKey + ", strKey = " + strM);
						//						System.out.println("strLastKey = " + strLastKey + ", strKey = " + strM);
						if (strM.equalsIgnoreCase(strLastKey)) {
							strM = "** loop: " + strM;
						}
						else {
							String strKey = strM.substring(1, strM.length() - 1);
							String strM1 = getString(strKey, objBundle);
							strM = strM1;
						}
						strLastKey = strM;
					}
				}
			}
			else {
				strM = pstrKey;
			}
			try {
				if (encoding == enuEncodings.UTF_8) {
					strT = new String(strM.getBytes(enuEncodings.ISO_8859_1.text()), enuEncodings.UTF_8.text());
					if (strT.contains("ï¿½") == false) {
						strM = strT;
					}
				}
			}
			catch (UnsupportedEncodingException e) {
				strM = strT;
			}
			return strM;
		}
		catch (MissingResourceException e) {
			return null;
		}
	}

	/**
	 *
	 * \brief getMsg
	 *
	 * \details
	 *
	 * \return String
	 *
	 * @param pstrKey
	 * @return
	 */
	public String getMsg(final String pstrKey) {
		String strM = "";
		try {
			strM = addKey(pstrKey, getString(pstrKey, objResource_Bundle));
		}
		catch (MissingResourceException e) {
			strM = '!' + pstrKey + '!';
		}
		return strM;
	}

	private String addKey(final String pstrKey, final String pstrMsgTxt) {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::addKey";
		String strRet = pstrMsgTxt;

		if (pstrMsgTxt != null) {
			if (pstrKey != null) {
				if (pstrKey.contains("_T_") == false // Text
						&& pstrKey.contains("_L_") == false // Label, like Text
				) {
					strRet = pstrKey + ": " + pstrMsgTxt;
				}
			}

		}
		else {
			strRet = pstrKey;
		}

		return strRet;
	} // private String addKey

	public String getLabel(final String pstrKey) {
		try {
			String strM = getString(pstrKey, objResource_Bundle);
			return strM;
		}
		catch (MissingResourceException e) {
			return '!' + pstrKey + '!';
		}
	}

	public String getTooltip(final String pstrKey) {
		try {
			String strM = getString(pstrKey, objResource_Bundle);
			return strM;
		}
		catch (MissingResourceException e) {
			return '!' + pstrKey + '!';
		}
	}

	public String getMsg(final String pstrKey, final Object... pstrArgs) {
		String strM = "";
		try {
			strM = addKey(pstrKey, getString(pstrKey, objResource_Bundle));
			strM = String.format(strM, pstrArgs);

			// To support the old {x} format in messages
			int i = 0;
			if (strM.contains("{")) {
				for (Object object : pstrArgs) {
					try {
						String strT = (String) object;

						strT = Matcher.quoteReplacement(strT);
						strM = strM.replaceAll("\\{" + i++ + "\\}", strT);
					}
					catch (ClassCastException e) {
						i++;
					}
				}
			}
			return strM;
		}
		catch (MissingFormatArgumentException e) {
			strM = String.format("%1$s (%2$s): %3$s | missing format specifer: %4$s", pstrKey, objCurrentLocale.getDisplayName(), strM, e.getFormatSpecifier());
			return strM;
		}
		catch (UnknownFormatConversionException e) {
			strM = String.format("%1$s (%2$s): %3$s | unknown format conversion: %4$s", pstrKey, objCurrentLocale.getDisplayName(), strM, e.getConversion());
			return strM;
		}
		catch (MissingResourceException e) {
			strM = String.format("%1$s (%2$s): %3$s", pstrKey, objCurrentLocale.getDisplayName(), strM);
			return strM;
		}
		catch (Exception e) {
			e.printStackTrace(System.err);
			return strM;
		}
	}

	/**
	 *
	 * \brief getMsg
	 *
	 * \details
	 *
	 * \return String
	 *
	 * @param pstrKey
	 * @param pobjLocale
	 * @return
	 */
	public String getMsg(final String pstrKey, final Locale pobjLocale) {
		String strM = "";
		try {
			// ResourceBundle objBundle = ResourceBundle.getBundle(BUNDLE_NAME, pobjLocale);
			if (objCurrentLocale != pobjLocale) {
				objResource_Bundle = null;
			}
			objCurrentLocale = pobjLocale;
			strM = addKey(pstrKey, getString(pstrKey, objResource_Bundle));
		}
		catch (MissingResourceException e) {
			strM = '!' + pstrKey + '!';
		}
		return strM;
	}
}
