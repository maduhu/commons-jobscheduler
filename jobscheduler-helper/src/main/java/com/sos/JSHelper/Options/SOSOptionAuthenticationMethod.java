package com.sos.JSHelper.Options;
import com.sos.JSHelper.Exceptions.JobSchedulerException;

/**
* \class SOSOptionAuthenticationMethod
*
* \brief SOSOptionAuthenticationMethod -
*
* \details
*
* \section SOSOptionAuthenticationMethod.java_intro_sec Introduction
*
* \section SOSOptionAuthenticationMethod.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* @version $Id$16.05.2010
* \see reference
*
* Created on 16.05.2010 19:43:37
 */
/**
 * @author KB
 *
 */
public class SOSOptionAuthenticationMethod extends SOSOptionStringValueList {
	@SuppressWarnings("unused")
	private final String				conSVNVersion		= "$Id$";
	private static final String			conValuePASSWORD	= "password";
	private static final String			conValuePUBLICKEY	= "publickey";
	private static final String			conValueURL			= "url";
	private final String				conClassName		= "SOSOptionAuthenticationMethod";
	private enuAuthenticationMethods	enuMethod			= enuAuthenticationMethods.notDefined;
	@SuppressWarnings("hiding")
	public final String					ControlType			= "combo";

	@Override public String getControlType() {
		return ControlType;
	}
	/**
	 *
	 */
	private static final long	serialVersionUID	= 806321970898790899L;
	public enum enuAuthenticationMethods {
		publicKey(conValuePUBLICKEY), password(conValuePASSWORD), url(conValueURL), notDefined("undefined"), ppk("ppk"), privatekey("privatekey");
		public final String	description;
		public final String	text;

		private enuAuthenticationMethods() {
			this(null);
		}

		public String Text() {
			String strT = this.name();
			return strT;
		}

		private enuAuthenticationMethods(final String name) {
			String k;
			if (name == null) {
				k = this.name();
			}
			else {
				k = name;
			}
			description = k;
			text = k;
		}

		public static String[] getArray() {
			String[] strA = new String[6];
			int i = 0;
			for (enuAuthenticationMethods enuType : enuAuthenticationMethods.values()) {
				strA[i++] = enuType.name();
			}
			return strA;
		}
	}

	// SOSOptionAuthenticationMethod() {
	// //
	// }
	/**
	 * \brief SOSOptionAuthenticationMethod
	 *
	 * \details
	 *
	 * @param pPobjParent
	 * @param pPstrKey
	 * @param pPstrDescription
	 * @param pPstrValue
	 * @param pPstrDefaultValue
	 * @param pPflgIsMandatory
	 */
	public SOSOptionAuthenticationMethod(final JSOptionsClass pPobjParent, final String pPstrKey, final String pPstrDescription, final String pPstrValue,
			final String pPstrDefaultValue, final boolean pPflgIsMandatory) {
		super(pPobjParent, pPstrKey, pPstrDescription, pPstrValue, pPstrDefaultValue, pPflgIsMandatory);
		super.valueList(enuAuthenticationMethods.getArray());
	}

	/**
	 *
	 * \brief Value
	 *
	 * \details
	 *
	 * \return
	 *
	 * @param pstrAuthenticationMethod
	 */
	@Override public void Value(final String pstrAuthenticationMethod) {
		@SuppressWarnings("unused") final String conMethodName = conClassName + "::Value";
		try {
			//oh 2014-10-29 NullPointer in switch if pstrAuthenticationMethod is null.
			if(isNull(pstrAuthenticationMethod)) {
				super.Value(pstrAuthenticationMethod);
				enuMethod = enuAuthenticationMethods.notDefined;
			}
			else {
				switch (pstrAuthenticationMethod) {
					case "ppk":
					case "privatekey":
					case conValuePUBLICKEY:
						super.Value(pstrAuthenticationMethod);
						enuMethod = enuAuthenticationMethods.publicKey;
						break;
					case conValuePASSWORD:
						super.Value(pstrAuthenticationMethod);
						enuMethod = enuAuthenticationMethods.password;
						break;
					case conValueURL:
						super.Value(pstrAuthenticationMethod);
						enuMethod = enuAuthenticationMethods.url;
						break;
					default:
						super.Value("*invalid*: " + pstrAuthenticationMethod);
						enuMethod = enuAuthenticationMethods.notDefined;
						break;
				}
			}
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	} // private void Value

	public void Value(final enuAuthenticationMethods penuAuthMethod) {
		@SuppressWarnings("unused") final String conMethodName = conClassName + "::Value";
		switch (penuAuthMethod) {
			case password:
				super.Value(conValuePASSWORD);
				enuMethod = penuAuthMethod;
				break;
			case publicKey:
			case privatekey:
			case ppk:
				super.Value(conValuePUBLICKEY);
				enuMethod = penuAuthMethod;
				break;
			case url:
				super.Value(conValueURL);
				enuMethod = penuAuthMethod;
				break;
			default:
				throw new JobSchedulerException("Invalid AuthenticationMethod : " + penuAuthMethod);
		}
	}

	public void isPassword(final boolean flgF) {
		if (flgF) {
			this.Value(conValuePASSWORD);
		}
		else {
			this.Value(conValuePUBLICKEY);
		}
	}

	public void isURL(final boolean flgF) {
		if (flgF) {
			this.Value(conValueURL);
		}
		else {
			this.Value(conValueURL);
		}
	}

	public boolean isPassword() {
		@SuppressWarnings("unused") final String conMethodName = conClassName + "::isPassword";
		this.Value(strValue);
		return enuMethod == enuAuthenticationMethods.password;
	} // public boolean isPassword

	public boolean isURL() {
		@SuppressWarnings("unused") final String conMethodName = conClassName + "::isURL";
		this.Value(strValue);
		return enuMethod == enuAuthenticationMethods.url;
	} // public boolean isURL

	/**
	 *
	 * \brief isPublicKey
	 *
	 * \details
	 *
	 * \return boolean
	 *
	 * @return
	 */
	public boolean isPublicKey() {
		@SuppressWarnings("unused") final String conMethodName = conClassName + "::isPublicKey";
		this.Value(strValue);
		return enuMethod == enuAuthenticationMethods.publicKey || enuMethod == enuAuthenticationMethods.ppk || enuMethod == enuAuthenticationMethods.privatekey;
	} // private boolean isPublicKey

	/**
	 *
	 * \brief AuthenticationMethod
	 *
	 * \details
	 *
	 * \return enuAuthenticationMethods
	 *
	 * @return
	 */
	public enuAuthenticationMethods AuthenticationMethod() {
		@SuppressWarnings("unused") final String conMethodName = conClassName + "::AuthenticationMethod";
		return enuMethod;
	} // private enuMethod AuthenticationMethod
}
