package com.sos.JSHelper.Options;

import java.util.Vector;

import com.sos.JSHelper.Exceptions.JobSchedulerException;

/** \class SOSOptionIntegerArray
 * 
 * \brief SOSOptionIntegerArray -
 * 
 * \details
 *
 * \section SOSOptionIntegerArray.java_intro_sec Introduction
 *
 * \section SOSOptionIntegerArray.java_samples Some Samples
 *
 * \code .... code goes here ... \endcode
 *
 * <p style="text-align:center">
 * <br />
 * --------------------------------------------------------------------------- <br />
 * APL/Software GmbH - Berlin <br />
 * ##### generated by ClaviusXPress (http://www.sos-berlin.com) ######### <br />
 * ---------------------------------------------------------------------------
 * </p>
 * \author KB
 * 
 * @version $Id$16.05.2010 \see reference
 *
 *          Created on 16.05.2010 18:46:02 */

/** @author KB */
public class SOSOptionIntegerArray extends SOSOptionElement {

    private final String conClassName = "SOSOptionIntegerArray";

    private Vector<Integer> result = new Vector<Integer>();

    // SOSOptionIntegerArray() {
    // //
    // }

    /** \brief SOSOptionIntegerArray
     *
     * \details
     *
     * @param pobjParent
     * @param pstrKey
     * @param pstrDescription
     * @param pstrValue
     * @param pstrDefaultValue
     * @param pflgIsMandatory */
    public SOSOptionIntegerArray(JSOptionsClass pobjParent, String pstrKey, String pstrDescription, String pstrValue, String pstrDefaultValue,
            boolean pflgIsMandatory) {
        super(pobjParent, pstrKey, pstrDescription, pstrValue, pstrDefaultValue, pflgIsMandatory);
        this.Value(pstrValue);
        this.Description(pstrDescription);
        // System.out.println("strKey = '" + this.strKey + "'");
    }

    /** \brief Value
     * 
     * \details returns the integer-array as string.
     * 
     * \return
     *
     * @param pstrValue */
    public void Value(final String pstrValue) {
        try {
            super.Value(pstrValue);
            parseValue2Vector();
        } catch (Exception e) {
            throw new JobSchedulerException("Illegal/Invalid value '" + pstrValue + "' for Option " + this.Description() + ", " + this.strKey, e);
        }
    }

    public boolean contains(final int pintValue) {

        @SuppressWarnings("unused")
        final String conMethodName = conClassName + "::contains";
        boolean flgContains = false;

        flgContains = this.Values().contains(new Integer(pintValue));

        return flgContains;
    } // private boolean contains

    /** \brief Values
     * 
     * \details
     *
     * \return Vector<Integer>
     *
     * @return */
    public Vector<Integer> Values() {
        return result;
    }

    /** \brief parseValue2Vector
     * 
     * \details
     *
     * \return void
     *
     * @throws Exception */
    private void parseValue2Vector() throws Exception {
        if (this.Value() != null) {
            String[] elements = this.Value().split("[,| |;]");
            result = new Vector<Integer>();
            for (String element : elements) {
                element = element.trim();
                if (element.length() > 0) {
                    if (element.indexOf("-") == -1) {
                        try {
                            result.add(new Integer(element));
                        } catch (Exception e) {
                            throw new JobSchedulerException("Illegal numeric value : " + element, e);
                        }
                    } else {
                        String[] range = element.split("-");
                        int from = 0;
                        int to = 0;
                        try {
                            from = Integer.parseInt(range[0].trim());
                            to = Integer.parseInt(range[1].trim());
                        } catch (Exception e) {
                            throw new JobSchedulerException("Illegal numeric value : " + element, e);
                        }
                        int stepSize = 1;
                        for (int j = from; j <= to; j = j + stepSize)
                            result.add(new Integer(j));
                    }
                }
            }
        }
    } // parseValue2Vector

    /** \brief toString
     * 
     * \details
     *
     * \return
     *
     * @return */
    @Override
    public String toString() {

        @SuppressWarnings("unused")
        final String conMethodName = conClassName + "::toString";

        String strTemp = super.toString();
        if (result.size() > 0) {
            strTemp += " [";
            for (Integer intVal : result) {
                strTemp += intVal.toString() + " ";
            }
            strTemp += "]";
        }

        return strTemp;
    } // private String toString
}
