package com.sos.JSHelper.Options;

import java.io.IOException;

import com.sos.JSHelper.io.Files.JSFile;

/**
* \class SOSOptionInFileName
*
* \brief SOSOptionInFileName -
*
* \details
*
* \section SOSOptionInFileName.java_intro_sec Introduction
*
* \section SOSOptionInFileName.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* @version $Id$16.05.2010
* \see reference
*
* Created on 16.05.2010 22:55:17
 */

/**
 * @author KB
 *
 */
public class SOSOptionInFileName extends JSOptionInFileName {

	/**
	 *
	 */
	private static final long	serialVersionUID	= 5320294338809514909L;

	private final String		conClassName		= "SOSOptionInFileName";

	private JSFile				objFile				= null;

	//	SOSOptionInFileName() {
	//		//
	//	}

	/**
	 * \brief SOSOptionInFileName
	 *
	 * \details
	 *
	 * @param pPobjParent
	 * @param pPstrKey
	 * @param pPstrDescription
	 * @param pPstrValue
	 * @param pPstrDefaultValue
	 * @param pPflgIsMandatory
	 */
	public SOSOptionInFileName(final JSOptionsClass pPobjParent, final String pPstrKey, final String pPstrDescription, final String pPstrValue,
			final String pPstrDefaultValue, final boolean pPflgIsMandatory) {
		super(pPobjParent, pPstrKey, pPstrDescription, pPstrValue, pPstrDefaultValue, pPflgIsMandatory);
		intOptionType = isOptionTypeFileName;
	}

	public void CheckMandatory(final boolean pflgSetMandatory) {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::CheckMandatory";
		this.isMandatory(pflgSetMandatory);
		this.CheckMandatory();

	} // private void CheckMandatory

	@Override
	public void CheckMandatory() {

		final String conMethodName = conClassName + "::CheckMandatory";

		if (this.isMandatory()) {
			this.JSFile();
			if (objFile != null) {
				String lstrFileName = objFile.getPath();
//				String lstrFileName = strValue;
//				try {
//					if (isNotEmpty(lstrFileName)) {
//						lstrFileName = objFile.getCanonicalPath();
//					}
//				}
//				catch (IOException e) {
//					e.printStackTrace();
//				}
				if (objFile.exists() == false) {
					throw new RuntimeException(String.format("%1$s: file '%2$s' does not exists", conMethodName, lstrFileName));
				}

				if (objFile.canRead() == false) {
					throw new RuntimeException(String.format("%1$s: file '%2$s' is not readable", conMethodName, lstrFileName));
				}
			}
		}

	} // private void CheckMandatory

	/**
	 *
	 * \brief JSFile
	 *
	 * \details
	 *
	 * \return JSFile
	 *
	 * @return
	 */
	public JSFile JSFile() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::JSFile";

		if (objFile == null) {
			if (isNotEmpty(strValue)) {
				objFile = new JSFile(strValue);
			}
		}

		return objFile;
	} // private JSFile JSFile
}
