package com.sos.JSHelper.Options;
import org.apache.log4j.Logger;

import com.sos.JSHelper.Exceptions.JobSchedulerException;

/**
* \class SOSOptionTransferType
*
* \brief SOSOptionTransferType -
*
* \details
*
* \section SOSOptionTransferType.java_intro_sec Introduction
*
* \section SOSOptionTransferType.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* @version $Id$26.01.2011
* \see reference
*
* Created on 26.01.2011 15:56:25
 */
/**
 * @author KB
 *
 */
public class SOSOptionTransferType extends SOSOptionStringValueList {
	/**
	 *
	 */
	private static final long	serialVersionUID	= 1359502923543333601L;
	private final String		conClassName		= "SOSOptionTransferType";
	private static final Logger	logger				= Logger.getLogger(SOSOptionTransferType.class);
	private enuTransferTypes	enuTT				= enuTransferTypes.local;
	public static enum enuTransferTypes {
		// @formatter:off
		local, /* filesystem on localhost */
		file, /* same as local */
		ftp, 
		sftp, 
		ftps, 
		http, https, 
		webdav, 
		smb, 
		mq, // Message Queue
		ssh2, 
		svn, 
		smtp, imap,
		zip 
		/*
		 * 
		 *  */;
		// @formatter:on
		public String Text() {
			String strT = this.name();
			return strT;
		}

		public static String[] getArray() {
			String[] strA = new String[enuTransferTypes.values().length];
			int i = 0;
			for (enuTransferTypes enuType : enuTransferTypes.values()) {
				strA[i++] = enuType.Text();
			}
			return strA;
		}

		public static String getAsString() {
			String strR = "";
			for (enuTransferTypes enuType : enuTransferTypes.values()) {
				strR += enuType.Text() + ", ";
			}
			return strR;
		}

		public static boolean isTypeValid(final String pstrType) {
			boolean flgT = false;
			for (enuTransferTypes enuType : enuTransferTypes.values()) {
				if (pstrType.equalsIgnoreCase(enuType.Text())) {
					flgT = true;
					break;
				}
			}
			return flgT;
		}
	}
	public class SOSTransferTypeException extends JobSchedulerException {
		private static final long	serialVersionUID	= -738287289757042422L;

		public SOSTransferTypeException(final String pstrMessage) {
			super(pstrMessage);
		}
	}

	/**
	 * \brief SOSOptionTransferType
	 *
	 * \details
	 *
	 * @param pobjParent
	 * @param pstrKey
	 * @param pstrDescription
	 * @param pstrValue
	 * @param pstrDefaultValue
	 * @param pflgIsMandatory
	 */
	public SOSOptionTransferType(final JSOptionsClass pobjParent, final String pstrKey, final String pstrDescription, final String pstrValue,
			final String pstrDefaultValue, final boolean pflgIsMandatory) {
		super(pobjParent, pstrKey, pstrDescription, pstrValue, pstrDefaultValue, pflgIsMandatory);
		super.valueList(enuTransferTypes.getArray());
		Text2Enum();
	}

	public SOSOptionTransferType(final String pstrTransferType) {
		this(null, "", "", pstrTransferType, "", false);
	}

	public void Value(final enuTransferTypes penuTT) {
		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::Value";
		enuTT = penuTT;
		String strT = penuTT.Text();
		super.Value(strT);
	} // private void Value

	public boolean isSFtp() {
		Text2Enum();
		return enuTT == enuTransferTypes.sftp;
	}

	public boolean isFtpS() {
		Text2Enum();
		return enuTT == enuTransferTypes.ftps;
	}

	private void Text2Enum() {
		for (enuTransferTypes enuType : enuTransferTypes.values()) {
			if (strValue.equalsIgnoreCase(enuType.Text())) {
				enuTT = enuType;
				break;
			}
		}
	}

	public boolean needPortNumber() {
		boolean strR = true;
		switch (enuTT) {
			case file:
			case local:
			case zip:
			case smb:
				strR = false;
				break;
			default:
				strR = true;
				break;
		}
		return strR;
	}

	public enuTransferTypes getEnum() {
		return enuTT;
	}

	@Override
	public void CheckMandatory() {
		super.CheckMandatory();
		if (isDirty()) {
			if (validate() == false) {
				throw new SOSTransferTypeException(String.format("invalid transfertype '%1$s' specified. valid types are '%2$s'.", strValue,
						enuTransferTypes.getAsString()));
			}
		}
	}

	public boolean validate() {
		return enuTransferTypes.isTypeValid(strValue);
	}
}
