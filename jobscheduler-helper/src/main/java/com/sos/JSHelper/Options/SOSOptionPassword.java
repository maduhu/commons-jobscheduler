package com.sos.JSHelper.Options;

import java.util.Vector;

import com.sos.JSHelper.System.SOSCommandline;


/**
* \class SOSOptionPassword 
* 
* \brief SOSOptionPassword - 
* 
* \details
*
* \section SOSOptionPassword.java_intro_sec Introduction
*
* \section SOSOptionPassword.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* @version $Id$16.05.2010
* \see reference
*
* Created on 16.05.2010 19:50:51
 */

public class SOSOptionPassword extends SOSOptionString {

	/**
	 * 
	 */
	private static final long	serialVersionUID	= 1374430778591063177L;
	private final String		conClassName		= "SOSOptionPassword";
	public static final String	conBackTic			= "`";
	private String				strCachedPW			= "";

	// SOSOptionPassword() {
	// //
	// }

	// TODO see http://docs.oracle.com/javase/6/docs/api/java/io/Console.html for protecting the pw
	// TODO keypass usage (V2): see https://code.google.com/p/keepass4j/
	
	public SOSOptionPassword(final JSOptionsClass pPobjParent, final String pPstrKey, final String pPstrDescription, final String pPstrValue, final String pPstrDefaultValue,
			final boolean pPflgIsMandatory) {
		super(pPobjParent, pPstrKey, pPstrDescription, pPstrValue, pPstrDefaultValue, pPflgIsMandatory);
		this.setHideValue(true); 
	}

	/**
	 * 
	 * \brief toString
	 * 
	 * \details
	 * returns in any case stars as value of the password, independently what the real value of the password is.
	 * \return 
	 *
	 * @return
	 */
	@Override
	public String toString() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::toString";

//		String strPValue = "*****";
//		if (ExecuteCommandToGetPassword()) {
//			strPValue = strValue;
//		}
//
//		return this.Description() + ": " + strPValue;

		return super.toString();
		
	} // private String toString

	/**
	 * Checks if an external command needs to be executed to get the password
	 */
	@Override
	public String Value() {

		String strReturnPassword = strValue;
		if (strValue != null) {
			try {
				if (ExecuteCommandToGetPassword()) {
					if (strCachedPW.length() <= 0) {
						String command = strValue.substring(1, strValue.length() - 1);

						Vector returnValues = new SOSCommandline().execute(command);
						Integer exitValue = (Integer) returnValues.elementAt(0);
						logger.debug("exit code = " + exitValue);
//						Integer exitValue = Integer.getInteger(strT);
						if (exitValue.compareTo(new Integer(0)) == 0) {
							if (returnValues.elementAt(1) != null) {
								strReturnPassword = (String) returnValues.elementAt(1);
								strCachedPW = strReturnPassword;
								logger.debug("password received via command script.");
							}
						}
					}
					else {
						strReturnPassword = strCachedPW;
					}
				}
			}
			catch (Exception e) {
				e.printStackTrace(System.err);
			}
		}
		return strReturnPassword;
	}

	public boolean ExecuteCommandToGetPassword() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::PasswordByExecution";

		boolean flgExecuteCommandToGetPassword = false;

		if (strValue.startsWith(conBackTic) && strValue.endsWith(conBackTic)) {
			flgExecuteCommandToGetPassword = true;
		}

		return flgExecuteCommandToGetPassword;
	} // private boolean PasswordByExecution

}
