package com.sos.JSHelper.Options;

/** \class JSOptionPropertyFolderName
 *
 * \brief JSOptionPropertyFolderName -
 *
 * \details
 *
 * \section JSOptionPropertyFolderName.java_intro_sec Introduction
 *
 * \section JSOptionPropertyFolderName.java_samples Some Samples
 *
 * \code .... code goes here ... \endcode
 *
 * <p style="text-align:center">
 * <br />
 * --------------------------------------------------------------------------- <br />
 * APL/Software GmbH - Berlin <br />
 * ##### generated by ClaviusXPress (http://www.sos-berlin.com) ######### <br />
 * ---------------------------------------------------------------------------
 * </p>
 * \author eqbfd
 * 
 * @version $Id$29.01.2009 \see reference
 *
 *          Created on 29.01.2009 20:00:12 */

/** @author eqbfd */
public class JSOptionPropertyFolderName extends SOSOptionFolderName {

    private static final long serialVersionUID = -5962741104646578748L;
    @SuppressWarnings("unused")
    private final String conClassName = "JSOptionPropertyFolderName";

    /** \brief JSOptionPropertyFolderName
     *
     * \details
     *
     * @param pPobjParent
     * @param pPstrKey
     * @param pPstrDescription
     * @param pPstrValue
     * @param pPstrDefaultValue
     * @param pPflgIsMandatory */
    public JSOptionPropertyFolderName(final JSOptionsClass pPobjParent, final String pPstrKey, final String pPstrDescription,
            final String pPstrValue, final String pPstrDefaultValue, final boolean pPflgIsMandatory) {
        super(pPobjParent, pPstrKey, "Java-Property user.dir", pPstrValue, pPstrDefaultValue, pPflgIsMandatory);

        // strValue = this.Value();
    }

    /** \brief Value - setzt die Property UserDir
     *
     * \details
     *
     * \return
     *
     * @param pstrFolderName
     * @throws Exception */
    @Override
    public void setValue(String pstrFolderName) {

        @SuppressWarnings("unused")
        final String conMethodName = conClassName + "::Value";
        // prüfen, ob es den Folder gibt ...
        pstrFolderName = objParentClass.checkIsFileWritable(pstrFolderName, conMethodName);
        super.setValue(pstrFolderName);
        if (isNotEmpty(strValue)) {
            System.setProperty("user.dir", strValue);
        }

        // return void;
    } // public void Value

    @Override
    public String getValue() {

        @SuppressWarnings("unused")
        final String conMethodName = conClassName + "::Value";

        String strT = System.getProperty("user.dir");

        return strT;
    } // public String Value

}
