package com.sos.JSHelper.Options;

import java.io.IOException;

import com.sos.JSHelper.io.Files.JSFile;

/**
* \class JSOptionOutFileName 
* 
* \brief JSOptionOutFileName - 
* 
* \details
*
* \section JSOptionOutFileName.java_intro_sec Introduction
*
* \section JSOptionOutFileName.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author eqbfd
* @version $Id$23.01.2009
* \see reference
*
* Created on 23.01.2009 17:00:04
 */

/**
 * @author eqbfd
 *
 */
public class SOSOptionOutFileName extends SOSOptionFileName {

	/**
	 * 
	 */
	private static final long	serialVersionUID	= -8227806083390668082L;
	@SuppressWarnings("unused")
	private final String		conClassName		= "JSOptionOutFileName";

	//	private JSFile				objFile				= null;
	@SuppressWarnings("hiding")
	public String				ControlType			= "file";

	/**
	 * \brief JSOptionOutFileName
	 *
	 * \details
	 *
	 * @param pPobjParent
	 * @param pPstrKey
	 * @param pPstrDescription
	 * @param pPstrValue
	 * @param pPstrDefaultValue
	 * @param pPflgIsMandatory
	 * @throws Exception
	 */
	public SOSOptionOutFileName(final JSOptionsClass pPobjParent, final String pPstrKey, final String pPstrDescription, final String pPstrValue,
			final String pPstrDefaultValue, final boolean pPflgIsMandatory) {
		super(pPobjParent, pPstrKey, pPstrDescription, pPstrValue, pPstrDefaultValue, pPflgIsMandatory);
	}

	public SOSOptionOutFileName(final String pstrFileName) {
		this(null, "", "", pstrFileName, pstrFileName, false);
	}

	@Override
	public void CheckMandatory(final boolean pflgSetMandatory) {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::CheckMandatory";
		this.isMandatory(pflgSetMandatory);
		this.CheckMandatory();

	} // private void CheckMandatory

	@Override
	public void CheckMandatory() {

		final String conMethodName = conClassName + "::CheckMandatory";

		if (this.isMandatory()) {
			this.JSFile();
			if (objFile != null) {
				String lstrFileName = strValue;
				try {
					if (isNotEmpty(lstrFileName)) {
						lstrFileName = objFile.getCanonicalPath();
					}
				}
				catch (IOException e) {
					e.printStackTrace();
				}
				//				if (objFile.exists() == false) {
				//					throw new RuntimeException(String.format("%1$s: file '%2$s' does not exists", conMethodName, lstrFileName));
				//				}

				if (objFile.canWrite() == false) {
					throw new RuntimeException(String.format("%1$s: Has no write permissiong for file '%2$s'", conMethodName, lstrFileName));
				}
			}
		}

	} // private void CheckMandatory

	/**
	 *
	 * \brief JSFile
	 *
	 * \details
	 *
	 * \return JSFile
	 *
	 * @return
	 */
	@Override
	public JSFile JSFile() {

		@SuppressWarnings("unused")
		final String conMethodName = conClassName + "::JSFile";

		if (objFile == null) {
			if (isNotEmpty(strValue)) {
				objFile = new JSFile(strValue);
			}
		}

		return objFile;
	} // private JSFile JSFile

}
