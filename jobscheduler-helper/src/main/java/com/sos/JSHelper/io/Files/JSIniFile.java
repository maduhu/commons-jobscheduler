package com.sos.JSHelper.io.Files;
import java.io.IOException;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.apache.log4j.Logger;

import com.sos.JSHelper.Annotations.JSOptionClass;
import com.sos.JSHelper.Exceptions.JobSchedulerException;
import com.sos.JSHelper.interfaces.IDirty;

/**
* \class JSIniFile 
* 
* \brief JSIniFile - 
* 
* \details
*
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author KB
* \version $Id$
* \see reference
*
* Created on 26.08.2011 20:46:21
 */

/**
 * @author KB
 *
 */
@JSOptionClass(name = "JSOptionsClass", description = "JSOptionsClass")
public class JSIniFile extends JSTextFile implements IDirty {

	private static final long				serialVersionUID			= -1960627326921434568L;
	@SuppressWarnings("unused")
	private final String					conClassName				= "JSIniFile";
	private static final String				conSVNVersion				= "$Id$";
	private static final Logger				logger						= Logger.getLogger(JSIniFile.class);

	private Map<String, SOSProfileSection>	mapSections					= new HashMap<String, SOSProfileSection>();
	// private final Map <String, SOSProfileSection> mapSections = new LinkedList <String, SOSProfileSection>();

	private String							strSectionName				= null;
	private final boolean					flgIgnoreDuplicateSections	= true;
	private boolean							flgIsDirty					= false;
	private SOSProfileSection				objCurrentSection			= null;
	private JSTextFile						objSaveFile					= null;

	/**
	 * \brief JSIniFile
	 *
	 * \details
	 *
	 * @param pstrFileName
	 */
	public JSIniFile(String pstrFileName) {
		super(pstrFileName);
		logger.debug("FileName = " + getAbsolutePath());

		if (fleFile.exists()) {
			getIniFile();
			flgIsDirty = false;
			logger.debug("number of sections = " + Sections().size());
		}
	}

	public Collection<SOSProfileSection> getSections() {
		if (mapSections == null) {
			mapSections = new HashMap<String, SOSProfileSection>();
		}
		return mapSections.values();
	}

	/**
	 * 
	* \brief getIniFile - 	read the content of the whole ini-file
	*
	* \details
	* read the content of the whole ini-file
	*
	* @param 
	* @author KB
	 */
	private void getIniFile() {
		String line = null;
		try {
			StringBuffer strB = new StringBuffer();
			StringBuffer strCommentBuff = new StringBuffer();
			while ((strB = this.GetLine()) != null) {
				line = strB.toString().trim();
				logger.debug(line);
				int intLineLength = line.length();
				if (intLineLength <= 0 || line.startsWith(";") || line.startsWith("#")) {
					strCommentBuff.append(line + "\n");
					continue;
				}

				if (line.startsWith("[")) {
					if (!line.endsWith("]")) {
						throw new JobSchedulerException("character ']' expected in section header: " + line);
					}
					String strSectionName = line.substring(1, intLineLength - 1).trim();
					if (strSectionName.length() > 0) {
						this.objCurrentSection = addSection(strSectionName);
						objCurrentSection.setComment(strCommentBuff);
						objCurrentSection.setNotDirty();
						strCommentBuff = new StringBuffer();
					}
				}
				else {
					if (this.objCurrentSection == null) {
						throw new JobSchedulerException("[sectionname]-header expected");
					}
					else {
						final int index = line.indexOf('=');
						if (index < 0) {
							throw new JobSchedulerException("key/value pair without '=' detected : " + line);
						}

						final String strKey = line.substring(0, index).trim();
						final String strValue = line.substring(index + 1).trim();
						SOSProfileEntry objE = addEntry(strKey, strValue);
						objE.setComment(strCommentBuff);
						strCommentBuff = new StringBuffer();
						objE.setNotDirty();
					}
				}
			} // while ((line = r.readLine()) != null)
			this.close();
			flgIsDirty = false;

		}
		catch (final Exception e) {
			throw new JobSchedulerException(e.getLocalizedMessage() + "\n\nFile name is: " + strFileName, e);
		}
	}

	/**
	 * 
	* \brief addEntry - 	Add a key/value-pair to the current section
	*
	* \details
	* Add a key/value-pair to the current section
	*
	* @param strKey
	* @param strValue
	* @return
	* @param 
	* @author KB
	 */
	public SOSProfileEntry addEntry(final String strKey, final String strValue) {
		checkKeyName(strKey);
		SOSProfileEntry objE = null;
		if (this.objCurrentSection == null) {
		}
		else {
			objE = this.objCurrentSection.addEntry(strKey, strValue);
			setDirty();
		}
		return objE;
	}

	/**
	 * 
	* \brief addSection - 	Add a new Section to the ini-file
	*
	* \details
	* Add a new Section to the ini-file
	*
	* @param pstrSectionName
	* @return
	* @param 
	* @author KB
	 */
	public SOSProfileSection addSection(final String pstrSectionName) {
		checkSectionName(pstrSectionName);
		SOSProfileSection objNewSection = findSection(pstrSectionName);
		if (objNewSection == null) {
			objNewSection = new SOSProfileSection(pstrSectionName);
			objNewSection.setObjParent(this);
			this.mapSections.put(pstrSectionName.toLowerCase(), objNewSection);
			setDirty();
		}
		else {
			if (!this.flgIgnoreDuplicateSections) {
				throw new JobSchedulerException("Section '" + pstrSectionName + "' duplicated.");
			}
		}
		objCurrentSection = objNewSection;
		strSectionName = objCurrentSection.Name();
		return objNewSection;
	}

	/**
	 * 
	* \brief getSection - 	
	*
	* \details
	* 
	*
	* @param pstrSectionName
	* @return
	* @param 
	* @author KB
	 */
	public SOSProfileSection getSection(final String pstrSectionName) {
		checkSectionName(pstrSectionName);
		SOSProfileSection objNewSection = findSection(pstrSectionName);
		return objNewSection;
	}

	private SOSProfileSection findSection(final String pstrSectionName) {
		SOSProfileSection objNewSection = this.mapSections.get(pstrSectionName.toLowerCase());
		return objNewSection;
	}

	@Override
	public void setDirty() {
		this.flgIsDirty = true;
	}

	@Override
	public boolean isDirty() {
		return this.flgIsDirty;
	}

	/**
	 * 
	* \brief Sections - 	get the collection of all sections
	*
	* \details
	* get the collection of all sections
	*
	* @return Map<String, SOSProfileSection>
	* @param 
	* @author KB
	 */
	public Map<String, SOSProfileSection> Sections() {
		return this.mapSections;
	}

	/**
	 * 
	* \brief Value - 	
	*
	* \details
	* 
	*
	* @param pstrEntryName
	* @return
	* @throws IOException
	* @param 
	* @author KB
	 */
	public String Value(final String pstrEntryName) throws IOException {
		checkKeyName(pstrEntryName);
		final String strDefaultValue = null;
		return this.getPropertyString(this.strSectionName, pstrEntryName, strDefaultValue);
	}

	/**
	 * 
	* \brief Value - 	
	*
	* \details
	* 
	*
	* @param pstrEntryName
	* @param pstrDefaultValue
	* @return
	* @throws IOException
	* @param 
	* @author KB
	 */
	public String Value(final String pstrEntryName, final String pstrDefaultValue) throws IOException {
		checkKeyName(pstrEntryName);
		return this.getPropertyString(this.strSectionName, pstrEntryName, pstrDefaultValue);
	}

	/**
	 * 
	* \brief setValue - 	
	*
	* \details
	* 
	*
	* @param pstrEntryName
	* @param pstrEntryValue
	* @param 
	* @author KB
	 */
	public JSIniFile setValue(final String pstrEntryName, final String pstrEntryValue) {
		checkKeyName(pstrEntryName);
		addEntry(pstrEntryName, pstrEntryValue);
		return this;
	}

	public JSIniFile SectionName(final String pstrSectionName) {
		checkSectionName(pstrSectionName);
		this.strSectionName = pstrSectionName;
		return this;
	}

	/**
	 * 
	* \brief SectionName - 	
	*
	* \details
	* 
	*
	* @return
	* @param 
	* @author KB
	 */
	public String SectionName() {
		return this.strSectionName;
	}

	/**
	 * 
	* \brief getPropertyString - 	
	*
	* \details
	* 
	*
	* @param pstrSection
	* @param key
	* @param defaultValue
	* @return
	* @param 
	* @author KB
	 */
	public String getPropertyString(final String pstrSection, final String key, final String defaultValue) {
		checkSectionName(pstrSection);
		checkKeyName(key);
		final SOSProfileSection map = findSection(pstrSection);
		if (map != null) {
			objCurrentSection = map;
			strSectionName = objCurrentSection.Name();
			final SOSProfileEntry objPE = map.Entry(key.toLowerCase());
			if (objPE != null) {
				return objPE.Value();
			}
		}
		return defaultValue;
	}

	private void checkSectionName(final String pstrSectionName) {
		if (pstrSectionName == null || pstrSectionName.length() <= 0) {
			throw new JobSchedulerException("[section] name missing");
		}
		check4ValidName(pstrSectionName);
	}

	private void checkKeyName(final String pstrKey) {

		if (pstrKey == null || pstrKey.length() <= 0) {
			throw new JobSchedulerException("key is missing");
		}

		check4ValidName(pstrKey);
	}

	/**
	 * 
	* \brief check4ValidName - 	
	*
	* \details
	* 
	*
	* @param pstrKey
	* @param 
	* @author KB
	 */
	public void check4ValidName(final String pstrKey) {
		if (pstrKey.matches(".*[\\[\\];\"=\\s].*")) {
			throw new JobSchedulerException(String.format("invalid characters in name: %1$s", pstrKey));
		}
	}

	/**
	 * 
	* \brief setPropertyString - 	
	*
	* \details
	* 
	*
	* @param pstrSectionName
	* @param key
	* @param pstrValue
	* @return JSIniFile
	* @author KB
	 */
	public JSIniFile setPropertyString(final String pstrSectionName, final String key, final String pstrValue) {
		checkSectionName(pstrSectionName);
		checkKeyName(key);

		final SOSProfileSection objSection = findSection(pstrSectionName);
		if (objSection != null) {
			final SOSProfileEntry objPE = objSection.Entry(key);
			if (objPE != null) {
				objPE.Value(pstrValue);
			}
			else {
				objSection.addEntry(key, pstrValue);
			}
		}
		else {
			this.addSection(pstrSectionName).addEntry(key, pstrValue);
		}
		return this;
	}

	/**
	 * 
	* \brief getPropertyInt - 	
	*
	* \details
	* 
	*
	* @param section
	* @param key
	* @param defaultValue
	* @return
	* @param 
	* @author KB
	 */
	public int getPropertyInt(final String section, final String key, final int defaultValue) {
		final String s = this.getPropertyString(section, key, null);
		if (s != null) {
			return Integer.parseInt(s);
		}
		return defaultValue;
	}

	/**
	 * 
	* \brief getPropertyBool - 	
	*
	* \details
	* 
	*
	* @param pstrSection
	* @param key
	* @param defaultValue
	* @return
	* @param 
	* @author KB
	 */
	public boolean getPropertyBool(final String pstrSection, final String key, final boolean defaultValue) {
		final String s = this.getPropertyString(pstrSection, key, null);
		if (s != null) {
			return s.equalsIgnoreCase("true");
		}
		return defaultValue;
	}

	/**
	 * @return
	 */
	public String ProfileName() {
		return this.strFileName;
	}

	/**
	 * @param string
	 */
	public void ProfileName(final String pstrProfileName) {
		this.strFileName = pstrProfileName;
	}

	@Override
	public String toString() {
		String strT = "";

		int j = 0;
		for (final Iterator i = this.Sections().entrySet().iterator(); i.hasNext();) {
			final Map.Entry e = (Map.Entry) i.next();
			logger.debug(j++ + ": " + e.getKey());
			final SOSProfileSection objPS = (SOSProfileSection) e.getValue();
			logger.debug(objPS.Name() + " - " + objPS.Entries().size());
			strT = strT.concat(objPS.toString());
			// System.out.println ("Section " + ++j + ", Name = " + e.getKey());
			// Map m = (Map) e.getValue();
			// System.out.println ("         noOfEntries = " + m.size());
		}
		return strT;
	}

	/**
	 * 
	* \brief saveAs - 	
	*
	* \details
	* 
	*
	* @param pstrSaveAsFileName
	* @param 
	* @author KB
	 */
	public void saveAs(final String pstrSaveAsFileName) {
		logger.debug("SaveAs = " + pstrSaveAsFileName);
		objSaveFile = new JSTextFile(pstrSaveAsFileName);
		this.save(objSaveFile);
	}

	/**
	 * 
	* \brief save - 	
	*
	* \details
	* 
	*
	* @param 
	* @author KB
	 */
	public void save() {
		objSaveFile = new JSTextFile(strFileName);
		this.save(objSaveFile);
	}

	/**
	 * 
	* \brief save - 	
	*
	* \details
	* 
	*
	* @param pobjSaveFile1
	* @param 
	* @author KB
	 */
	public void save(final JSTextFile pobjSaveFile1) {
		Map<String, SOSProfileSection> objSections = this.Sections();
		logger.debug("number of sections = " + objSections.size());
		try {
			for (SOSProfileSection objProfileSection : objSections.values()) {
				pobjSaveFile1.WriteLine(" ");
				pobjSaveFile1.WriteLine(objProfileSection.toString());
				logger.debug(objProfileSection.Name());
				for (SOSProfileEntry objEntry : objProfileSection.Entries().values()) {
					pobjSaveFile1.WriteLine(objEntry.toString());
					logger.debug("     " + objEntry.toString());
				}
			}
			pobjSaveFile1.close();
			logger.debug("File saved " + pobjSaveFile1.getAbsolutePath());
		}
		catch (Exception e) {
			throw new JobSchedulerException(e.getLocalizedMessage());
		}
	}

	@Override
	// IDirty
	public void setDirty(boolean pflgIsDirty) {
		flgIsDirty = pflgIsDirty;
	}

	@Override
	public int doSave(final boolean pflgAskForSave) {
		save();
		return 64;   // SWT.YES
	}
}
