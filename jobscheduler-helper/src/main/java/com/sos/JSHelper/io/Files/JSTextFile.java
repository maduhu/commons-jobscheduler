package com.sos.JSHelper.io.Files;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
//import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

/* ---------------------------------------------------------------------------
 APL/Software GmbH - Berlin
##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
Samstag, 27. Oktober 2007, Klaus.Buettner@sos-berlin.com (KB)
-------------------------------------------------------------------------------
<docu type="smcw" version="1.0">
<project>com.sos.IDocs</project>
<name>JSTextFile.java</name>
<title>plain-Text-File
</title>
<description>
<para>
plain-Text-File
</para>
</description>
<params>
</params>
<keywords>
	<keyword>File</keyword>
	<keyword>planText</keyword>
</keywords>
<categories>
<category>File</category>
</categories>
<date>Samstag, 27. Oktober 2007</date>
<copyright>© 2000, 2001 by SOS GmbH Berlin</copyright>
<author>Klaus.Buettner@sos-berlin.com</author>
<changes>
 <change who='KB' when='Samstag, 27. Oktober 2007' id='created'>
   <what>
   <para>
   created
   </para>
   </what>
 </change>
</changes>
</docu>
---------------------------------------------------------------------------- */
public class JSTextFile extends JSFile {
	private static final long	serialVersionUID	= 1L;
	@SuppressWarnings("unused")
	private final String		conClassName		= "JSTextFile";

	/* ---------------------------------------------------------------------------
	<method type="smcw" version="1.0">
	<name></name>
	<title>plain-Text-File</title>
	<description>
	<para>
	plain-Text-File
	</para>
	<para>
	Initial-Wert (Default) ist "true" (ohne Anführungszeichen).
	</para>
	<mandatory>true</mandatory>
	</description>
	<params>
	</params>
	<keywords>
		<keyword>File</keyword>
		<keyword>planText</keyword>
	</keywords>
	<categories>
	<category>File</category>
	</categories>
	</method>
	---------------------------------------------------------------------------- */

	public JSTextFile(String pstrFileName) {
		super(pstrFileName);
	} // public JSTextFile

	public JSTextFile(String pstrPathName, String pstrFileName) {
		super(pstrPathName, pstrFileName);
	} // public JSTextFile

	/**
	 * 
	 * \brief replaceString - Zeichenfolge in der Datei ersetzen durch eine andere Zeichenfolge
	 * 
	 * Die Methode ersetzt alle Vorkommen einer Zeichenfolge in der gesamten Datei
	 * durch eine andere anzugebende Zeichenfolge.
	 * 
	 * @param pstrRegEx - zu ersetzende Zeichenfolge oder regulärer Ausdruck
	 * @param pstrReplacement - einzusetzende Zeichenfolge
	 * @throws IOException
	 */
	public void replaceString(String pstrRegEx, String pstrReplacement) throws IOException {

		// TODO die zu ersetzenden Strings müssen als Stringpaare kommen

		String strFileN = this.getAbsolutePath();
		File tempFile = new File(strFileN + "~");
		BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile));

		File file = new File(strFileN);
		BufferedReader reader = new BufferedReader(new FileReader(file));
		
		while (true) {
			String line = reader.readLine();
			if (line == null) {
				break;
			}
			line = line.replaceAll(pstrRegEx, pstrReplacement);
			writer.write(line);
			writer.newLine();
		}
		writer.close();
		reader.close();
		file.delete(); // otherwise the rename leads into an error
		tempFile.renameTo(file);
	}// replaceString

} // public class JSTextFile
